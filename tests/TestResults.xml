<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="2528" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2022-11-28" time="13:59:14">
  <environment clr-version="4.0.30319.42000" user-domain="APPVEYOR-VM" cwd="C:\projects\evergreen" platform="Microsoft Windows Server 2019 Datacenter|C:\Windows|\Device\Harddisk0\Partition4" machine-name="APPVEYOR-VM" nunit-version="2.5.8.0" os-version="10.0.17763" user="appveyor" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="1192.3823" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\projects\evergreen\tests\Main.Tests.ps1" executed="True" result="Success" success="True" time="267.5438" asserts="0" description="C:\projects\evergreen\tests\Main.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="General project validation" executed="True" result="Success" success="True" time="84.6068" asserts="0" description="General project validation">
            <results>
              <test-suite type="ParameterizedTest" name="General project validation.Script &lt;file.Name&gt; should be valid PowerShell" executed="True" result="Success" success="True" time="82.1281" asserts="0" description="Script &lt;file.Name&gt; should be valid PowerShell">
                <results>
                  <test-case description="Script Get-1Password.ps1 should be valid PowerShell" name="General project validation.Script Get-1Password.ps1 should be valid PowerShell" time="1.5111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-1Password7.ps1 should be valid PowerShell" name="General project validation.Script Get-1Password7.ps1 should be valid PowerShell" time="0.3063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7zip.ps1 should be valid PowerShell" name="General project validation.Script Get-7zip.ps1 should be valid PowerShell" time="0.2967" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7ZipZS.ps1 should be valid PowerShell" name="General project validation.Script Get-7ZipZS.ps1 should be valid PowerShell" time="0.2814" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobat.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeAcrobat.ps1 should be valid PowerShell" time="0.2946" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatDC.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeAcrobatDC.ps1 should be valid PowerShell" time="0.2479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatProStdDC.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeAcrobatProStdDC.ps1 should be valid PowerShell" time="0.2873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatReaderDC.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeAcrobatReaderDC.ps1 should be valid PowerShell" time="0.275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeBrackets.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeBrackets.ps1 should be valid PowerShell" time="0.2985" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeConnect.ps1 should be valid PowerShell" name="General project validation.Script Get-AdobeConnect.ps1 should be valid PowerShell" time="0.6458" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin11.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptiumTemurin11.ps1 should be valid PowerShell" time="0.2828" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin16.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptiumTemurin16.ps1 should be valid PowerShell" time="0.2808" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin17.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptiumTemurin17.ps1 should be valid PowerShell" time="0.2333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin18.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptiumTemurin18.ps1 should be valid PowerShell" time="0.2576" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin8.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptiumTemurin8.ps1 should be valid PowerShell" time="0.3998" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK11.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDK11.ps1 should be valid PowerShell" time="0.2537" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK16.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDK16.ps1 should be valid PowerShell" time="0.4263" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK8.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDK8.ps1 should be valid PowerShell" time="0.417" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should be valid PowerShell" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru11.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDKSemuru11.ps1 should be valid PowerShell" time="0.263" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru17.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDKSemuru17.ps1 should be valid PowerShell" time="0.2708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru18.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDKSemuru18.ps1 should be valid PowerShell" time="0.2544" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru8.ps1 should be valid PowerShell" name="General project validation.Script Get-AdoptOpenJDKSemuru8.ps1 should be valid PowerShell" time="0.2515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AirtameApp.ps1 should be valid PowerShell" name="General project validation.Script Get-AirtameApp.ps1 should be valid PowerShell" time="0.2565" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AkeoRufus.ps1 should be valid PowerShell" name="General project validation.Script Get-AkeoRufus.ps1 should be valid PowerShell" time="0.2427" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AmazonCorretto.ps1 should be valid PowerShell" name="General project validation.Script Get-AmazonCorretto.ps1 should be valid PowerShell" time="0.2911" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anaconda.ps1 should be valid PowerShell" name="General project validation.Script Get-Anaconda.ps1 should be valid PowerShell" time="0.2925" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anki.ps1 should be valid PowerShell" name="General project validation.Script Get-Anki.ps1 should be valid PowerShell" time="0.2708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AppVentiX.ps1 should be valid PowerShell" name="General project validation.Script Get-AppVentiX.ps1 should be valid PowerShell" time="0.2886" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ArtifexGhostscript.ps1 should be valid PowerShell" name="General project validation.Script Get-ArtifexGhostscript.ps1 should be valid PowerShell" time="0.2445" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AtlassianSourcetree.ps1 should be valid PowerShell" name="General project validation.Script Get-AtlassianSourcetree.ps1 should be valid PowerShell" time="0.2537" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Audacity.ps1 should be valid PowerShell" name="General project validation.Script Get-Audacity.ps1 should be valid PowerShell" time="0.2737" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AutoDarkMode.ps1 should be valid PowerShell" name="General project validation.Script Get-AutoDarkMode.ps1 should be valid PowerShell" time="0.6919" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSCLI.ps1 should be valid PowerShell" name="General project validation.Script Get-AWSCLI.ps1 should be valid PowerShell" time="0.5326" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSSAMCLI.ps1 should be valid PowerShell" name="General project validation.Script Get-AWSSAMCLI.ps1 should be valid PowerShell" time="0.3397" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BeekeeperStudio.ps1 should be valid PowerShell" name="General project validation.Script Get-BeekeeperStudio.ps1 should be valid PowerShell" time="0.2566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BISF.ps1 should be valid PowerShell" name="General project validation.Script Get-BISF.ps1 should be valid PowerShell" time="0.2435" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BitwardenDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-BitwardenDesktop.ps1 should be valid PowerShell" time="0.2333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlenderLauncher.ps1 should be valid PowerShell" name="General project validation.Script Get-BlenderLauncher.ps1 should be valid PowerShell" time="0.2453" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlueJ.ps1 should be valid PowerShell" name="General project validation.Script Get-BlueJ.ps1 should be valid PowerShell" time="0.2441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CendioThinLinc.ps1 should be valid PowerShell" name="General project validation.Script Get-CendioThinLinc.ps1 should be valid PowerShell" time="0.2354" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ChromiumChromeDriver.ps1 should be valid PowerShell" name="General project validation.Script Get-ChromiumChromeDriver.ps1 should be valid PowerShell" time="0.2349" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixVMTools.ps1 should be valid PowerShell" name="General project validation.Script Get-CitrixVMTools.ps1 should be valid PowerShell" time="0.2577" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixWorkspaceApp.ps1 should be valid PowerShell" name="General project validation.Script Get-CitrixWorkspaceApp.ps1 should be valid PowerShell" time="0.2806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CodelerityApacheNetBeans.ps1 should be valid PowerShell" name="General project validation.Script Get-CodelerityApacheNetBeans.ps1 should be valid PowerShell" time="0.238" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ConnectionExperienceIndicator.ps1 should be valid PowerShell" name="General project validation.Script Get-ConnectionExperienceIndicator.ps1 should be valid PowerShell" time="0.242" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpAgent.ps1 should be valid PowerShell" name="General project validation.Script Get-ControlUpAgent.ps1 should be valid PowerShell" time="0.235" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpConsole.ps1 should be valid PowerShell" name="General project validation.Script Get-ControlUpConsole.ps1 should be valid PowerShell" time="0.2294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Cyberduck.ps1 should be valid PowerShell" name="General project validation.Script Get-Cyberduck.ps1 should be valid PowerShell" time="0.2746" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dbeaver.ps1 should be valid PowerShell" name="General project validation.Script Get-dbeaver.ps1 should be valid PowerShell" time="0.2498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DebaucheeBarrier.ps1 should be valid PowerShell" name="General project validation.Script Get-DebaucheeBarrier.ps1 should be valid PowerShell" time="0.2455" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-deviceTRUST.ps1 should be valid PowerShell" name="General project validation.Script Get-deviceTRUST.ps1 should be valid PowerShell" time="0.2927" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DevToys.ps1 should be valid PowerShell" name="General project validation.Script Get-DevToys.ps1 should be valid PowerShell" time="0.2295" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-diagrams.net.ps1 should be valid PowerShell" name="General project validation.Script Get-diagrams.net.ps1 should be valid PowerShell" time="0.2322" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dnGrep.ps1 should be valid PowerShell" name="General project validation.Script Get-dnGrep.ps1 should be valid PowerShell" time="0.2259" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DockerDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-DockerDesktop.ps1 should be valid PowerShell" time="0.2407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DoubleCommander.ps1 should be valid PowerShell" name="General project validation.Script Get-DoubleCommander.ps1 should be valid PowerShell" time="0.2648" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EgnyteDesktopApp.ps1 should be valid PowerShell" name="General project validation.Script Get-EgnyteDesktopApp.ps1 should be valid PowerShell" time="0.2688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointAntivirus.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETEndpointAntivirus.ps1 should be valid PowerShell" time="0.2631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointSecurity.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETEndpointSecurity.ps1 should be valid PowerShell" time="0.2439" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETFullDiskEncryption.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETFullDiskEncryption.ps1 should be valid PowerShell" time="0.2555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETInspectConnector.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETInspectConnector.ps1 should be valid PowerShell" time="0.2695" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETPROTECTServer.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETPROTECTServer.ps1 should be valid PowerShell" time="0.2503" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETSecureAuthentication.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETSecureAuthentication.ps1 should be valid PowerShell" time="0.2523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETServerSecurity.ps1 should be valid PowerShell" name="General project validation.Script Get-ESETServerSecurity.ps1 should be valid PowerShell" time="0.2552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileZilla.ps1 should be valid PowerShell" name="General project validation.Script Get-FileZilla.ps1 should be valid PowerShell" time="0.3321" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Fork.ps1 should be valid PowerShell" name="General project validation.Script Get-Fork.ps1 should be valid PowerShell" time="0.4258" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitPDFEditor.ps1 should be valid PowerShell" name="General project validation.Script Get-FoxitPDFEditor.ps1 should be valid PowerShell" time="0.3954" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitReader.ps1 should be valid PowerShell" name="General project validation.Script Get-FoxitReader.ps1 should be valid PowerShell" time="0.3602" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificFusion.ps1 should be valid PowerShell" name="General project validation.Script Get-FreedomScientificFusion.ps1 should be valid PowerShell" time="0.4158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificJAWS.ps1 should be valid PowerShell" name="General project validation.Script Get-FreedomScientificJAWS.ps1 should be valid PowerShell" time="0.3648" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificZoomText.ps1 should be valid PowerShell" name="General project validation.Script Get-FreedomScientificZoomText.ps1 should be valid PowerShell" time="0.3816" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreeFem.ps1 should be valid PowerShell" name="General project validation.Script Get-FreeFem.ps1 should be valid PowerShell" time="0.3977" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GeekSoftwarePDF24Creator.ps1 should be valid PowerShell" name="General project validation.Script Get-GeekSoftwarePDF24Creator.ps1 should be valid PowerShell" time="0.3871" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gephi.ps1 should be valid PowerShell" name="General project validation.Script Get-Gephi.ps1 should be valid PowerShell" time="0.3851" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GhislerTotalCommander.ps1 should be valid PowerShell" name="General project validation.Script Get-GhislerTotalCommander.ps1 should be valid PowerShell" time="0.3692" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gimp.ps1 should be valid PowerShell" name="General project validation.Script Get-Gimp.ps1 should be valid PowerShell" time="0.361" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitExtensions.ps1 should be valid PowerShell" name="General project validation.Script Get-GitExtensions.ps1 should be valid PowerShell" time="0.3636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitForWindows.ps1 should be valid PowerShell" name="General project validation.Script Get-GitForWindows.ps1 should be valid PowerShell" time="0.3649" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubAtom.ps1 should be valid PowerShell" name="General project validation.Script Get-GitHubAtom.ps1 should be valid PowerShell" time="0.3908" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRelease.ps1 should be valid PowerShell" name="General project validation.Script Get-GitHubRelease.ps1 should be valid PowerShell" time="0.3721" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GoogleChrome.ps1 should be valid PowerShell" name="General project validation.Script Get-GoogleChrome.ps1 should be valid PowerShell" time="0.3794" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gpg4win.ps1 should be valid PowerShell" name="General project validation.Script Get-Gpg4win.ps1 should be valid PowerShell" time="0.403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Greenshot.ps1 should be valid PowerShell" name="General project validation.Script Get-Greenshot.ps1 should be valid PowerShell" time="0.366" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-gretl.ps1 should be valid PowerShell" name="General project validation.Script Get-gretl.ps1 should be valid PowerShell" time="0.3802" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Handbrake.ps1 should be valid PowerShell" name="General project validation.Script Get-Handbrake.ps1 should be valid PowerShell" time="0.3932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpBoundary.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpBoundary.ps1 should be valid PowerShell" time="0.3493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpConsul.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpConsul.ps1 should be valid PowerShell" time="0.2802" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpNomad.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpNomad.ps1 should be valid PowerShell" time="0.2862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpPacker.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpPacker.ps1 should be valid PowerShell" time="0.281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpTerraform.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpTerraform.ps1 should be valid PowerShell" time="0.264" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpVault.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpVault.ps1 should be valid PowerShell" time="0.2602" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpWaypoint.ps1 should be valid PowerShell" name="General project validation.Script Get-HashicorpWaypoint.ps1 should be valid PowerShell" time="0.2526" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageGlass.ps1 should be valid PowerShell" name="General project validation.Script Get-ImageGlass.ps1 should be valid PowerShell" time="0.2593" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageMagickStudioImageMagick.ps1 should be valid PowerShell" name="General project validation.Script Get-ImageMagickStudioImageMagick.ps1 should be valid PowerShell" time="0.2621" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeFree.ps1 should be valid PowerShell" name="General project validation.Script Get-JamTreeSizeFree.ps1 should be valid PowerShell" time="0.2447" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeProfessional.ps1 should be valid PowerShell" name="General project validation.Script Get-JamTreeSizeProfessional.ps1 should be valid PowerShell" time="0.2759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JASP.ps1 should be valid PowerShell" name="General project validation.Script Get-JASP.ps1 should be valid PowerShell" time="0.2579" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JeremyMainGPUProfiler.ps1 should be valid PowerShell" name="General project validation.Script Get-JeremyMainGPUProfiler.ps1 should be valid PowerShell" time="0.2572" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsIntelliJIDEA.ps1 should be valid PowerShell" name="General project validation.Script Get-JetBrainsIntelliJIDEA.ps1 should be valid PowerShell" time="0.2357" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsPyCharm.ps1 should be valid PowerShell" name="General project validation.Script Get-JetBrainsPyCharm.ps1 should be valid PowerShell" time="0.245" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jq.ps1 should be valid PowerShell" name="General project validation.Script Get-jq.ps1 should be valid PowerShell" time="0.2364" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jrsoftwareInnoSetup.ps1 should be valid PowerShell" name="General project validation.Script Get-jrsoftwareInnoSetup.ps1 should be valid PowerShell" time="0.2361" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KarakunOpenWebStart.ps1 should be valid PowerShell" name="General project validation.Script Get-KarakunOpenWebStart.ps1 should be valid PowerShell" time="0.2493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KDiff3.ps1 should be valid PowerShell" name="General project validation.Script Get-KDiff3.ps1 should be valid PowerShell" time="0.2676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePass.ps1 should be valid PowerShell" name="General project validation.Script Get-KeePass.ps1 should be valid PowerShell" time="0.2526" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePassXCTeamKeePassXC.ps1 should be valid PowerShell" name="General project validation.Script Get-KeePassXCTeamKeePassXC.ps1 should be valid PowerShell" time="0.2415" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeeWeb.ps1 should be valid PowerShell" name="General project validation.Script Get-KeeWeb.ps1 should be valid PowerShell" time="0.2839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToMeeting.ps1 should be valid PowerShell" name="General project validation.Script Get-LogMeInGoToMeeting.ps1 should be valid PowerShell" time="0.2501" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToOpener.ps1 should be valid PowerShell" name="General project validation.Script Get-LogMeInGoToOpener.ps1 should be valid PowerShell" time="0.2398" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MasterPackager.ps1 should be valid PowerShell" name="General project validation.Script Get-MasterPackager.ps1 should be valid PowerShell" time="0.2976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MattermostDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-MattermostDesktop.ps1 should be valid PowerShell" time="0.2631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Maximus5ConEmu.ps1 should be valid PowerShell" name="General project validation.Script Get-Maximus5ConEmu.ps1 should be valid PowerShell" time="0.2826" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-McNeelRhino.ps1 should be valid PowerShell" name="General project validation.Script Get-McNeelRhino.ps1 should be valid PowerShell" time="0.2682" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MendeleyDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-MendeleyDesktop.ps1 should be valid PowerShell" time="0.2324" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MestrelabMnova.ps1 should be valid PowerShell" name="General project validation.Script Get-MestrelabMnova.ps1 should be valid PowerShell" time="0.248" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft.NET.ps1 should be valid PowerShell" name="General project validation.Script Get-Microsoft.NET.ps1 should be valid PowerShell" time="0.2578" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft365Apps.ps1 should be valid PowerShell" name="General project validation.Script Get-Microsoft365Apps.ps1 should be valid PowerShell" time="0.2742" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureDataStudio.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftAzureDataStudio.ps1 should be valid PowerShell" time="0.2764" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should be valid PowerShell" time="0.2589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureStorageExplorer.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftAzureStorageExplorer.ps1 should be valid PowerShell" time="0.2561" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureWindowsVMAgent.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftAzureWindowsVMAgent.ps1 should be valid PowerShell" time="0.2845" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBicep.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftBicep.ps1 should be valid PowerShell" time="0.293" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBotFrameworkEmulator.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftBotFrameworkEmulator.ps1 should be valid PowerShell" time="0.2335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdge.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftEdge.ps1 should be valid PowerShell" time="0.2277" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeDriver.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftEdgeDriver.ps1 should be valid PowerShell" time="0.256" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeWebView2Runtime.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftEdgeWebView2Runtime.ps1 should be valid PowerShell" time="0.2854" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftFSLogixApps.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftFSLogixApps.ps1 should be valid PowerShell" time="0.2396" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOneDrive.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftOneDrive.ps1 should be valid PowerShell" time="0.2656" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOutlook.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftOutlook.ps1 should be valid PowerShell" time="0.2661" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerShell.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftPowerShell.ps1 should be valid PowerShell" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerToys.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftPowerToys.ps1 should be valid PowerShell" time="0.2691" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftSsms.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftSsms.ps1 should be valid PowerShell" time="0.2766" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTeams.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftTeams.ps1 should be valid PowerShell" time="0.2573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTerminal.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftTerminal.ps1 should be valid PowerShell" time="0.2632" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudio.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftVisualStudio.ps1 should be valid PowerShell" time="0.2567" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudioCode.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftVisualStudioCode.ps1 should be valid PowerShell" time="0.2353" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWindowsPackageManagerClient.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWindowsPackageManagerClient.ps1 should be valid PowerShell" time="0.2719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdBootloader.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWvdBootloader.ps1 should be valid PowerShell" time="0.2651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdInfraAgent.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWvdInfraAgent.ps1 should be valid PowerShell" time="0.2612" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdMultimediaRedirection.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWvdMultimediaRedirection.ps1 should be valid PowerShell" time="0.2751" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRemoteDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWvdRemoteDesktop.ps1 should be valid PowerShell" time="0.2368" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRtcService.ps1 should be valid PowerShell" name="General project validation.Script Get-MicrosoftWvdRtcService.ps1 should be valid PowerShell" time="0.2631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Miniconda.ps1 should be valid PowerShell" name="General project validation.Script Get-Miniconda.ps1 should be valid PowerShell" time="0.2832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Minitab.ps1 should be valid PowerShell" name="General project validation.Script Get-Minitab.ps1 should be valid PowerShell" time="0.2501" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MiniZincIDE.ps1 should be valid PowerShell" name="General project validation.Script Get-MiniZincIDE.ps1 should be valid PowerShell" time="0.2815" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MirantisLens.ps1 should be valid PowerShell" name="General project validation.Script Get-MirantisLens.ps1 should be valid PowerShell" time="0.303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaFirefox.ps1 should be valid PowerShell" name="General project validation.Script Get-MozillaFirefox.ps1 should be valid PowerShell" time="0.2679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaGeckoDriver.ps1 should be valid PowerShell" name="General project validation.Script Get-MozillaGeckoDriver.ps1 should be valid PowerShell" time="0.3406" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaThunderbird.ps1 should be valid PowerShell" name="General project validation.Script Get-MozillaThunderbird.ps1 should be valid PowerShell" time="0.2888" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-mRemoteNG.ps1 should be valid PowerShell" name="General project validation.Script Get-mRemoteNG.ps1 should be valid PowerShell" time="0.2503" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MuseScore.ps1 should be valid PowerShell" name="General project validation.Script Get-MuseScore.ps1 should be valid PowerShell" time="0.2713" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Naps2.ps1 should be valid PowerShell" name="General project validation.Script Get-Naps2.ps1 should be valid PowerShell" time="0.2912" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NETworkManager.ps1 should be valid PowerShell" name="General project validation.Script Get-NETworkManager.ps1 should be valid PowerShell" time="0.2579" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NevcairielLAVFilters.ps1 should be valid PowerShell" name="General project validation.Script Get-NevcairielLAVFilters.ps1 should be valid PowerShell" time="0.2875" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Nomacs.ps1 should be valid PowerShell" name="General project validation.Script Get-Nomacs.ps1 should be valid PowerShell" time="0.2924" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Notable.ps1 should be valid PowerShell" name="General project validation.Script Get-Notable.ps1 should be valid PowerShell" time="0.332" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NotepadPlusPlus.ps1 should be valid PowerShell" name="General project validation.Script Get-NotepadPlusPlus.ps1 should be valid PowerShell" time="0.2867" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Obsidian.ps1 should be valid PowerShell" name="General project validation.Script Get-Obsidian.ps1 should be valid PowerShell" time="0.2604" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OBSStudio.ps1 should be valid PowerShell" name="General project validation.Script Get-OBSStudio.ps1 should be valid PowerShell" time="0.3188" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusDeployServer.ps1 should be valid PowerShell" name="General project validation.Script Get-OctopusDeployServer.ps1 should be valid PowerShell" time="0.3367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusTentacle.ps1 should be valid PowerShell" name="General project validation.Script Get-OctopusTentacle.ps1 should be valid PowerShell" time="0.2873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OnlyOfficeDesktopEditors.ps1 should be valid PowerShell" name="General project validation.Script Get-OnlyOfficeDesktopEditors.ps1 should be valid PowerShell" time="0.2814" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenJDK.ps1 should be valid PowerShell" name="General project validation.Script Get-OpenJDK.ps1 should be valid PowerShell" time="0.2896" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenLens.ps1 should be valid PowerShell" name="General project validation.Script Get-OpenLens.ps1 should be valid PowerShell" time="0.2821" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenShellMenu.ps1 should be valid PowerShell" name="General project validation.Script Get-OpenShellMenu.ps1 should be valid PowerShell" time="0.2929" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenWebStart.ps1 should be valid PowerShell" name="General project validation.Script Get-OpenWebStart.ps1 should be valid PowerShell" time="0.285" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaBrowser.ps1 should be valid PowerShell" name="General project validation.Script Get-OperaBrowser.ps1 should be valid PowerShell" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaCryptoBrowser.ps1 should be valid PowerShell" name="General project validation.Script Get-OperaCryptoBrowser.ps1 should be valid PowerShell" time="0.2817" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaGXBrowser.ps1 should be valid PowerShell" name="General project validation.Script Get-OperaGXBrowser.ps1 should be valid PowerShell" time="0.2731" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleJava8.ps1 should be valid PowerShell" name="General project validation.Script Get-OracleJava8.ps1 should be valid PowerShell" time="0.2738" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleVirtualBox.ps1 should be valid PowerShell" name="General project validation.Script Get-OracleVirtualBox.ps1 should be valid PowerShell" time="0.2852" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNet.ps1 should be valid PowerShell" name="General project validation.Script Get-PaintDotNet.ps1 should be valid PowerShell" time="0.2969" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNetOfflineInstaller.ps1 should be valid PowerShell" name="General project validation.Script Get-PaintDotNetOfflineInstaller.ps1 should be valid PowerShell" time="0.2653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Pandoc.ps1 should be valid PowerShell" name="General project validation.Script Get-Pandoc.ps1 should be valid PowerShell" time="0.2771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PDFForgePDFCreator.ps1 should be valid PowerShell" name="General project validation.Script Get-PDFForgePDFCreator.ps1 should be valid PowerShell" time="0.2949" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PeaZipPeaZip.ps1 should be valid PowerShell" name="General project validation.Script Get-PeaZipPeaZip.ps1 should be valid PowerShell" time="0.2502" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PiriformCCleanerFree.ps1 should be valid PowerShell" name="General project validation.Script Get-PiriformCCleanerFree.ps1 should be valid PowerShell" time="0.297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Postman.ps1 should be valid PowerShell" name="General project validation.Script Get-Postman.ps1 should be valid PowerShell" time="0.2571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Praat.ps1 should be valid PowerShell" name="General project validation.Script Get-Praat.ps1 should be valid PowerShell" time="0.2528" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInfraClient.ps1 should be valid PowerShell" name="General project validation.Script Get-ProgressChefInfraClient.ps1 should be valid PowerShell" time="0.2759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInSpec.ps1 should be valid PowerShell" name="General project validation.Script Get-ProgressChefInSpec.ps1 should be valid PowerShell" time="0.2388" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefWorkstation.ps1 should be valid PowerShell" name="General project validation.Script Get-ProgressChefWorkstation.ps1 should be valid PowerShell" time="0.2898" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProjectLibre.ps1 should be valid PowerShell" name="General project validation.Script Get-ProjectLibre.ps1 should be valid PowerShell" time="0.2653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Protege.ps1 should be valid PowerShell" name="General project validation.Script Get-Protege.ps1 should be valid PowerShell" time="0.2542" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSAppDeployToolkit.ps1 should be valid PowerShell" name="General project validation.Script Get-PSAppDeployToolkit.ps1 should be valid PowerShell" time="0.2627" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSFPython.ps1 should be valid PowerShell" name="General project validation.Script Get-PSFPython.ps1 should be valid PowerShell" time="0.273" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PuTTY.ps1 should be valid PowerShell" name="General project validation.Script Get-PuTTY.ps1 should be valid PowerShell" time="0.2686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RCoreTeamRforWindows.ps1 should be valid PowerShell" name="General project validation.Script Get-RCoreTeamRforWindows.ps1 should be valid PowerShell" time="0.2528" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RDAnalyzer.ps1 should be valid PowerShell" name="General project validation.Script Get-RDAnalyzer.ps1 should be valid PowerShell" time="0.2547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RingCentral.ps1 should be valid PowerShell" name="General project validation.Script Get-RingCentral.ps1 should be valid PowerShell" time="0.2774" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RizonesoftNotepad3.ps1 should be valid PowerShell" name="General project validation.Script Get-RizonesoftNotepad3.ps1 should be valid PowerShell" time="0.2674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RStudio.ps1 should be valid PowerShell" name="General project validation.Script Get-RStudio.ps1 should be valid PowerShell" time="0.2613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafeExamBrowser.ps1 should be valid PowerShell" name="General project validation.Script Get-SafeExamBrowser.ps1 should be valid PowerShell" time="0.2668" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafingPortmaster.ps1 should be valid PowerShell" name="General project validation.Script Get-SafingPortmaster.ps1 should be valid PowerShell" time="0.2773" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SAGAGIS.ps1 should be valid PowerShell" name="General project validation.Script Get-SAGAGIS.ps1 should be valid PowerShell" time="0.2544" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScooterBeyondCompare.ps1 should be valid PowerShell" name="General project validation.Script Get-ScooterBeyondCompare.ps1 should be valid PowerShell" time="0.2724" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Scratch.ps1 should be valid PowerShell" name="General project validation.Script Get-Scratch.ps1 should be valid PowerShell" time="0.3004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScreenToGif.ps1 should be valid PowerShell" name="General project validation.Script Get-ScreenToGif.ps1 should be valid PowerShell" time="0.2832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ShareX.ps1 should be valid PowerShell" name="General project validation.Script Get-ShareX.ps1 should be valid PowerShell" time="0.2636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SignalDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-SignalDesktop.ps1 should be valid PowerShell" time="0.2517" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Slack.ps1 should be valid PowerShell" name="General project validation.Script Get-Slack.ps1 should be valid PowerShell" time="0.2831" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SmartBearSoapUI.ps1 should be valid PowerShell" name="General project validation.Script Get-SmartBearSoapUI.ps1 should be valid PowerShell" time="0.275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SoberLemurPDFSamBasic.ps1 should be valid PowerShell" name="General project validation.Script Get-SoberLemurPDFSamBasic.ps1 should be valid PowerShell" time="0.2564" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should be valid PowerShell" name="General project validation.Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should be valid PowerShell" time="0.2739" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-StefansToolsgregpWin.ps1 should be valid PowerShell" name="General project validation.Script Get-StefansToolsgregpWin.ps1 should be valid PowerShell" time="0.2477" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SumatraPDFReader.ps1 should be valid PowerShell" name="General project validation.Script Get-SumatraPDFReader.ps1 should be valid PowerShell" time="0.2633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-TableauDesktop.ps1 should be valid PowerShell" time="0.2683" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauPrep.ps1 should be valid PowerShell" name="General project validation.Script Get-TableauPrep.ps1 should be valid PowerShell" time="0.2601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauReader.ps1 should be valid PowerShell" name="General project validation.Script Get-TableauReader.ps1 should be valid PowerShell" time="0.2973" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeamViewer.ps1 should be valid PowerShell" name="General project validation.Script Get-TeamViewer.ps1 should be valid PowerShell" time="0.2796" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithCamtasia.ps1 should be valid PowerShell" name="General project validation.Script Get-TechSmithCamtasia.ps1 should be valid PowerShell" time="0.2671" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithSnagit.ps1 should be valid PowerShell" name="General project validation.Script Get-TechSmithSnagit.ps1 should be valid PowerShell" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelegramDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-TelegramDesktop.ps1 should be valid PowerShell" time="0.2815" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerClassic.ps1 should be valid PowerShell" name="General project validation.Script Get-TelerikFiddlerClassic.ps1 should be valid PowerShell" time="0.2889" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerEverywhere.ps1 should be valid PowerShell" name="General project validation.Script Get-TelerikFiddlerEverywhere.ps1 should be valid PowerShell" time="0.2937" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Terminals.ps1 should be valid PowerShell" name="General project validation.Script Get-Terminals.ps1 should be valid PowerShell" time="0.2757" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeXstudio.ps1 should be valid PowerShell" name="General project validation.Script Get-TeXstudio.ps1 should be valid PowerShell" time="0.2589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TogglDesktop.ps1 should be valid PowerShell" name="General project validation.Script Get-TogglDesktop.ps1 should be valid PowerShell" time="0.2823" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TorProjectTorBrowser.ps1 should be valid PowerShell" name="General project validation.Script Get-TorProjectTorBrowser.ps1 should be valid PowerShell" time="0.2839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Tower.ps1 should be valid PowerShell" name="General project validation.Script Get-Tower.ps1 should be valid PowerShell" time="0.2705" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should be valid PowerShell" name="General project validation.Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should be valid PowerShell" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-USBPcap.ps1 should be valid PowerShell" name="General project validation.Script Get-USBPcap.ps1 should be valid PowerShell" time="0.2765" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VastLimitsUberAgent.ps1 should be valid PowerShell" name="General project validation.Script Get-VastLimitsUberAgent.ps1 should be valid PowerShell" time="0.2719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VeraCrypt.ps1 should be valid PowerShell" name="General project validation.Script Get-VeraCrypt.ps1 should be valid PowerShell" time="0.2416" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VercelHyper.ps1 should be valid PowerShell" name="General project validation.Script Get-VercelHyper.ps1 should be valid PowerShell" time="0.2424" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VideoLanVlcPlayer.ps1 should be valid PowerShell" name="General project validation.Script Get-VideoLanVlcPlayer.ps1 should be valid PowerShell" time="0.2969" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VisualCppRedistAIO.ps1 should be valid PowerShell" name="General project validation.Script Get-VisualCppRedistAIO.ps1 should be valid PowerShell" time="0.2859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMPlexWorkstation.ps1 should be valid PowerShell" name="General project validation.Script Get-VMPlexWorkstation.ps1 should be valid PowerShell" time="0.2735" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClient.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareHorizonClient.ps1 should be valid PowerShell" time="0.2852" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClientAlt.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareHorizonClientAlt.ps1 should be valid PowerShell" time="0.2351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareOSOptimizationTool.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareOSOptimizationTool.ps1 should be valid PowerShell" time="0.2441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareTools.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareTools.ps1 should be valid PowerShell" time="0.2575" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPlayer.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareWorkstationPlayer.ps1 should be valid PowerShell" time="0.2559" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPro.ps1 should be valid PowerShell" name="General project validation.Script Get-VMwareWorkstationPro.ps1 should be valid PowerShell" time="0.2543" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-voidtoolsEverything.ps1 should be valid PowerShell" name="General project validation.Script Get-voidtoolsEverything.ps1 should be valid PowerShell" time="0.2457" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Win32OpenSSH.ps1 should be valid PowerShell" name="General project validation.Script Get-Win32OpenSSH.ps1 should be valid PowerShell" time="0.2327" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinMerge.ps1 should be valid PowerShell" name="General project validation.Script Get-WinMerge.ps1 should be valid PowerShell" time="0.2284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinSCP.ps1 should be valid PowerShell" name="General project validation.Script Get-WinSCP.ps1 should be valid PowerShell" time="0.2314" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Wireshark.ps1 should be valid PowerShell" name="General project validation.Script Get-Wireshark.ps1 should be valid PowerShell" time="0.2504" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WixToolset.ps1 should be valid PowerShell" name="General project validation.Script Get-WixToolset.ps1 should be valid PowerShell" time="0.2608" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnConvert.ps1 should be valid PowerShell" name="General project validation.Script Get-XnSoftXnConvert.ps1 should be valid PowerShell" time="0.2549" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnViewMP.ps1 should be valid PowerShell" name="General project validation.Script Get-XnSoftXnViewMP.ps1 should be valid PowerShell" time="0.3103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-YubicoAuthenticator.ps1 should be valid PowerShell" name="General project validation.Script Get-YubicoAuthenticator.ps1 should be valid PowerShell" time="0.2769" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zoom.ps1 should be valid PowerShell" name="General project validation.Script Get-Zoom.ps1 should be valid PowerShell" time="0.3425" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ZorgmailVeiligVerzendenAddin.ps1 should be valid PowerShell" name="General project validation.Script Get-ZorgmailVeiligVerzendenAddin.ps1 should be valid PowerShell" time="0.3173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zotero.ps1 should be valid PowerShell" name="General project validation.Script Get-Zotero.ps1 should be valid PowerShell" time="0.2749" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertFrom-IniFile.ps1 should be valid PowerShell" name="General project validation.Script ConvertFrom-IniFile.ps1 should be valid PowerShell" time="0.2607" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-DateTime.ps1 should be valid PowerShell" name="General project validation.Script ConvertTo-DateTime.ps1 should be valid PowerShell" time="0.3106" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-Hashtable.ps1 should be valid PowerShell" name="General project validation.Script ConvertTo-Hashtable.ps1 should be valid PowerShell" time="0.3655" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Expand-GzipArchive.ps1 should be valid PowerShell" name="General project validation.Script Expand-GzipArchive.ps1 should be valid PowerShell" time="0.2764" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Architecture.ps1 should be valid PowerShell" name="General project validation.Script Get-Architecture.ps1 should be valid PowerShell" time="0.2489" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileType.ps1 should be valid PowerShell" name="General project validation.Script Get-FileType.ps1 should be valid PowerShell" time="0.3004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FunctionResource.ps1 should be valid PowerShell" name="General project validation.Script Get-FunctionResource.ps1 should be valid PowerShell" time="0.3466" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRepoRelease.ps1 should be valid PowerShell" name="General project validation.Script Get-GitHubRepoRelease.ps1 should be valid PowerShell" time="0.339" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ModuleResource.ps1 should be valid PowerShell" name="General project validation.Script Get-ModuleResource.ps1 should be valid PowerShell" time="0.3558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Platform.ps1 should be valid PowerShell" name="General project validation.Script Get-Platform.ps1 should be valid PowerShell" time="0.3726" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SourceForgeRepoRelease.ps1 should be valid PowerShell" name="General project validation.Script Get-SourceForgeRepoRelease.ps1 should be valid PowerShell" time="0.3479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-RestMethodWrapper.ps1 should be valid PowerShell" name="General project validation.Script Invoke-RestMethodWrapper.ps1 should be valid PowerShell" time="0.3096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-SystemNetRequest.ps1 should be valid PowerShell" name="General project validation.Script Invoke-SystemNetRequest.ps1 should be valid PowerShell" time="0.2985" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-WebRequestWrapper.ps1 should be valid PowerShell" name="General project validation.Script Invoke-WebRequestWrapper.ps1 should be valid PowerShell" time="0.3004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenPath.ps1 should be valid PowerShell" name="General project validation.Script New-EvergreenPath.ps1 should be valid PowerShell" time="0.3101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Remove-ProxyEnv.ps1 should be valid PowerShell" name="General project validation.Script Remove-ProxyEnv.ps1 should be valid PowerShell" time="0.3824" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-DnsNameWrapper.ps1 should be valid PowerShell" name="General project validation.Script Resolve-DnsNameWrapper.ps1 should be valid PowerShell" time="0.3439" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-InvokeWebRequest.ps1 should be valid PowerShell" name="General project validation.Script Resolve-InvokeWebRequest.ps1 should be valid PowerShell" time="0.366" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-SystemNetWebRequest.ps1 should be valid PowerShell" name="General project validation.Script Resolve-SystemNetWebRequest.ps1 should be valid PowerShell" time="0.3534" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-File.ps1 should be valid PowerShell" name="General project validation.Script Save-File.ps1 should be valid PowerShell" time="0.3241" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Set-ProxyEnv.ps1 should be valid PowerShell" name="General project validation.Script Set-ProxyEnv.ps1 should be valid PowerShell" time="0.328" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-ProxyEnv.ps1 should be valid PowerShell" name="General project validation.Script Test-ProxyEnv.ps1 should be valid PowerShell" time="0.3167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-PSCore.ps1 should be valid PowerShell" name="General project validation.Script Test-PSCore.ps1 should be valid PowerShell" time="0.3228" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Export-EvergreenApp.ps1 should be valid PowerShell" time="0.3449" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenManifest.ps1 should be valid PowerShell" name="General project validation.Script Export-EvergreenManifest.ps1 should be valid PowerShell" time="0.3596" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Find-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Find-EvergreenApp.ps1 should be valid PowerShell" time="0.3256" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Get-EvergreenApp.ps1 should be valid PowerShell" time="0.3483" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenLibrary.ps1 should be valid PowerShell" name="General project validation.Script Get-EvergreenLibrary.ps1 should be valid PowerShell" time="0.3418" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Invoke-EvergreenApp.ps1 should be valid PowerShell" time="0.3339" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenLibraryUpdate.ps1 should be valid PowerShell" name="General project validation.Script Invoke-EvergreenLibraryUpdate.ps1 should be valid PowerShell" time="0.3511" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenLibrary.ps1 should be valid PowerShell" name="General project validation.Script New-EvergreenLibrary.ps1 should be valid PowerShell" time="0.3425" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Save-EvergreenApp.ps1 should be valid PowerShell" time="0.3359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-EvergreenApp.ps1 should be valid PowerShell" name="General project validation.Script Test-EvergreenApp.ps1 should be valid PowerShell" time="0.3384" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Module Function validation" executed="True" result="Success" success="True" time="260.0235" asserts="0" description="Module Function validation">
            <results>
              <test-suite type="ParameterizedTest" name="Module Function validation.Script &lt;file.Name&gt; should only contain one function" executed="True" result="Success" success="True" time="90.0958" asserts="0" description="Script &lt;file.Name&gt; should only contain one function">
                <results>
                  <test-case description="Script Get-1Password.ps1 should only contain one function" name="Module Function validation.Script Get-1Password.ps1 should only contain one function" time="0.4563" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-1Password7.ps1 should only contain one function" name="Module Function validation.Script Get-1Password7.ps1 should only contain one function" time="0.4895" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7zip.ps1 should only contain one function" name="Module Function validation.Script Get-7zip.ps1 should only contain one function" time="0.4679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7ZipZS.ps1 should only contain one function" name="Module Function validation.Script Get-7ZipZS.ps1 should only contain one function" time="0.5071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobat.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeAcrobat.ps1 should only contain one function" time="0.4333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatDC.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeAcrobatDC.ps1 should only contain one function" time="0.3893" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatProStdDC.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeAcrobatProStdDC.ps1 should only contain one function" time="0.3954" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatReaderDC.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeAcrobatReaderDC.ps1 should only contain one function" time="0.4062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeBrackets.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeBrackets.ps1 should only contain one function" time="0.4362" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeConnect.ps1 should only contain one function" name="Module Function validation.Script Get-AdobeConnect.ps1 should only contain one function" time="0.4697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin11.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptiumTemurin11.ps1 should only contain one function" time="0.4099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin16.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptiumTemurin16.ps1 should only contain one function" time="0.4157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin17.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptiumTemurin17.ps1 should only contain one function" time="0.43" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin18.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptiumTemurin18.ps1 should only contain one function" time="0.4256" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin8.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptiumTemurin8.ps1 should only contain one function" time="0.4519" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK11.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDK11.ps1 should only contain one function" time="0.4481" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK16.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDK16.ps1 should only contain one function" time="0.4245" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK8.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDK8.ps1 should only contain one function" time="0.4314" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should only contain one function" time="0.4469" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru11.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDKSemuru11.ps1 should only contain one function" time="0.4028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru17.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDKSemuru17.ps1 should only contain one function" time="0.4297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru18.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDKSemuru18.ps1 should only contain one function" time="0.4739" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru8.ps1 should only contain one function" name="Module Function validation.Script Get-AdoptOpenJDKSemuru8.ps1 should only contain one function" time="0.3548" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AirtameApp.ps1 should only contain one function" name="Module Function validation.Script Get-AirtameApp.ps1 should only contain one function" time="0.4426" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AkeoRufus.ps1 should only contain one function" name="Module Function validation.Script Get-AkeoRufus.ps1 should only contain one function" time="0.4556" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AmazonCorretto.ps1 should only contain one function" name="Module Function validation.Script Get-AmazonCorretto.ps1 should only contain one function" time="0.4336" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anaconda.ps1 should only contain one function" name="Module Function validation.Script Get-Anaconda.ps1 should only contain one function" time="0.4167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anki.ps1 should only contain one function" name="Module Function validation.Script Get-Anki.ps1 should only contain one function" time="0.4366" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AppVentiX.ps1 should only contain one function" name="Module Function validation.Script Get-AppVentiX.ps1 should only contain one function" time="0.463" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ArtifexGhostscript.ps1 should only contain one function" name="Module Function validation.Script Get-ArtifexGhostscript.ps1 should only contain one function" time="0.4482" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AtlassianSourcetree.ps1 should only contain one function" name="Module Function validation.Script Get-AtlassianSourcetree.ps1 should only contain one function" time="0.4363" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Audacity.ps1 should only contain one function" name="Module Function validation.Script Get-Audacity.ps1 should only contain one function" time="0.4354" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AutoDarkMode.ps1 should only contain one function" name="Module Function validation.Script Get-AutoDarkMode.ps1 should only contain one function" time="0.4392" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSCLI.ps1 should only contain one function" name="Module Function validation.Script Get-AWSCLI.ps1 should only contain one function" time="0.4631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSSAMCLI.ps1 should only contain one function" name="Module Function validation.Script Get-AWSSAMCLI.ps1 should only contain one function" time="0.477" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BeekeeperStudio.ps1 should only contain one function" name="Module Function validation.Script Get-BeekeeperStudio.ps1 should only contain one function" time="0.4235" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BISF.ps1 should only contain one function" name="Module Function validation.Script Get-BISF.ps1 should only contain one function" time="0.3743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BitwardenDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-BitwardenDesktop.ps1 should only contain one function" time="0.3799" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlenderLauncher.ps1 should only contain one function" name="Module Function validation.Script Get-BlenderLauncher.ps1 should only contain one function" time="0.3032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlueJ.ps1 should only contain one function" name="Module Function validation.Script Get-BlueJ.ps1 should only contain one function" time="0.2853" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CendioThinLinc.ps1 should only contain one function" name="Module Function validation.Script Get-CendioThinLinc.ps1 should only contain one function" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ChromiumChromeDriver.ps1 should only contain one function" name="Module Function validation.Script Get-ChromiumChromeDriver.ps1 should only contain one function" time="0.3014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixVMTools.ps1 should only contain one function" name="Module Function validation.Script Get-CitrixVMTools.ps1 should only contain one function" time="0.4374" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixWorkspaceApp.ps1 should only contain one function" name="Module Function validation.Script Get-CitrixWorkspaceApp.ps1 should only contain one function" time="0.4237" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CodelerityApacheNetBeans.ps1 should only contain one function" name="Module Function validation.Script Get-CodelerityApacheNetBeans.ps1 should only contain one function" time="0.4564" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ConnectionExperienceIndicator.ps1 should only contain one function" name="Module Function validation.Script Get-ConnectionExperienceIndicator.ps1 should only contain one function" time="0.4533" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpAgent.ps1 should only contain one function" name="Module Function validation.Script Get-ControlUpAgent.ps1 should only contain one function" time="0.4323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpConsole.ps1 should only contain one function" name="Module Function validation.Script Get-ControlUpConsole.ps1 should only contain one function" time="0.3147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Cyberduck.ps1 should only contain one function" name="Module Function validation.Script Get-Cyberduck.ps1 should only contain one function" time="0.3061" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dbeaver.ps1 should only contain one function" name="Module Function validation.Script Get-dbeaver.ps1 should only contain one function" time="0.2963" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DebaucheeBarrier.ps1 should only contain one function" name="Module Function validation.Script Get-DebaucheeBarrier.ps1 should only contain one function" time="0.2819" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-deviceTRUST.ps1 should only contain one function" name="Module Function validation.Script Get-deviceTRUST.ps1 should only contain one function" time="0.3015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DevToys.ps1 should only contain one function" name="Module Function validation.Script Get-DevToys.ps1 should only contain one function" time="0.3138" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-diagrams.net.ps1 should only contain one function" name="Module Function validation.Script Get-diagrams.net.ps1 should only contain one function" time="0.299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dnGrep.ps1 should only contain one function" name="Module Function validation.Script Get-dnGrep.ps1 should only contain one function" time="0.2945" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DockerDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-DockerDesktop.ps1 should only contain one function" time="0.4027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DoubleCommander.ps1 should only contain one function" name="Module Function validation.Script Get-DoubleCommander.ps1 should only contain one function" time="0.2776" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EgnyteDesktopApp.ps1 should only contain one function" name="Module Function validation.Script Get-EgnyteDesktopApp.ps1 should only contain one function" time="0.3032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointAntivirus.ps1 should only contain one function" name="Module Function validation.Script Get-ESETEndpointAntivirus.ps1 should only contain one function" time="0.2962" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointSecurity.ps1 should only contain one function" name="Module Function validation.Script Get-ESETEndpointSecurity.ps1 should only contain one function" time="0.3044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETFullDiskEncryption.ps1 should only contain one function" name="Module Function validation.Script Get-ESETFullDiskEncryption.ps1 should only contain one function" time="0.2859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETInspectConnector.ps1 should only contain one function" name="Module Function validation.Script Get-ESETInspectConnector.ps1 should only contain one function" time="0.3145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETPROTECTServer.ps1 should only contain one function" name="Module Function validation.Script Get-ESETPROTECTServer.ps1 should only contain one function" time="0.3208" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETSecureAuthentication.ps1 should only contain one function" name="Module Function validation.Script Get-ESETSecureAuthentication.ps1 should only contain one function" time="0.3075" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETServerSecurity.ps1 should only contain one function" name="Module Function validation.Script Get-ESETServerSecurity.ps1 should only contain one function" time="0.3197" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileZilla.ps1 should only contain one function" name="Module Function validation.Script Get-FileZilla.ps1 should only contain one function" time="0.3314" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Fork.ps1 should only contain one function" name="Module Function validation.Script Get-Fork.ps1 should only contain one function" time="0.287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitPDFEditor.ps1 should only contain one function" name="Module Function validation.Script Get-FoxitPDFEditor.ps1 should only contain one function" time="0.2992" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitReader.ps1 should only contain one function" name="Module Function validation.Script Get-FoxitReader.ps1 should only contain one function" time="0.3114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificFusion.ps1 should only contain one function" name="Module Function validation.Script Get-FreedomScientificFusion.ps1 should only contain one function" time="0.2961" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificJAWS.ps1 should only contain one function" name="Module Function validation.Script Get-FreedomScientificJAWS.ps1 should only contain one function" time="0.3029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificZoomText.ps1 should only contain one function" name="Module Function validation.Script Get-FreedomScientificZoomText.ps1 should only contain one function" time="0.303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreeFem.ps1 should only contain one function" name="Module Function validation.Script Get-FreeFem.ps1 should only contain one function" time="0.275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GeekSoftwarePDF24Creator.ps1 should only contain one function" name="Module Function validation.Script Get-GeekSoftwarePDF24Creator.ps1 should only contain one function" time="0.2806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gephi.ps1 should only contain one function" name="Module Function validation.Script Get-Gephi.ps1 should only contain one function" time="0.2734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GhislerTotalCommander.ps1 should only contain one function" name="Module Function validation.Script Get-GhislerTotalCommander.ps1 should only contain one function" time="0.2729" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gimp.ps1 should only contain one function" name="Module Function validation.Script Get-Gimp.ps1 should only contain one function" time="0.2828" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitExtensions.ps1 should only contain one function" name="Module Function validation.Script Get-GitExtensions.ps1 should only contain one function" time="0.2824" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitForWindows.ps1 should only contain one function" name="Module Function validation.Script Get-GitForWindows.ps1 should only contain one function" time="0.2953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubAtom.ps1 should only contain one function" name="Module Function validation.Script Get-GitHubAtom.ps1 should only contain one function" time="0.3019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRelease.ps1 should only contain one function" name="Module Function validation.Script Get-GitHubRelease.ps1 should only contain one function" time="0.3642" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GoogleChrome.ps1 should only contain one function" name="Module Function validation.Script Get-GoogleChrome.ps1 should only contain one function" time="0.3199" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gpg4win.ps1 should only contain one function" name="Module Function validation.Script Get-Gpg4win.ps1 should only contain one function" time="0.3308" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Greenshot.ps1 should only contain one function" name="Module Function validation.Script Get-Greenshot.ps1 should only contain one function" time="0.3105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-gretl.ps1 should only contain one function" name="Module Function validation.Script Get-gretl.ps1 should only contain one function" time="0.3248" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Handbrake.ps1 should only contain one function" name="Module Function validation.Script Get-Handbrake.ps1 should only contain one function" time="0.3367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpBoundary.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpBoundary.ps1 should only contain one function" time="0.3153" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpConsul.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpConsul.ps1 should only contain one function" time="0.317" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpNomad.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpNomad.ps1 should only contain one function" time="0.3228" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpPacker.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpPacker.ps1 should only contain one function" time="0.2873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpTerraform.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpTerraform.ps1 should only contain one function" time="0.2866" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpVault.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpVault.ps1 should only contain one function" time="0.3372" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpWaypoint.ps1 should only contain one function" name="Module Function validation.Script Get-HashicorpWaypoint.ps1 should only contain one function" time="0.3484" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageGlass.ps1 should only contain one function" name="Module Function validation.Script Get-ImageGlass.ps1 should only contain one function" time="0.2847" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageMagickStudioImageMagick.ps1 should only contain one function" name="Module Function validation.Script Get-ImageMagickStudioImageMagick.ps1 should only contain one function" time="0.2794" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeFree.ps1 should only contain one function" name="Module Function validation.Script Get-JamTreeSizeFree.ps1 should only contain one function" time="0.3204" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeProfessional.ps1 should only contain one function" name="Module Function validation.Script Get-JamTreeSizeProfessional.ps1 should only contain one function" time="0.3262" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JASP.ps1 should only contain one function" name="Module Function validation.Script Get-JASP.ps1 should only contain one function" time="0.2896" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JeremyMainGPUProfiler.ps1 should only contain one function" name="Module Function validation.Script Get-JeremyMainGPUProfiler.ps1 should only contain one function" time="0.2743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsIntelliJIDEA.ps1 should only contain one function" name="Module Function validation.Script Get-JetBrainsIntelliJIDEA.ps1 should only contain one function" time="0.3157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsPyCharm.ps1 should only contain one function" name="Module Function validation.Script Get-JetBrainsPyCharm.ps1 should only contain one function" time="0.3278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jq.ps1 should only contain one function" name="Module Function validation.Script Get-jq.ps1 should only contain one function" time="0.3028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jrsoftwareInnoSetup.ps1 should only contain one function" name="Module Function validation.Script Get-jrsoftwareInnoSetup.ps1 should only contain one function" time="0.2976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KarakunOpenWebStart.ps1 should only contain one function" name="Module Function validation.Script Get-KarakunOpenWebStart.ps1 should only contain one function" time="0.3104" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KDiff3.ps1 should only contain one function" name="Module Function validation.Script Get-KDiff3.ps1 should only contain one function" time="0.3047" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePass.ps1 should only contain one function" name="Module Function validation.Script Get-KeePass.ps1 should only contain one function" time="0.2915" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePassXCTeamKeePassXC.ps1 should only contain one function" name="Module Function validation.Script Get-KeePassXCTeamKeePassXC.ps1 should only contain one function" time="0.3001" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeeWeb.ps1 should only contain one function" name="Module Function validation.Script Get-KeeWeb.ps1 should only contain one function" time="0.2963" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToMeeting.ps1 should only contain one function" name="Module Function validation.Script Get-LogMeInGoToMeeting.ps1 should only contain one function" time="0.295" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToOpener.ps1 should only contain one function" name="Module Function validation.Script Get-LogMeInGoToOpener.ps1 should only contain one function" time="0.3074" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MasterPackager.ps1 should only contain one function" name="Module Function validation.Script Get-MasterPackager.ps1 should only contain one function" time="0.2984" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MattermostDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-MattermostDesktop.ps1 should only contain one function" time="0.5558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Maximus5ConEmu.ps1 should only contain one function" name="Module Function validation.Script Get-Maximus5ConEmu.ps1 should only contain one function" time="0.2997" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-McNeelRhino.ps1 should only contain one function" name="Module Function validation.Script Get-McNeelRhino.ps1 should only contain one function" time="0.3066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MendeleyDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-MendeleyDesktop.ps1 should only contain one function" time="0.2962" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MestrelabMnova.ps1 should only contain one function" name="Module Function validation.Script Get-MestrelabMnova.ps1 should only contain one function" time="0.3009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft.NET.ps1 should only contain one function" name="Module Function validation.Script Get-Microsoft.NET.ps1 should only contain one function" time="0.3068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft365Apps.ps1 should only contain one function" name="Module Function validation.Script Get-Microsoft365Apps.ps1 should only contain one function" time="0.3627" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureDataStudio.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftAzureDataStudio.ps1 should only contain one function" time="0.2875" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should only contain one function" time="0.3005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureStorageExplorer.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftAzureStorageExplorer.ps1 should only contain one function" time="0.2837" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureWindowsVMAgent.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftAzureWindowsVMAgent.ps1 should only contain one function" time="0.283" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBicep.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftBicep.ps1 should only contain one function" time="0.2703" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBotFrameworkEmulator.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftBotFrameworkEmulator.ps1 should only contain one function" time="0.2921" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdge.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftEdge.ps1 should only contain one function" time="0.2888" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeDriver.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftEdgeDriver.ps1 should only contain one function" time="0.2799" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeWebView2Runtime.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftEdgeWebView2Runtime.ps1 should only contain one function" time="0.284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftFSLogixApps.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftFSLogixApps.ps1 should only contain one function" time="0.3005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOneDrive.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftOneDrive.ps1 should only contain one function" time="0.2956" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOutlook.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftOutlook.ps1 should only contain one function" time="0.2808" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerShell.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftPowerShell.ps1 should only contain one function" time="0.2731" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerToys.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftPowerToys.ps1 should only contain one function" time="0.2778" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftSsms.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftSsms.ps1 should only contain one function" time="0.2724" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTeams.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftTeams.ps1 should only contain one function" time="0.282" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTerminal.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftTerminal.ps1 should only contain one function" time="0.276" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudio.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftVisualStudio.ps1 should only contain one function" time="0.2777" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudioCode.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftVisualStudioCode.ps1 should only contain one function" time="0.2709" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWindowsPackageManagerClient.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWindowsPackageManagerClient.ps1 should only contain one function" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdBootloader.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWvdBootloader.ps1 should only contain one function" time="0.2818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdInfraAgent.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWvdInfraAgent.ps1 should only contain one function" time="0.3189" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdMultimediaRedirection.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWvdMultimediaRedirection.ps1 should only contain one function" time="0.3207" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRemoteDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWvdRemoteDesktop.ps1 should only contain one function" time="0.3894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRtcService.ps1 should only contain one function" name="Module Function validation.Script Get-MicrosoftWvdRtcService.ps1 should only contain one function" time="0.2784" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Miniconda.ps1 should only contain one function" name="Module Function validation.Script Get-Miniconda.ps1 should only contain one function" time="0.2845" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Minitab.ps1 should only contain one function" name="Module Function validation.Script Get-Minitab.ps1 should only contain one function" time="0.2978" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MiniZincIDE.ps1 should only contain one function" name="Module Function validation.Script Get-MiniZincIDE.ps1 should only contain one function" time="0.278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MirantisLens.ps1 should only contain one function" name="Module Function validation.Script Get-MirantisLens.ps1 should only contain one function" time="0.4484" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaFirefox.ps1 should only contain one function" name="Module Function validation.Script Get-MozillaFirefox.ps1 should only contain one function" time="0.2966" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaGeckoDriver.ps1 should only contain one function" name="Module Function validation.Script Get-MozillaGeckoDriver.ps1 should only contain one function" time="0.2737" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaThunderbird.ps1 should only contain one function" name="Module Function validation.Script Get-MozillaThunderbird.ps1 should only contain one function" time="0.3054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-mRemoteNG.ps1 should only contain one function" name="Module Function validation.Script Get-mRemoteNG.ps1 should only contain one function" time="0.2662" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MuseScore.ps1 should only contain one function" name="Module Function validation.Script Get-MuseScore.ps1 should only contain one function" time="0.2599" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Naps2.ps1 should only contain one function" name="Module Function validation.Script Get-Naps2.ps1 should only contain one function" time="0.277" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NETworkManager.ps1 should only contain one function" name="Module Function validation.Script Get-NETworkManager.ps1 should only contain one function" time="0.2794" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NevcairielLAVFilters.ps1 should only contain one function" name="Module Function validation.Script Get-NevcairielLAVFilters.ps1 should only contain one function" time="0.2857" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Nomacs.ps1 should only contain one function" name="Module Function validation.Script Get-Nomacs.ps1 should only contain one function" time="0.2833" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Notable.ps1 should only contain one function" name="Module Function validation.Script Get-Notable.ps1 should only contain one function" time="0.2797" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NotepadPlusPlus.ps1 should only contain one function" name="Module Function validation.Script Get-NotepadPlusPlus.ps1 should only contain one function" time="0.2854" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Obsidian.ps1 should only contain one function" name="Module Function validation.Script Get-Obsidian.ps1 should only contain one function" time="0.2686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OBSStudio.ps1 should only contain one function" name="Module Function validation.Script Get-OBSStudio.ps1 should only contain one function" time="0.2574" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusDeployServer.ps1 should only contain one function" name="Module Function validation.Script Get-OctopusDeployServer.ps1 should only contain one function" time="0.2552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusTentacle.ps1 should only contain one function" name="Module Function validation.Script Get-OctopusTentacle.ps1 should only contain one function" time="0.272" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OnlyOfficeDesktopEditors.ps1 should only contain one function" name="Module Function validation.Script Get-OnlyOfficeDesktopEditors.ps1 should only contain one function" time="0.2692" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenJDK.ps1 should only contain one function" name="Module Function validation.Script Get-OpenJDK.ps1 should only contain one function" time="0.278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenLens.ps1 should only contain one function" name="Module Function validation.Script Get-OpenLens.ps1 should only contain one function" time="0.2841" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenShellMenu.ps1 should only contain one function" name="Module Function validation.Script Get-OpenShellMenu.ps1 should only contain one function" time="0.2893" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenWebStart.ps1 should only contain one function" name="Module Function validation.Script Get-OpenWebStart.ps1 should only contain one function" time="0.283" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaBrowser.ps1 should only contain one function" name="Module Function validation.Script Get-OperaBrowser.ps1 should only contain one function" time="0.3935" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaCryptoBrowser.ps1 should only contain one function" name="Module Function validation.Script Get-OperaCryptoBrowser.ps1 should only contain one function" time="0.3719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaGXBrowser.ps1 should only contain one function" name="Module Function validation.Script Get-OperaGXBrowser.ps1 should only contain one function" time="0.373" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleJava8.ps1 should only contain one function" name="Module Function validation.Script Get-OracleJava8.ps1 should only contain one function" time="0.2932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleVirtualBox.ps1 should only contain one function" name="Module Function validation.Script Get-OracleVirtualBox.ps1 should only contain one function" time="0.2804" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNet.ps1 should only contain one function" name="Module Function validation.Script Get-PaintDotNet.ps1 should only contain one function" time="0.2584" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNetOfflineInstaller.ps1 should only contain one function" name="Module Function validation.Script Get-PaintDotNetOfflineInstaller.ps1 should only contain one function" time="0.257" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Pandoc.ps1 should only contain one function" name="Module Function validation.Script Get-Pandoc.ps1 should only contain one function" time="0.2645" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PDFForgePDFCreator.ps1 should only contain one function" name="Module Function validation.Script Get-PDFForgePDFCreator.ps1 should only contain one function" time="0.2629" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PeaZipPeaZip.ps1 should only contain one function" name="Module Function validation.Script Get-PeaZipPeaZip.ps1 should only contain one function" time="0.2563" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PiriformCCleanerFree.ps1 should only contain one function" name="Module Function validation.Script Get-PiriformCCleanerFree.ps1 should only contain one function" time="0.2902" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Postman.ps1 should only contain one function" name="Module Function validation.Script Get-Postman.ps1 should only contain one function" time="0.2592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Praat.ps1 should only contain one function" name="Module Function validation.Script Get-Praat.ps1 should only contain one function" time="0.26" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInfraClient.ps1 should only contain one function" name="Module Function validation.Script Get-ProgressChefInfraClient.ps1 should only contain one function" time="0.3083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInSpec.ps1 should only contain one function" name="Module Function validation.Script Get-ProgressChefInSpec.ps1 should only contain one function" time="0.305" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefWorkstation.ps1 should only contain one function" name="Module Function validation.Script Get-ProgressChefWorkstation.ps1 should only contain one function" time="0.3099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProjectLibre.ps1 should only contain one function" name="Module Function validation.Script Get-ProjectLibre.ps1 should only contain one function" time="0.2596" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Protege.ps1 should only contain one function" name="Module Function validation.Script Get-Protege.ps1 should only contain one function" time="0.2581" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSAppDeployToolkit.ps1 should only contain one function" name="Module Function validation.Script Get-PSAppDeployToolkit.ps1 should only contain one function" time="0.2601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSFPython.ps1 should only contain one function" name="Module Function validation.Script Get-PSFPython.ps1 should only contain one function" time="0.286" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PuTTY.ps1 should only contain one function" name="Module Function validation.Script Get-PuTTY.ps1 should only contain one function" time="0.2965" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RCoreTeamRforWindows.ps1 should only contain one function" name="Module Function validation.Script Get-RCoreTeamRforWindows.ps1 should only contain one function" time="0.299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RDAnalyzer.ps1 should only contain one function" name="Module Function validation.Script Get-RDAnalyzer.ps1 should only contain one function" time="0.2839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RingCentral.ps1 should only contain one function" name="Module Function validation.Script Get-RingCentral.ps1 should only contain one function" time="0.288" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RizonesoftNotepad3.ps1 should only contain one function" name="Module Function validation.Script Get-RizonesoftNotepad3.ps1 should only contain one function" time="0.2762" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RStudio.ps1 should only contain one function" name="Module Function validation.Script Get-RStudio.ps1 should only contain one function" time="0.2816" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafeExamBrowser.ps1 should only contain one function" name="Module Function validation.Script Get-SafeExamBrowser.ps1 should only contain one function" time="0.297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafingPortmaster.ps1 should only contain one function" name="Module Function validation.Script Get-SafingPortmaster.ps1 should only contain one function" time="0.2739" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SAGAGIS.ps1 should only contain one function" name="Module Function validation.Script Get-SAGAGIS.ps1 should only contain one function" time="0.2844" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScooterBeyondCompare.ps1 should only contain one function" name="Module Function validation.Script Get-ScooterBeyondCompare.ps1 should only contain one function" time="0.2894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Scratch.ps1 should only contain one function" name="Module Function validation.Script Get-Scratch.ps1 should only contain one function" time="0.3037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScreenToGif.ps1 should only contain one function" name="Module Function validation.Script Get-ScreenToGif.ps1 should only contain one function" time="0.2879" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ShareX.ps1 should only contain one function" name="Module Function validation.Script Get-ShareX.ps1 should only contain one function" time="0.2833" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SignalDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-SignalDesktop.ps1 should only contain one function" time="0.281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Slack.ps1 should only contain one function" name="Module Function validation.Script Get-Slack.ps1 should only contain one function" time="0.3238" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SmartBearSoapUI.ps1 should only contain one function" name="Module Function validation.Script Get-SmartBearSoapUI.ps1 should only contain one function" time="0.2734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SoberLemurPDFSamBasic.ps1 should only contain one function" name="Module Function validation.Script Get-SoberLemurPDFSamBasic.ps1 should only contain one function" time="0.2653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should only contain one function" name="Module Function validation.Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should only contain one function" time="0.2763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-StefansToolsgregpWin.ps1 should only contain one function" name="Module Function validation.Script Get-StefansToolsgregpWin.ps1 should only contain one function" time="0.2661" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SumatraPDFReader.ps1 should only contain one function" name="Module Function validation.Script Get-SumatraPDFReader.ps1 should only contain one function" time="0.307" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-TableauDesktop.ps1 should only contain one function" time="0.314" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauPrep.ps1 should only contain one function" name="Module Function validation.Script Get-TableauPrep.ps1 should only contain one function" time="0.3132" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauReader.ps1 should only contain one function" name="Module Function validation.Script Get-TableauReader.ps1 should only contain one function" time="0.2876" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeamViewer.ps1 should only contain one function" name="Module Function validation.Script Get-TeamViewer.ps1 should only contain one function" time="0.309" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithCamtasia.ps1 should only contain one function" name="Module Function validation.Script Get-TechSmithCamtasia.ps1 should only contain one function" time="0.3019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithSnagit.ps1 should only contain one function" name="Module Function validation.Script Get-TechSmithSnagit.ps1 should only contain one function" time="0.3113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelegramDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-TelegramDesktop.ps1 should only contain one function" time="0.3107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerClassic.ps1 should only contain one function" name="Module Function validation.Script Get-TelerikFiddlerClassic.ps1 should only contain one function" time="0.2887" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerEverywhere.ps1 should only contain one function" name="Module Function validation.Script Get-TelerikFiddlerEverywhere.ps1 should only contain one function" time="0.2946" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Terminals.ps1 should only contain one function" name="Module Function validation.Script Get-Terminals.ps1 should only contain one function" time="0.2984" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeXstudio.ps1 should only contain one function" name="Module Function validation.Script Get-TeXstudio.ps1 should only contain one function" time="0.3006" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TogglDesktop.ps1 should only contain one function" name="Module Function validation.Script Get-TogglDesktop.ps1 should only contain one function" time="0.2806" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TorProjectTorBrowser.ps1 should only contain one function" name="Module Function validation.Script Get-TorProjectTorBrowser.ps1 should only contain one function" time="0.2815" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Tower.ps1 should only contain one function" name="Module Function validation.Script Get-Tower.ps1 should only contain one function" time="0.288" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should only contain one function" name="Module Function validation.Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should only contain one function" time="0.3601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-USBPcap.ps1 should only contain one function" name="Module Function validation.Script Get-USBPcap.ps1 should only contain one function" time="0.2679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VastLimitsUberAgent.ps1 should only contain one function" name="Module Function validation.Script Get-VastLimitsUberAgent.ps1 should only contain one function" time="0.2818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VeraCrypt.ps1 should only contain one function" name="Module Function validation.Script Get-VeraCrypt.ps1 should only contain one function" time="0.2691" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VercelHyper.ps1 should only contain one function" name="Module Function validation.Script Get-VercelHyper.ps1 should only contain one function" time="0.2671" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VideoLanVlcPlayer.ps1 should only contain one function" name="Module Function validation.Script Get-VideoLanVlcPlayer.ps1 should only contain one function" time="0.2728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VisualCppRedistAIO.ps1 should only contain one function" name="Module Function validation.Script Get-VisualCppRedistAIO.ps1 should only contain one function" time="0.2844" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMPlexWorkstation.ps1 should only contain one function" name="Module Function validation.Script Get-VMPlexWorkstation.ps1 should only contain one function" time="0.2902" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClient.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareHorizonClient.ps1 should only contain one function" time="0.2658" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClientAlt.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareHorizonClientAlt.ps1 should only contain one function" time="0.4108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareOSOptimizationTool.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareOSOptimizationTool.ps1 should only contain one function" time="0.4148" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareTools.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareTools.ps1 should only contain one function" time="0.2728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPlayer.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareWorkstationPlayer.ps1 should only contain one function" time="0.4064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPro.ps1 should only contain one function" name="Module Function validation.Script Get-VMwareWorkstationPro.ps1 should only contain one function" time="0.407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-voidtoolsEverything.ps1 should only contain one function" name="Module Function validation.Script Get-voidtoolsEverything.ps1 should only contain one function" time="0.3095" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Win32OpenSSH.ps1 should only contain one function" name="Module Function validation.Script Get-Win32OpenSSH.ps1 should only contain one function" time="0.284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinMerge.ps1 should only contain one function" name="Module Function validation.Script Get-WinMerge.ps1 should only contain one function" time="0.2702" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinSCP.ps1 should only contain one function" name="Module Function validation.Script Get-WinSCP.ps1 should only contain one function" time="0.2763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Wireshark.ps1 should only contain one function" name="Module Function validation.Script Get-Wireshark.ps1 should only contain one function" time="0.288" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WixToolset.ps1 should only contain one function" name="Module Function validation.Script Get-WixToolset.ps1 should only contain one function" time="0.2778" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnConvert.ps1 should only contain one function" name="Module Function validation.Script Get-XnSoftXnConvert.ps1 should only contain one function" time="0.3019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnViewMP.ps1 should only contain one function" name="Module Function validation.Script Get-XnSoftXnViewMP.ps1 should only contain one function" time="0.2916" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-YubicoAuthenticator.ps1 should only contain one function" name="Module Function validation.Script Get-YubicoAuthenticator.ps1 should only contain one function" time="0.2704" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zoom.ps1 should only contain one function" name="Module Function validation.Script Get-Zoom.ps1 should only contain one function" time="0.2909" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ZorgmailVeiligVerzendenAddin.ps1 should only contain one function" name="Module Function validation.Script Get-ZorgmailVeiligVerzendenAddin.ps1 should only contain one function" time="0.3881" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zotero.ps1 should only contain one function" name="Module Function validation.Script Get-Zotero.ps1 should only contain one function" time="0.2663" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertFrom-IniFile.ps1 should only contain one function" name="Module Function validation.Script ConvertFrom-IniFile.ps1 should only contain one function" time="0.3252" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-DateTime.ps1 should only contain one function" name="Module Function validation.Script ConvertTo-DateTime.ps1 should only contain one function" time="0.249" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-Hashtable.ps1 should only contain one function" name="Module Function validation.Script ConvertTo-Hashtable.ps1 should only contain one function" time="0.243" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Expand-GzipArchive.ps1 should only contain one function" name="Module Function validation.Script Expand-GzipArchive.ps1 should only contain one function" time="0.3306" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Architecture.ps1 should only contain one function" name="Module Function validation.Script Get-Architecture.ps1 should only contain one function" time="0.2611" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileType.ps1 should only contain one function" name="Module Function validation.Script Get-FileType.ps1 should only contain one function" time="0.265" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FunctionResource.ps1 should only contain one function" name="Module Function validation.Script Get-FunctionResource.ps1 should only contain one function" time="0.24" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRepoRelease.ps1 should only contain one function" name="Module Function validation.Script Get-GitHubRepoRelease.ps1 should only contain one function" time="0.3063" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ModuleResource.ps1 should only contain one function" name="Module Function validation.Script Get-ModuleResource.ps1 should only contain one function" time="0.4259" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Platform.ps1 should only contain one function" name="Module Function validation.Script Get-Platform.ps1 should only contain one function" time="0.3291" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SourceForgeRepoRelease.ps1 should only contain one function" name="Module Function validation.Script Get-SourceForgeRepoRelease.ps1 should only contain one function" time="0.2905" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-RestMethodWrapper.ps1 should only contain one function" name="Module Function validation.Script Invoke-RestMethodWrapper.ps1 should only contain one function" time="0.3058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-SystemNetRequest.ps1 should only contain one function" name="Module Function validation.Script Invoke-SystemNetRequest.ps1 should only contain one function" time="0.5" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-WebRequestWrapper.ps1 should only contain one function" name="Module Function validation.Script Invoke-WebRequestWrapper.ps1 should only contain one function" time="0.3236" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenPath.ps1 should only contain one function" name="Module Function validation.Script New-EvergreenPath.ps1 should only contain one function" time="0.2577" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Remove-ProxyEnv.ps1 should only contain one function" name="Module Function validation.Script Remove-ProxyEnv.ps1 should only contain one function" time="0.2894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-DnsNameWrapper.ps1 should only contain one function" name="Module Function validation.Script Resolve-DnsNameWrapper.ps1 should only contain one function" time="0.2443" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-InvokeWebRequest.ps1 should only contain one function" name="Module Function validation.Script Resolve-InvokeWebRequest.ps1 should only contain one function" time="0.2789" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-SystemNetWebRequest.ps1 should only contain one function" name="Module Function validation.Script Resolve-SystemNetWebRequest.ps1 should only contain one function" time="0.4181" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-File.ps1 should only contain one function" name="Module Function validation.Script Save-File.ps1 should only contain one function" time="0.2528" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Set-ProxyEnv.ps1 should only contain one function" name="Module Function validation.Script Set-ProxyEnv.ps1 should only contain one function" time="0.3669" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-ProxyEnv.ps1 should only contain one function" name="Module Function validation.Script Test-ProxyEnv.ps1 should only contain one function" time="0.3112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-PSCore.ps1 should only contain one function" name="Module Function validation.Script Test-PSCore.ps1 should only contain one function" time="0.2614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Export-EvergreenApp.ps1 should only contain one function" time="0.2913" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenManifest.ps1 should only contain one function" name="Module Function validation.Script Export-EvergreenManifest.ps1 should only contain one function" time="0.3697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Find-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Find-EvergreenApp.ps1 should only contain one function" time="0.2894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Get-EvergreenApp.ps1 should only contain one function" time="0.3588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenLibrary.ps1 should only contain one function" name="Module Function validation.Script Get-EvergreenLibrary.ps1 should only contain one function" time="0.3484" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Invoke-EvergreenApp.ps1 should only contain one function" time="0.2902" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenLibraryUpdate.ps1 should only contain one function" name="Module Function validation.Script Invoke-EvergreenLibraryUpdate.ps1 should only contain one function" time="0.4193" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenLibrary.ps1 should only contain one function" name="Module Function validation.Script New-EvergreenLibrary.ps1 should only contain one function" time="0.3118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Save-EvergreenApp.ps1 should only contain one function" time="0.3198" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-EvergreenApp.ps1 should only contain one function" name="Module Function validation.Script Test-EvergreenApp.ps1 should only contain one function" time="0.3241" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Module Function validation.Script &lt;file.Name&gt; should match function name" executed="True" result="Success" success="True" time="82.8357" asserts="0" description="Script &lt;file.Name&gt; should match function name">
                <results>
                  <test-case description="Script Get-1Password.ps1 should match function name" name="Module Function validation.Script Get-1Password.ps1 should match function name" time="0.3308" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-1Password7.ps1 should match function name" name="Module Function validation.Script Get-1Password7.ps1 should match function name" time="0.3116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7zip.ps1 should match function name" name="Module Function validation.Script Get-7zip.ps1 should match function name" time="0.3179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-7ZipZS.ps1 should match function name" name="Module Function validation.Script Get-7ZipZS.ps1 should match function name" time="0.3112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobat.ps1 should match function name" name="Module Function validation.Script Get-AdobeAcrobat.ps1 should match function name" time="0.303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatDC.ps1 should match function name" name="Module Function validation.Script Get-AdobeAcrobatDC.ps1 should match function name" time="0.2811" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatProStdDC.ps1 should match function name" name="Module Function validation.Script Get-AdobeAcrobatProStdDC.ps1 should match function name" time="0.2805" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeAcrobatReaderDC.ps1 should match function name" name="Module Function validation.Script Get-AdobeAcrobatReaderDC.ps1 should match function name" time="0.2781" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeBrackets.ps1 should match function name" name="Module Function validation.Script Get-AdobeBrackets.ps1 should match function name" time="0.286" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdobeConnect.ps1 should match function name" name="Module Function validation.Script Get-AdobeConnect.ps1 should match function name" time="0.304" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin11.ps1 should match function name" name="Module Function validation.Script Get-AdoptiumTemurin11.ps1 should match function name" time="0.2894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin16.ps1 should match function name" name="Module Function validation.Script Get-AdoptiumTemurin16.ps1 should match function name" time="0.291" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin17.ps1 should match function name" name="Module Function validation.Script Get-AdoptiumTemurin17.ps1 should match function name" time="0.3014" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin18.ps1 should match function name" name="Module Function validation.Script Get-AdoptiumTemurin18.ps1 should match function name" time="0.2863" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptiumTemurin8.ps1 should match function name" name="Module Function validation.Script Get-AdoptiumTemurin8.ps1 should match function name" time="0.286" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK11.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDK11.ps1 should match function name" time="0.2794" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK16.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDK16.ps1 should match function name" time="0.2709" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDK8.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDK8.ps1 should match function name" time="0.2717" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDKIcedTeaWeb.ps1 should match function name" time="0.2853" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru11.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDKSemuru11.ps1 should match function name" time="0.2932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru17.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDKSemuru17.ps1 should match function name" time="0.2986" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru18.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDKSemuru18.ps1 should match function name" time="0.2952" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AdoptOpenJDKSemuru8.ps1 should match function name" name="Module Function validation.Script Get-AdoptOpenJDKSemuru8.ps1 should match function name" time="0.3696" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AirtameApp.ps1 should match function name" name="Module Function validation.Script Get-AirtameApp.ps1 should match function name" time="0.2976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AkeoRufus.ps1 should match function name" name="Module Function validation.Script Get-AkeoRufus.ps1 should match function name" time="0.3138" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AmazonCorretto.ps1 should match function name" name="Module Function validation.Script Get-AmazonCorretto.ps1 should match function name" time="0.2898" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anaconda.ps1 should match function name" name="Module Function validation.Script Get-Anaconda.ps1 should match function name" time="0.3113" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Anki.ps1 should match function name" name="Module Function validation.Script Get-Anki.ps1 should match function name" time="0.2822" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AppVentiX.ps1 should match function name" name="Module Function validation.Script Get-AppVentiX.ps1 should match function name" time="0.3289" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ArtifexGhostscript.ps1 should match function name" name="Module Function validation.Script Get-ArtifexGhostscript.ps1 should match function name" time="0.2976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AtlassianSourcetree.ps1 should match function name" name="Module Function validation.Script Get-AtlassianSourcetree.ps1 should match function name" time="0.2929" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Audacity.ps1 should match function name" name="Module Function validation.Script Get-Audacity.ps1 should match function name" time="0.3033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AutoDarkMode.ps1 should match function name" name="Module Function validation.Script Get-AutoDarkMode.ps1 should match function name" time="0.3084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSCLI.ps1 should match function name" name="Module Function validation.Script Get-AWSCLI.ps1 should match function name" time="0.3004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-AWSSAMCLI.ps1 should match function name" name="Module Function validation.Script Get-AWSSAMCLI.ps1 should match function name" time="0.2696" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BeekeeperStudio.ps1 should match function name" name="Module Function validation.Script Get-BeekeeperStudio.ps1 should match function name" time="0.2625" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BISF.ps1 should match function name" name="Module Function validation.Script Get-BISF.ps1 should match function name" time="0.2619" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BitwardenDesktop.ps1 should match function name" name="Module Function validation.Script Get-BitwardenDesktop.ps1 should match function name" time="0.2663" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlenderLauncher.ps1 should match function name" name="Module Function validation.Script Get-BlenderLauncher.ps1 should match function name" time="0.2635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-BlueJ.ps1 should match function name" name="Module Function validation.Script Get-BlueJ.ps1 should match function name" time="0.2659" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CendioThinLinc.ps1 should match function name" name="Module Function validation.Script Get-CendioThinLinc.ps1 should match function name" time="0.2671" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ChromiumChromeDriver.ps1 should match function name" name="Module Function validation.Script Get-ChromiumChromeDriver.ps1 should match function name" time="0.2651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixVMTools.ps1 should match function name" name="Module Function validation.Script Get-CitrixVMTools.ps1 should match function name" time="0.2733" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CitrixWorkspaceApp.ps1 should match function name" name="Module Function validation.Script Get-CitrixWorkspaceApp.ps1 should match function name" time="0.2696" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-CodelerityApacheNetBeans.ps1 should match function name" name="Module Function validation.Script Get-CodelerityApacheNetBeans.ps1 should match function name" time="0.2862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ConnectionExperienceIndicator.ps1 should match function name" name="Module Function validation.Script Get-ConnectionExperienceIndicator.ps1 should match function name" time="0.2923" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpAgent.ps1 should match function name" name="Module Function validation.Script Get-ControlUpAgent.ps1 should match function name" time="0.2921" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ControlUpConsole.ps1 should match function name" name="Module Function validation.Script Get-ControlUpConsole.ps1 should match function name" time="0.2701" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Cyberduck.ps1 should match function name" name="Module Function validation.Script Get-Cyberduck.ps1 should match function name" time="0.3147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dbeaver.ps1 should match function name" name="Module Function validation.Script Get-dbeaver.ps1 should match function name" time="0.2941" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DebaucheeBarrier.ps1 should match function name" name="Module Function validation.Script Get-DebaucheeBarrier.ps1 should match function name" time="0.2846" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-deviceTRUST.ps1 should match function name" name="Module Function validation.Script Get-deviceTRUST.ps1 should match function name" time="0.282" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DevToys.ps1 should match function name" name="Module Function validation.Script Get-DevToys.ps1 should match function name" time="0.3077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-diagrams.net.ps1 should match function name" name="Module Function validation.Script Get-diagrams.net.ps1 should match function name" time="0.2623" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-dnGrep.ps1 should match function name" name="Module Function validation.Script Get-dnGrep.ps1 should match function name" time="0.2599" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DockerDesktop.ps1 should match function name" name="Module Function validation.Script Get-DockerDesktop.ps1 should match function name" time="0.3755" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-DoubleCommander.ps1 should match function name" name="Module Function validation.Script Get-DoubleCommander.ps1 should match function name" time="0.2761" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EgnyteDesktopApp.ps1 should match function name" name="Module Function validation.Script Get-EgnyteDesktopApp.ps1 should match function name" time="0.2992" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointAntivirus.ps1 should match function name" name="Module Function validation.Script Get-ESETEndpointAntivirus.ps1 should match function name" time="0.2978" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETEndpointSecurity.ps1 should match function name" name="Module Function validation.Script Get-ESETEndpointSecurity.ps1 should match function name" time="0.3044" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETFullDiskEncryption.ps1 should match function name" name="Module Function validation.Script Get-ESETFullDiskEncryption.ps1 should match function name" time="0.2959" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETInspectConnector.ps1 should match function name" name="Module Function validation.Script Get-ESETInspectConnector.ps1 should match function name" time="0.3258" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETPROTECTServer.ps1 should match function name" name="Module Function validation.Script Get-ESETPROTECTServer.ps1 should match function name" time="0.2984" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETSecureAuthentication.ps1 should match function name" name="Module Function validation.Script Get-ESETSecureAuthentication.ps1 should match function name" time="0.2897" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ESETServerSecurity.ps1 should match function name" name="Module Function validation.Script Get-ESETServerSecurity.ps1 should match function name" time="0.2879" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileZilla.ps1 should match function name" name="Module Function validation.Script Get-FileZilla.ps1 should match function name" time="0.2879" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Fork.ps1 should match function name" name="Module Function validation.Script Get-Fork.ps1 should match function name" time="0.2964" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitPDFEditor.ps1 should match function name" name="Module Function validation.Script Get-FoxitPDFEditor.ps1 should match function name" time="0.2923" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FoxitReader.ps1 should match function name" name="Module Function validation.Script Get-FoxitReader.ps1 should match function name" time="0.2923" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificFusion.ps1 should match function name" name="Module Function validation.Script Get-FreedomScientificFusion.ps1 should match function name" time="0.3154" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificJAWS.ps1 should match function name" name="Module Function validation.Script Get-FreedomScientificJAWS.ps1 should match function name" time="0.2992" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreedomScientificZoomText.ps1 should match function name" name="Module Function validation.Script Get-FreedomScientificZoomText.ps1 should match function name" time="0.2925" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FreeFem.ps1 should match function name" name="Module Function validation.Script Get-FreeFem.ps1 should match function name" time="0.2944" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GeekSoftwarePDF24Creator.ps1 should match function name" name="Module Function validation.Script Get-GeekSoftwarePDF24Creator.ps1 should match function name" time="0.293" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gephi.ps1 should match function name" name="Module Function validation.Script Get-Gephi.ps1 should match function name" time="0.2788" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GhislerTotalCommander.ps1 should match function name" name="Module Function validation.Script Get-GhislerTotalCommander.ps1 should match function name" time="0.2968" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gimp.ps1 should match function name" name="Module Function validation.Script Get-Gimp.ps1 should match function name" time="0.292" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitExtensions.ps1 should match function name" name="Module Function validation.Script Get-GitExtensions.ps1 should match function name" time="0.303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitForWindows.ps1 should match function name" name="Module Function validation.Script Get-GitForWindows.ps1 should match function name" time="0.2828" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubAtom.ps1 should match function name" name="Module Function validation.Script Get-GitHubAtom.ps1 should match function name" time="0.2907" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRelease.ps1 should match function name" name="Module Function validation.Script Get-GitHubRelease.ps1 should match function name" time="0.2979" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GoogleChrome.ps1 should match function name" name="Module Function validation.Script Get-GoogleChrome.ps1 should match function name" time="0.348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Gpg4win.ps1 should match function name" name="Module Function validation.Script Get-Gpg4win.ps1 should match function name" time="0.3675" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Greenshot.ps1 should match function name" name="Module Function validation.Script Get-Greenshot.ps1 should match function name" time="0.2975" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-gretl.ps1 should match function name" name="Module Function validation.Script Get-gretl.ps1 should match function name" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Handbrake.ps1 should match function name" name="Module Function validation.Script Get-Handbrake.ps1 should match function name" time="0.3062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpBoundary.ps1 should match function name" name="Module Function validation.Script Get-HashicorpBoundary.ps1 should match function name" time="0.2899" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpConsul.ps1 should match function name" name="Module Function validation.Script Get-HashicorpConsul.ps1 should match function name" time="0.284" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpNomad.ps1 should match function name" name="Module Function validation.Script Get-HashicorpNomad.ps1 should match function name" time="0.2871" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpPacker.ps1 should match function name" name="Module Function validation.Script Get-HashicorpPacker.ps1 should match function name" time="0.2829" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpTerraform.ps1 should match function name" name="Module Function validation.Script Get-HashicorpTerraform.ps1 should match function name" time="0.2873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpVault.ps1 should match function name" name="Module Function validation.Script Get-HashicorpVault.ps1 should match function name" time="0.2929" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-HashicorpWaypoint.ps1 should match function name" name="Module Function validation.Script Get-HashicorpWaypoint.ps1 should match function name" time="0.3016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageGlass.ps1 should match function name" name="Module Function validation.Script Get-ImageGlass.ps1 should match function name" time="0.2857" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ImageMagickStudioImageMagick.ps1 should match function name" name="Module Function validation.Script Get-ImageMagickStudioImageMagick.ps1 should match function name" time="0.287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeFree.ps1 should match function name" name="Module Function validation.Script Get-JamTreeSizeFree.ps1 should match function name" time="0.2826" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JamTreeSizeProfessional.ps1 should match function name" name="Module Function validation.Script Get-JamTreeSizeProfessional.ps1 should match function name" time="0.3128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JASP.ps1 should match function name" name="Module Function validation.Script Get-JASP.ps1 should match function name" time="0.3152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JeremyMainGPUProfiler.ps1 should match function name" name="Module Function validation.Script Get-JeremyMainGPUProfiler.ps1 should match function name" time="0.3015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsIntelliJIDEA.ps1 should match function name" name="Module Function validation.Script Get-JetBrainsIntelliJIDEA.ps1 should match function name" time="0.3254" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-JetBrainsPyCharm.ps1 should match function name" name="Module Function validation.Script Get-JetBrainsPyCharm.ps1 should match function name" time="0.3267" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jq.ps1 should match function name" name="Module Function validation.Script Get-jq.ps1 should match function name" time="0.2904" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-jrsoftwareInnoSetup.ps1 should match function name" name="Module Function validation.Script Get-jrsoftwareInnoSetup.ps1 should match function name" time="0.2859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KarakunOpenWebStart.ps1 should match function name" name="Module Function validation.Script Get-KarakunOpenWebStart.ps1 should match function name" time="0.2859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KDiff3.ps1 should match function name" name="Module Function validation.Script Get-KDiff3.ps1 should match function name" time="0.2906" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePass.ps1 should match function name" name="Module Function validation.Script Get-KeePass.ps1 should match function name" time="0.2675" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeePassXCTeamKeePassXC.ps1 should match function name" name="Module Function validation.Script Get-KeePassXCTeamKeePassXC.ps1 should match function name" time="0.2748" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-KeeWeb.ps1 should match function name" name="Module Function validation.Script Get-KeeWeb.ps1 should match function name" time="0.2767" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToMeeting.ps1 should match function name" name="Module Function validation.Script Get-LogMeInGoToMeeting.ps1 should match function name" time="0.2902" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-LogMeInGoToOpener.ps1 should match function name" name="Module Function validation.Script Get-LogMeInGoToOpener.ps1 should match function name" time="0.2863" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MasterPackager.ps1 should match function name" name="Module Function validation.Script Get-MasterPackager.ps1 should match function name" time="0.294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MattermostDesktop.ps1 should match function name" name="Module Function validation.Script Get-MattermostDesktop.ps1 should match function name" time="0.5068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Maximus5ConEmu.ps1 should match function name" name="Module Function validation.Script Get-Maximus5ConEmu.ps1 should match function name" time="0.2903" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-McNeelRhino.ps1 should match function name" name="Module Function validation.Script Get-McNeelRhino.ps1 should match function name" time="0.2882" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MendeleyDesktop.ps1 should match function name" name="Module Function validation.Script Get-MendeleyDesktop.ps1 should match function name" time="0.274" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MestrelabMnova.ps1 should match function name" name="Module Function validation.Script Get-MestrelabMnova.ps1 should match function name" time="0.2771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft.NET.ps1 should match function name" name="Module Function validation.Script Get-Microsoft.NET.ps1 should match function name" time="0.2713" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Microsoft365Apps.ps1 should match function name" name="Module Function validation.Script Get-Microsoft365Apps.ps1 should match function name" time="0.3238" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureDataStudio.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftAzureDataStudio.ps1 should match function name" time="0.2674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftAzureFunctionsCoreTools.ps1 should match function name" time="0.2825" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureStorageExplorer.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftAzureStorageExplorer.ps1 should match function name" time="0.2699" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftAzureWindowsVMAgent.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftAzureWindowsVMAgent.ps1 should match function name" time="0.2771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBicep.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftBicep.ps1 should match function name" time="0.2769" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftBotFrameworkEmulator.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftBotFrameworkEmulator.ps1 should match function name" time="0.2693" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdge.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftEdge.ps1 should match function name" time="0.3085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeDriver.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftEdgeDriver.ps1 should match function name" time="0.296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftEdgeWebView2Runtime.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftEdgeWebView2Runtime.ps1 should match function name" time="0.2906" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftFSLogixApps.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftFSLogixApps.ps1 should match function name" time="0.3258" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOneDrive.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftOneDrive.ps1 should match function name" time="0.291" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftOutlook.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftOutlook.ps1 should match function name" time="0.2748" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerShell.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftPowerShell.ps1 should match function name" time="0.2688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftPowerToys.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftPowerToys.ps1 should match function name" time="0.2738" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftSsms.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftSsms.ps1 should match function name" time="0.2712" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTeams.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftTeams.ps1 should match function name" time="0.2736" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftTerminal.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftTerminal.ps1 should match function name" time="0.2679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudio.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftVisualStudio.ps1 should match function name" time="0.2869" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftVisualStudioCode.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftVisualStudioCode.ps1 should match function name" time="0.2839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWindowsPackageManagerClient.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWindowsPackageManagerClient.ps1 should match function name" time="0.281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdBootloader.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWvdBootloader.ps1 should match function name" time="0.2872" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdInfraAgent.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWvdInfraAgent.ps1 should match function name" time="0.3465" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdMultimediaRedirection.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWvdMultimediaRedirection.ps1 should match function name" time="0.3502" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRemoteDesktop.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWvdRemoteDesktop.ps1 should match function name" time="0.4056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MicrosoftWvdRtcService.ps1 should match function name" name="Module Function validation.Script Get-MicrosoftWvdRtcService.ps1 should match function name" time="0.2905" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Miniconda.ps1 should match function name" name="Module Function validation.Script Get-Miniconda.ps1 should match function name" time="0.2937" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Minitab.ps1 should match function name" name="Module Function validation.Script Get-Minitab.ps1 should match function name" time="0.3053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MiniZincIDE.ps1 should match function name" name="Module Function validation.Script Get-MiniZincIDE.ps1 should match function name" time="0.2888" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MirantisLens.ps1 should match function name" name="Module Function validation.Script Get-MirantisLens.ps1 should match function name" time="0.4631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaFirefox.ps1 should match function name" name="Module Function validation.Script Get-MozillaFirefox.ps1 should match function name" time="0.323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaGeckoDriver.ps1 should match function name" name="Module Function validation.Script Get-MozillaGeckoDriver.ps1 should match function name" time="0.303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MozillaThunderbird.ps1 should match function name" name="Module Function validation.Script Get-MozillaThunderbird.ps1 should match function name" time="0.3058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-mRemoteNG.ps1 should match function name" name="Module Function validation.Script Get-mRemoteNG.ps1 should match function name" time="0.3045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-MuseScore.ps1 should match function name" name="Module Function validation.Script Get-MuseScore.ps1 should match function name" time="0.271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Naps2.ps1 should match function name" name="Module Function validation.Script Get-Naps2.ps1 should match function name" time="0.312" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NETworkManager.ps1 should match function name" name="Module Function validation.Script Get-NETworkManager.ps1 should match function name" time="0.2813" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NevcairielLAVFilters.ps1 should match function name" name="Module Function validation.Script Get-NevcairielLAVFilters.ps1 should match function name" time="0.273" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Nomacs.ps1 should match function name" name="Module Function validation.Script Get-Nomacs.ps1 should match function name" time="0.2899" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Notable.ps1 should match function name" name="Module Function validation.Script Get-Notable.ps1 should match function name" time="0.2617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-NotepadPlusPlus.ps1 should match function name" name="Module Function validation.Script Get-NotepadPlusPlus.ps1 should match function name" time="0.2701" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Obsidian.ps1 should match function name" name="Module Function validation.Script Get-Obsidian.ps1 should match function name" time="0.3042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OBSStudio.ps1 should match function name" name="Module Function validation.Script Get-OBSStudio.ps1 should match function name" time="0.2936" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusDeployServer.ps1 should match function name" name="Module Function validation.Script Get-OctopusDeployServer.ps1 should match function name" time="0.3025" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OctopusTentacle.ps1 should match function name" name="Module Function validation.Script Get-OctopusTentacle.ps1 should match function name" time="0.3197" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OnlyOfficeDesktopEditors.ps1 should match function name" name="Module Function validation.Script Get-OnlyOfficeDesktopEditors.ps1 should match function name" time="0.275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenJDK.ps1 should match function name" name="Module Function validation.Script Get-OpenJDK.ps1 should match function name" time="0.29" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenLens.ps1 should match function name" name="Module Function validation.Script Get-OpenLens.ps1 should match function name" time="0.3101" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenShellMenu.ps1 should match function name" name="Module Function validation.Script Get-OpenShellMenu.ps1 should match function name" time="0.2778" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OpenWebStart.ps1 should match function name" name="Module Function validation.Script Get-OpenWebStart.ps1 should match function name" time="0.2639" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaBrowser.ps1 should match function name" name="Module Function validation.Script Get-OperaBrowser.ps1 should match function name" time="0.3634" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaCryptoBrowser.ps1 should match function name" name="Module Function validation.Script Get-OperaCryptoBrowser.ps1 should match function name" time="0.3683" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OperaGXBrowser.ps1 should match function name" name="Module Function validation.Script Get-OperaGXBrowser.ps1 should match function name" time="0.3682" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleJava8.ps1 should match function name" name="Module Function validation.Script Get-OracleJava8.ps1 should match function name" time="0.2696" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-OracleVirtualBox.ps1 should match function name" name="Module Function validation.Script Get-OracleVirtualBox.ps1 should match function name" time="0.2834" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNet.ps1 should match function name" name="Module Function validation.Script Get-PaintDotNet.ps1 should match function name" time="0.2652" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PaintDotNetOfflineInstaller.ps1 should match function name" name="Module Function validation.Script Get-PaintDotNetOfflineInstaller.ps1 should match function name" time="0.2626" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Pandoc.ps1 should match function name" name="Module Function validation.Script Get-Pandoc.ps1 should match function name" time="0.2658" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PDFForgePDFCreator.ps1 should match function name" name="Module Function validation.Script Get-PDFForgePDFCreator.ps1 should match function name" time="0.2949" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PeaZipPeaZip.ps1 should match function name" name="Module Function validation.Script Get-PeaZipPeaZip.ps1 should match function name" time="0.273" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PiriformCCleanerFree.ps1 should match function name" name="Module Function validation.Script Get-PiriformCCleanerFree.ps1 should match function name" time="0.2942" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Postman.ps1 should match function name" name="Module Function validation.Script Get-Postman.ps1 should match function name" time="0.2627" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Praat.ps1 should match function name" name="Module Function validation.Script Get-Praat.ps1 should match function name" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInfraClient.ps1 should match function name" name="Module Function validation.Script Get-ProgressChefInfraClient.ps1 should match function name" time="0.3335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefInSpec.ps1 should match function name" name="Module Function validation.Script Get-ProgressChefInSpec.ps1 should match function name" time="0.3411" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProgressChefWorkstation.ps1 should match function name" name="Module Function validation.Script Get-ProgressChefWorkstation.ps1 should match function name" time="0.3361" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ProjectLibre.ps1 should match function name" name="Module Function validation.Script Get-ProjectLibre.ps1 should match function name" time="0.2932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Protege.ps1 should match function name" name="Module Function validation.Script Get-Protege.ps1 should match function name" time="0.2611" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSAppDeployToolkit.ps1 should match function name" name="Module Function validation.Script Get-PSAppDeployToolkit.ps1 should match function name" time="0.259" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PSFPython.ps1 should match function name" name="Module Function validation.Script Get-PSFPython.ps1 should match function name" time="0.2609" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-PuTTY.ps1 should match function name" name="Module Function validation.Script Get-PuTTY.ps1 should match function name" time="0.2617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RCoreTeamRforWindows.ps1 should match function name" name="Module Function validation.Script Get-RCoreTeamRforWindows.ps1 should match function name" time="0.2743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RDAnalyzer.ps1 should match function name" name="Module Function validation.Script Get-RDAnalyzer.ps1 should match function name" time="0.2707" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RingCentral.ps1 should match function name" name="Module Function validation.Script Get-RingCentral.ps1 should match function name" time="0.2698" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RizonesoftNotepad3.ps1 should match function name" name="Module Function validation.Script Get-RizonesoftNotepad3.ps1 should match function name" time="0.2603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-RStudio.ps1 should match function name" name="Module Function validation.Script Get-RStudio.ps1 should match function name" time="0.2817" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafeExamBrowser.ps1 should match function name" name="Module Function validation.Script Get-SafeExamBrowser.ps1 should match function name" time="0.2728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SafingPortmaster.ps1 should match function name" name="Module Function validation.Script Get-SafingPortmaster.ps1 should match function name" time="0.274" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SAGAGIS.ps1 should match function name" name="Module Function validation.Script Get-SAGAGIS.ps1 should match function name" time="0.2736" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScooterBeyondCompare.ps1 should match function name" name="Module Function validation.Script Get-ScooterBeyondCompare.ps1 should match function name" time="0.2915" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Scratch.ps1 should match function name" name="Module Function validation.Script Get-Scratch.ps1 should match function name" time="0.2771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ScreenToGif.ps1 should match function name" name="Module Function validation.Script Get-ScreenToGif.ps1 should match function name" time="0.2686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ShareX.ps1 should match function name" name="Module Function validation.Script Get-ShareX.ps1 should match function name" time="0.2762" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SignalDesktop.ps1 should match function name" name="Module Function validation.Script Get-SignalDesktop.ps1 should match function name" time="0.2724" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Slack.ps1 should match function name" name="Module Function validation.Script Get-Slack.ps1 should match function name" time="0.2948" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SmartBearSoapUI.ps1 should match function name" name="Module Function validation.Script Get-SmartBearSoapUI.ps1 should match function name" time="0.2731" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SoberLemurPDFSamBasic.ps1 should match function name" name="Module Function validation.Script Get-SoberLemurPDFSamBasic.ps1 should match function name" time="0.269" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should match function name" name="Module Function validation.Script Get-stealthpuppyWindowsCustomisedDefaults.ps1 should match function name" time="0.2679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-StefansToolsgregpWin.ps1 should match function name" name="Module Function validation.Script Get-StefansToolsgregpWin.ps1 should match function name" time="0.2646" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SumatraPDFReader.ps1 should match function name" name="Module Function validation.Script Get-SumatraPDFReader.ps1 should match function name" time="0.2697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauDesktop.ps1 should match function name" name="Module Function validation.Script Get-TableauDesktop.ps1 should match function name" time="0.2797" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauPrep.ps1 should match function name" name="Module Function validation.Script Get-TableauPrep.ps1 should match function name" time="0.2773" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TableauReader.ps1 should match function name" name="Module Function validation.Script Get-TableauReader.ps1 should match function name" time="0.2617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeamViewer.ps1 should match function name" name="Module Function validation.Script Get-TeamViewer.ps1 should match function name" time="0.2614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithCamtasia.ps1 should match function name" name="Module Function validation.Script Get-TechSmithCamtasia.ps1 should match function name" time="0.2602" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TechSmithSnagit.ps1 should match function name" name="Module Function validation.Script Get-TechSmithSnagit.ps1 should match function name" time="0.2581" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelegramDesktop.ps1 should match function name" name="Module Function validation.Script Get-TelegramDesktop.ps1 should match function name" time="0.2637" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerClassic.ps1 should match function name" name="Module Function validation.Script Get-TelerikFiddlerClassic.ps1 should match function name" time="0.2659" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TelerikFiddlerEverywhere.ps1 should match function name" name="Module Function validation.Script Get-TelerikFiddlerEverywhere.ps1 should match function name" time="0.2615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Terminals.ps1 should match function name" name="Module Function validation.Script Get-Terminals.ps1 should match function name" time="0.2708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TeXstudio.ps1 should match function name" name="Module Function validation.Script Get-TeXstudio.ps1 should match function name" time="0.2788" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TogglDesktop.ps1 should match function name" name="Module Function validation.Script Get-TogglDesktop.ps1 should match function name" time="0.2625" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TorProjectTorBrowser.ps1 should match function name" name="Module Function validation.Script Get-TorProjectTorBrowser.ps1 should match function name" time="0.2597" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Tower.ps1 should match function name" name="Module Function validation.Script Get-Tower.ps1 should match function name" time="0.2752" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should match function name" name="Module Function validation.Script Get-TrackerSoftwarePDFXChangeEditor.ps1 should match function name" time="0.3114" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-USBPcap.ps1 should match function name" name="Module Function validation.Script Get-USBPcap.ps1 should match function name" time="0.2626" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VastLimitsUberAgent.ps1 should match function name" name="Module Function validation.Script Get-VastLimitsUberAgent.ps1 should match function name" time="0.2583" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VeraCrypt.ps1 should match function name" name="Module Function validation.Script Get-VeraCrypt.ps1 should match function name" time="0.2562" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VercelHyper.ps1 should match function name" name="Module Function validation.Script Get-VercelHyper.ps1 should match function name" time="0.2603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VideoLanVlcPlayer.ps1 should match function name" name="Module Function validation.Script Get-VideoLanVlcPlayer.ps1 should match function name" time="0.2616" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VisualCppRedistAIO.ps1 should match function name" name="Module Function validation.Script Get-VisualCppRedistAIO.ps1 should match function name" time="0.2602" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMPlexWorkstation.ps1 should match function name" name="Module Function validation.Script Get-VMPlexWorkstation.ps1 should match function name" time="0.2818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClient.ps1 should match function name" name="Module Function validation.Script Get-VMwareHorizonClient.ps1 should match function name" time="0.2826" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareHorizonClientAlt.ps1 should match function name" name="Module Function validation.Script Get-VMwareHorizonClientAlt.ps1 should match function name" time="0.4134" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareOSOptimizationTool.ps1 should match function name" name="Module Function validation.Script Get-VMwareOSOptimizationTool.ps1 should match function name" time="0.4203" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareTools.ps1 should match function name" name="Module Function validation.Script Get-VMwareTools.ps1 should match function name" time="0.2825" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPlayer.ps1 should match function name" name="Module Function validation.Script Get-VMwareWorkstationPlayer.ps1 should match function name" time="0.4056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-VMwareWorkstationPro.ps1 should match function name" name="Module Function validation.Script Get-VMwareWorkstationPro.ps1 should match function name" time="0.4107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-voidtoolsEverything.ps1 should match function name" name="Module Function validation.Script Get-voidtoolsEverything.ps1 should match function name" time="0.2614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Win32OpenSSH.ps1 should match function name" name="Module Function validation.Script Get-Win32OpenSSH.ps1 should match function name" time="0.2629" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinMerge.ps1 should match function name" name="Module Function validation.Script Get-WinMerge.ps1 should match function name" time="0.2635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WinSCP.ps1 should match function name" name="Module Function validation.Script Get-WinSCP.ps1 should match function name" time="0.2625" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Wireshark.ps1 should match function name" name="Module Function validation.Script Get-Wireshark.ps1 should match function name" time="0.2664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-WixToolset.ps1 should match function name" name="Module Function validation.Script Get-WixToolset.ps1 should match function name" time="0.292" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnConvert.ps1 should match function name" name="Module Function validation.Script Get-XnSoftXnConvert.ps1 should match function name" time="0.2988" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-XnSoftXnViewMP.ps1 should match function name" name="Module Function validation.Script Get-XnSoftXnViewMP.ps1 should match function name" time="0.2933" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-YubicoAuthenticator.ps1 should match function name" name="Module Function validation.Script Get-YubicoAuthenticator.ps1 should match function name" time="0.2901" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zoom.ps1 should match function name" name="Module Function validation.Script Get-Zoom.ps1 should match function name" time="0.3161" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ZorgmailVeiligVerzendenAddin.ps1 should match function name" name="Module Function validation.Script Get-ZorgmailVeiligVerzendenAddin.ps1 should match function name" time="0.4111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Zotero.ps1 should match function name" name="Module Function validation.Script Get-Zotero.ps1 should match function name" time="0.2881" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertFrom-IniFile.ps1 should match function name" name="Module Function validation.Script ConvertFrom-IniFile.ps1 should match function name" time="0.3435" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-DateTime.ps1 should match function name" name="Module Function validation.Script ConvertTo-DateTime.ps1 should match function name" time="0.2686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script ConvertTo-Hashtable.ps1 should match function name" name="Module Function validation.Script ConvertTo-Hashtable.ps1 should match function name" time="0.2676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Expand-GzipArchive.ps1 should match function name" name="Module Function validation.Script Expand-GzipArchive.ps1 should match function name" time="0.3456" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Architecture.ps1 should match function name" name="Module Function validation.Script Get-Architecture.ps1 should match function name" time="0.2698" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FileType.ps1 should match function name" name="Module Function validation.Script Get-FileType.ps1 should match function name" time="0.3018" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-FunctionResource.ps1 should match function name" name="Module Function validation.Script Get-FunctionResource.ps1 should match function name" time="0.2587" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-GitHubRepoRelease.ps1 should match function name" name="Module Function validation.Script Get-GitHubRepoRelease.ps1 should match function name" time="0.3248" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-ModuleResource.ps1 should match function name" name="Module Function validation.Script Get-ModuleResource.ps1 should match function name" time="0.4505" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-Platform.ps1 should match function name" name="Module Function validation.Script Get-Platform.ps1 should match function name" time="0.3455" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-SourceForgeRepoRelease.ps1 should match function name" name="Module Function validation.Script Get-SourceForgeRepoRelease.ps1 should match function name" time="0.262" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-RestMethodWrapper.ps1 should match function name" name="Module Function validation.Script Invoke-RestMethodWrapper.ps1 should match function name" time="0.2903" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-SystemNetRequest.ps1 should match function name" name="Module Function validation.Script Invoke-SystemNetRequest.ps1 should match function name" time="0.4551" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-WebRequestWrapper.ps1 should match function name" name="Module Function validation.Script Invoke-WebRequestWrapper.ps1 should match function name" time="0.3076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenPath.ps1 should match function name" name="Module Function validation.Script New-EvergreenPath.ps1 should match function name" time="0.2441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Remove-ProxyEnv.ps1 should match function name" name="Module Function validation.Script Remove-ProxyEnv.ps1 should match function name" time="0.2665" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-DnsNameWrapper.ps1 should match function name" name="Module Function validation.Script Resolve-DnsNameWrapper.ps1 should match function name" time="0.2403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-InvokeWebRequest.ps1 should match function name" name="Module Function validation.Script Resolve-InvokeWebRequest.ps1 should match function name" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Resolve-SystemNetWebRequest.ps1 should match function name" name="Module Function validation.Script Resolve-SystemNetWebRequest.ps1 should match function name" time="0.4204" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-File.ps1 should match function name" name="Module Function validation.Script Save-File.ps1 should match function name" time="0.2707" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Set-ProxyEnv.ps1 should match function name" name="Module Function validation.Script Set-ProxyEnv.ps1 should match function name" time="0.385" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-ProxyEnv.ps1 should match function name" name="Module Function validation.Script Test-ProxyEnv.ps1 should match function name" time="0.267" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-PSCore.ps1 should match function name" name="Module Function validation.Script Test-PSCore.ps1 should match function name" time="0.2573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Export-EvergreenApp.ps1 should match function name" time="0.3" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Export-EvergreenManifest.ps1 should match function name" name="Module Function validation.Script Export-EvergreenManifest.ps1 should match function name" time="0.405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Find-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Find-EvergreenApp.ps1 should match function name" time="0.2628" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Get-EvergreenApp.ps1 should match function name" time="0.3336" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Get-EvergreenLibrary.ps1 should match function name" name="Module Function validation.Script Get-EvergreenLibrary.ps1 should match function name" time="0.3817" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Invoke-EvergreenApp.ps1 should match function name" time="0.2874" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Invoke-EvergreenLibraryUpdate.ps1 should match function name" name="Module Function validation.Script Invoke-EvergreenLibraryUpdate.ps1 should match function name" time="0.4046" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script New-EvergreenLibrary.ps1 should match function name" name="Module Function validation.Script New-EvergreenLibrary.ps1 should match function name" time="0.3136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Save-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Save-EvergreenApp.ps1 should match function name" time="0.33" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Script Test-EvergreenApp.ps1 should match function name" name="Module Function validation.Script Test-EvergreenApp.ps1 should match function name" time="0.33" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Module Metadata validation" executed="True" result="Success" success="True" time="261.1834" asserts="0" description="Module Metadata validation">
            <results>
              <test-case description="Script fileinfo should be OK" name="Module Metadata validation.Script fileinfo should be OK" time="0.3005" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Import module should be OK" name="Module Metadata validation.Import module should be OK" time="0.6742" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\projects\evergreen\tests\PrivateFunctions.Tests.ps1" executed="True" result="Success" success="True" time="23.0808" asserts="0" description="C:\projects\evergreen\tests\PrivateFunctions.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-PSCore" executed="True" result="Success" success="True" time="1.2771" asserts="0" description="Test-PSCore">
            <results>
              <test-suite type="TestFixture" name="Test-PSCore.Tests whether we are running on PowerShell Core" executed="True" result="Success" success="True" time="0.6507" asserts="0" description="Test-PSCore.Tests whether we are running on PowerShell Core">
                <results>
                  <test-case description="Returns True if running Windows PowerShell" name="Test-PSCore.Tests whether we are running on PowerShell Core.Returns True if running Windows PowerShell" time="0.4727" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test-PSCore.Tests whether we are running on Windows PowerShell" executed="True" result="Success" success="True" time="1.1107" asserts="0" description="Test-PSCore.Tests whether we are running on Windows PowerShell">
                <results>
                  <test-case description="Returns False if running Windows PowerShell" name="Test-PSCore.Tests whether we are running on Windows PowerShell.Returns False if running Windows PowerShell" time="0.2839" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Architecture" executed="True" result="Success" success="True" time="2.3551" asserts="0" description="Get-Architecture">
            <results>
              <test-suite type="TestFixture" name="Get-Architecture.It returns expected output" executed="True" result="Success" success="True" time="0.9181" asserts="0" description="Get-Architecture.It returns expected output">
                <results>
                  <test-case description="Returns x64 given an x64 URL" name="Get-Architecture.It returns expected output.Returns x64 given an x64 URL" time="0.2549" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns x86 given an x86 URL" name="Get-Architecture.It returns expected output.Returns x86 given an x86 URL" time="0.2409" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns x86 given a string that won't match anything" name="Get-Architecture.It returns expected output.Returns x86 given a string that won't match anything" time="0.2444" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-GitHubRepoRelease" executed="True" result="Success" success="True" time="5.2152" asserts="0" description="Get-GitHubRepoRelease">
            <results>
              <test-suite type="TestFixture" name="Get-GitHubRepoRelease.It correctly returns an object" executed="True" result="Success" success="True" time="2.6912" asserts="0" description="Get-GitHubRepoRelease.It correctly returns an object">
                <results>
                  <test-case description="Does not Throw" name="Get-GitHubRepoRelease.It correctly returns an object.Does not Throw" time="1.2065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns the expected properties" name="Get-GitHubRepoRelease.It correctly returns an object.Returns the expected properties" time="1.3068" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-DateTime" executed="True" result="Success" success="True" time="5.817" asserts="0" description="ConvertTo-DateTime">
            <results>
              <test-suite type="TestFixture" name="ConvertTo-DateTime.Format and return a datetime string" executed="True" result="Success" success="True" time="0.4331" asserts="0" description="ConvertTo-DateTime.Format and return a datetime string">
                <results>
                  <test-case description="Correctly formats the provided datetime" name="ConvertTo-DateTime.Format and return a datetime string.Correctly formats the provided datetime" time="0.2668" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="ConvertTo-Hashtable" executed="True" result="Success" success="True" time="6.4196" asserts="0" description="ConvertTo-Hashtable">
            <results>
              <test-suite type="TestFixture" name="ConvertTo-Hashtable.Test conversion to hashtable" executed="True" result="Success" success="True" time="0.4494" asserts="0" description="ConvertTo-Hashtable.Test conversion to hashtable">
                <results>
                  <test-case description="Converts a PSObject into a hashtable" name="ConvertTo-Hashtable.Test conversion to hashtable.Converts a PSObject into a hashtable" time="0.2725" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Platform" executed="True" result="Success" success="True" time="7.3876" asserts="0" description="Get-Platform">
            <results>
              <test-suite type="TestFixture" name="Get-Platform.Ensure platform is returned" executed="True" result="Success" success="True" time="0.7837" asserts="0" description="Get-Platform.Ensure platform is returned">
                <results>
                  <test-case description="Given a platform string it returns the right platform" name="Get-Platform.Ensure platform is returned.Given a platform string it returns the right platform" time="0.3142" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given a string that won't match, returns Windows" name="Get-Platform.Ensure platform is returned.Given a string that won't match, returns Windows" time="0.2723" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-FileType" executed="True" result="Success" success="True" time="8.3009" asserts="0" description="Get-FileType">
            <results>
              <test-suite type="TestFixture" name="Get-FileType.Ensure file type is returned" executed="True" result="Success" success="True" time="0.7503" asserts="0" description="Get-FileType.Ensure file type is returned">
                <results>
                  <test-case description="Given a file path string it returns the right file type" name="Get-FileType.Ensure file type is returned.Given a file path string it returns the right file type" time="0.2707" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an file path string without an extension it returns null" name="Get-FileType.Ensure file type is returned.Given an file path string without an extension it returns null" time="0.2844" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-SourceForgeRepoRelease" executed="True" result="Success" success="True" time="9.6468" asserts="0" description="Get-SourceForgeRepoRelease">
            <results>
              <test-suite type="TestFixture" name="Get-SourceForgeRepoRelease.Validate function returns expected object" executed="True" result="Success" success="True" time="1.1956" asserts="0" description="Get-SourceForgeRepoRelease.Validate function returns expected object">
                <results>
                  <test-case description="Returns an object with expected properties" name="Get-SourceForgeRepoRelease.Validate function returns expected object.Returns an object with expected properties" time="1.0259" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-FunctionResource" executed="True" result="Success" success="True" time="10.6956" asserts="0" description="Get-FunctionResource">
            <results>
              <test-suite type="TestFixture" name="Get-FunctionResource.Ensure function resources are returned" executed="True" result="Success" success="True" time="0.8941" asserts="0" description="Get-FunctionResource.Ensure function resources are returned">
                <results>
                  <test-case description="Given a valid app it returns valid data" name="Get-FunctionResource.Ensure function resources are returned.Given a valid app it returns valid data" time="0.413" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an invalid application, it throws" name="Get-FunctionResource.Ensure function resources are returned.Given an invalid application, it throws" time="0.3112" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ModuleResource" executed="True" result="Success" success="True" time="12.6909" asserts="0" description="Get-ModuleResource">
            <results>
              <test-suite type="TestFixture" name="Get-ModuleResource.Ensure module resources are returned" executed="True" result="Success" success="True" time="1.8295" asserts="0" description="Get-ModuleResource.Ensure module resources are returned">
                <results>
                  <test-case description="Returns the module resource" name="Get-ModuleResource.Ensure module resources are returned.Returns the module resource" time="0.4227" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Given an invalid path, it throws" name="Get-ModuleResource.Ensure module resources are returned.Given an invalid path, it throws" time="0.2472" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns an object with the expected properties" name="Get-ModuleResource.Ensure module resources are returned.Returns an object with the expected properties" time="0.9771" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-RestMethodWrapper" executed="True" result="Success" success="True" time="13.538" asserts="0" description="Invoke-RestMethodWrapper">
            <results>
              <test-suite type="TestFixture" name="Invoke-RestMethodWrapper.Ensure Invoke-RestMethodWrapper works as expected" executed="True" result="Success" success="True" time="0.6748" asserts="0" description="Invoke-RestMethodWrapper.Ensure Invoke-RestMethodWrapper works as expected">
                <results>
                  <test-case description="Returns data from a proper URL" name="Invoke-RestMethodWrapper.Ensure Invoke-RestMethodWrapper works as expected.Returns data from a proper URL" time="0.4978" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-SystemNetRequest" executed="True" result="Success" success="True" time="14.4515" asserts="0" description="Invoke-SystemNetRequest">
            <results>
              <test-suite type="TestFixture" name="Invoke-SystemNetRequest.Ensure Invoke-SystemNetRequest works as expected" executed="True" result="Success" success="True" time="0.7162" asserts="0" description="Invoke-SystemNetRequest.Ensure Invoke-SystemNetRequest works as expected">
                <results>
                  <test-case description="Returns data from a URL" name="Invoke-SystemNetRequest.Ensure Invoke-SystemNetRequest works as expected.Returns data from a URL" time="0.53" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Resolve-SystemNetWebRequest" executed="True" result="Success" success="True" time="15.3335" asserts="0" description="Resolve-SystemNetWebRequest">
            <results>
              <test-suite type="TestFixture" name="Resolve-SystemNetWebRequest.Ensure Resolve-SystemNetWebRequest works as expected" executed="True" result="Success" success="True" time="0.6804" asserts="0" description="Resolve-SystemNetWebRequest.Ensure Resolve-SystemNetWebRequest works as expected">
                <results>
                  <test-case description="Returns data from a URL" name="Resolve-SystemNetWebRequest.Ensure Resolve-SystemNetWebRequest works as expected.Returns data from a URL" time="0.4155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Invoke-WebRequestWrapper" executed="True" result="Success" success="True" time="16.3272" asserts="0" description="Invoke-WebRequestWrapper">
            <results>
              <test-suite type="TestFixture" name="Invoke-WebRequestWrapper.Ensure Invoke-WebRequestWrapper works as expected" executed="True" result="Success" success="True" time="0.7491" asserts="0" description="Invoke-WebRequestWrapper.Ensure Invoke-WebRequestWrapper works as expected">
                <results>
                  <test-case description="Returns data from a URL" name="Invoke-WebRequestWrapper.Ensure Invoke-WebRequestWrapper works as expected.Returns data from a URL" time="0.5717" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="New-EvergreenPath" executed="True" result="Success" success="True" time="17.5051" asserts="0" description="New-EvergreenPath">
            <results>
              <test-suite type="TestFixture" name="New-EvergreenPath.Ensure New-EvergreenPath works as expected" executed="True" result="Success" success="True" time="0.8994" asserts="0" description="New-EvergreenPath.Ensure New-EvergreenPath works as expected">
                <results>
                  <test-case description="Does not throw when creating a directory" name="New-EvergreenPath.Ensure New-EvergreenPath works as expected.Does not throw when creating a directory" time="0.3058" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns a string when creating a directory" name="New-EvergreenPath.Ensure New-EvergreenPath works as expected.Returns a string when creating a directory" time="0.3356" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Resolve-DnsNameWrapper" executed="True" result="Success" success="True" time="18.9483" asserts="0" description="Resolve-DnsNameWrapper">
            <results>
              <test-suite type="TestFixture" name="Resolve-DnsNameWrapper.Ensure Resolve-DnsNameWrapper works as expected" executed="True" result="Success" success="True" time="1.2001" asserts="0" description="Resolve-DnsNameWrapper.Ensure Resolve-DnsNameWrapper works as expected">
                <results>
                  <test-case description="Returns DNS records OK" name="Resolve-DnsNameWrapper.Ensure Resolve-DnsNameWrapper works as expected.Returns DNS records OK" time="1.0042" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Resolve-InvokeWebRequest" executed="True" result="Success" success="True" time="20.6742" asserts="0" description="Resolve-InvokeWebRequest">
            <results>
              <test-suite type="TestFixture" name="Resolve-InvokeWebRequest.Ensure Resolve-InvokeWebRequest works as expected" executed="True" result="Success" success="True" time="1.5537" asserts="0" description="Resolve-InvokeWebRequest.Ensure Resolve-InvokeWebRequest works as expected">
                <results>
                  <test-case description="Returns data from a URL" name="Resolve-InvokeWebRequest.Ensure Resolve-InvokeWebRequest works as expected.Returns data from a URL" time="1.349" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-File" executed="True" result="Success" success="True" time="21.5847" asserts="0" description="Save-File">
            <results>
              <test-suite type="TestFixture" name="Save-File.Ensure Save-File works as expected" executed="True" result="Success" success="True" time="0.7207" asserts="0" description="Save-File.Ensure Save-File works as expected">
                <results>
                  <test-case description="Returns a string if the file is downloaded" name="Save-File.Ensure Save-File works as expected.Returns a string if the file is downloaded" time="0.5147" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\projects\evergreen\tests\PublicFunctions.Tests.ps1" executed="True" result="Success" success="True" time="901.7577" asserts="0" description="C:\projects\evergreen\tests\PublicFunctions.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-EvergreenApp FoxitReader" executed="True" result="Success" success="True" time="9.9965" asserts="0" description="Get-EvergreenApp FoxitReader">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader." executed="True" result="Success" success="True" time="2.5072" asserts="0" description="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader.">
                <results>
                  <test-case description="FoxitReader: should return something" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader..FoxitReader: should return something" time="0.1945" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitReader: should return the expected output type" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader..FoxitReader: should return the expected output type" time="0.384" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitReader: should have a Version property that is a string" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader..FoxitReader: should have a Version property that is a string" time="0.5643" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitReader: should have a valid version number" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader..FoxitReader: should have a valid version number" time="0.5904" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitReader: should have a URI property that is a string" name="Get-EvergreenApp FoxitReader.Validate Get-EvergreenApp works with: FoxitReader..FoxitReader: should have a URI property that is a string" time="0.5842" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ArtifexGhostscript" executed="True" result="Success" success="True" time="12.0987" asserts="0" description="Get-EvergreenApp ArtifexGhostscript">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript." executed="True" result="Success" success="True" time="1.1117" asserts="0" description="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript.">
                <results>
                  <test-case description="ArtifexGhostscript: should return something" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript..ArtifexGhostscript: should return something" time="0.1659" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ArtifexGhostscript: should return the expected output type" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript..ArtifexGhostscript: should return the expected output type" time="0.1778" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ArtifexGhostscript: should have a Version property that is a string" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript..ArtifexGhostscript: should have a Version property that is a string" time="0.1959" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ArtifexGhostscript: should have a valid version number" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript..ArtifexGhostscript: should have a valid version number" time="0.1947" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ArtifexGhostscript: should have a URI property that is a string" name="Get-EvergreenApp ArtifexGhostscript.Validate Get-EvergreenApp works with: ArtifexGhostscript..ArtifexGhostscript: should have a URI property that is a string" time="0.2013" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient" executed="True" result="Success" success="True" time="14.0852" asserts="0" description="Get-EvergreenApp MicrosoftWindowsPackageManagerClient">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient." executed="True" result="Success" success="True" time="1.1228" asserts="0" description="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient.">
                <results>
                  <test-case description="MicrosoftWindowsPackageManagerClient: should return something" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient: should return something" time="0.1701" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftWindowsPackageManagerClient: should return the expected output type" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient: should return the expected output type" time="0.1766" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftWindowsPackageManagerClient: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient: should have a Version property that is a string" time="0.1839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftWindowsPackageManagerClient: should have a valid version number" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient: should have a valid version number" time="0.1982" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftWindowsPackageManagerClient: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftWindowsPackageManagerClient.Validate Get-EvergreenApp works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient: should have a URI property that is a string" time="0.1848" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareHorizonClientAlt" executed="True" result="Success" success="True" time="16.4726" asserts="0" description="Get-EvergreenApp VMwareHorizonClientAlt">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt." executed="True" result="Success" success="True" time="1.1893" asserts="0" description="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt.">
                <results>
                  <test-case description="VMwareHorizonClientAlt: should return something" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt: should return something" time="0.1932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClientAlt: should return the expected output type" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt: should return the expected output type" time="0.1932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClientAlt: should have a Version property that is a string" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt: should have a Version property that is a string" time="0.1876" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClientAlt: should have a valid version number" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt: should have a valid version number" time="0.2064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClientAlt: should have a URI property that is a string" name="Get-EvergreenApp VMwareHorizonClientAlt.Validate Get-EvergreenApp works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt: should have a URI property that is a string" time="0.2023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TeXstudio" executed="True" result="Success" success="True" time="18.4735" asserts="0" description="Get-EvergreenApp TeXstudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio." executed="True" result="Success" success="True" time="1.2043" asserts="0" description="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio.">
                <results>
                  <test-case description="TeXstudio: should return something" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio..TeXstudio: should return something" time="0.1855" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeXstudio: should return the expected output type" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio..TeXstudio: should return the expected output type" time="0.1882" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeXstudio: should have a Version property that is a string" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio..TeXstudio: should have a Version property that is a string" time="0.2102" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeXstudio: should have a valid version number" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio..TeXstudio: should have a valid version number" time="0.2198" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeXstudio: should have a URI property that is a string" name="Get-EvergreenApp TeXstudio.Validate Get-EvergreenApp works with: TeXstudio..TeXstudio: should have a URI property that is a string" time="0.2027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp jq" executed="True" result="Success" success="True" time="20.7477" asserts="0" description="Get-EvergreenApp jq">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq." executed="True" result="Success" success="True" time="1.3499" asserts="0" description="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq.">
                <results>
                  <test-case description="jq: should return something" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq..jq: should return something" time="0.2472" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jq: should return the expected output type" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq..jq: should return the expected output type" time="0.1937" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jq: should have a Version property that is a string" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq..jq: should have a Version property that is a string" time="0.2097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jq: should have a valid version number" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq..jq: should have a valid version number" time="0.2225" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jq: should have a URI property that is a string" name="Get-EvergreenApp jq.Validate Get-EvergreenApp works with: jq..jq: should have a URI property that is a string" time="0.2308" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Naps2" executed="True" result="Success" success="True" time="22.8527" asserts="0" description="Get-EvergreenApp Naps2">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2." executed="True" result="Success" success="True" time="1.2525" asserts="0" description="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2.">
                <results>
                  <test-case description="Naps2: should return something" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2..Naps2: should return something" time="0.1876" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Naps2: should return the expected output type" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2..Naps2: should return the expected output type" time="0.2015" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Naps2: should have a Version property that is a string" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2..Naps2: should have a Version property that is a string" time="0.2228" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Naps2: should have a valid version number" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2..Naps2: should have a valid version number" time="0.2206" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Naps2: should have a URI property that is a string" name="Get-EvergreenApp Naps2.Validate Get-EvergreenApp works with: Naps2..Naps2: should have a URI property that is a string" time="0.2211" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GoogleChrome" executed="True" result="Success" success="True" time="25.8506" asserts="0" description="Get-EvergreenApp GoogleChrome">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome." executed="True" result="Success" success="True" time="1.7377" asserts="0" description="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome.">
                <results>
                  <test-case description="GoogleChrome: should return something" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome..GoogleChrome: should return something" time="0.196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GoogleChrome: should return the expected output type" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome..GoogleChrome: should return the expected output type" time="0.2623" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GoogleChrome: should have a Version property that is a string" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome..GoogleChrome: should have a Version property that is a string" time="0.3769" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GoogleChrome: should have a valid version number" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome..GoogleChrome: should have a valid version number" time="0.3547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GoogleChrome: should have a URI property that is a string" name="Get-EvergreenApp GoogleChrome.Validate Get-EvergreenApp works with: GoogleChrome..GoogleChrome: should have a URI property that is a string" time="0.3483" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Anaconda" executed="True" result="Success" success="True" time="27.6929" asserts="0" description="Get-EvergreenApp Anaconda">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda." executed="True" result="Success" success="True" time="1.1537" asserts="0" description="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda.">
                <results>
                  <test-case description="Anaconda: should return something" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda..Anaconda: should return something" time="0.1894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anaconda: should return the expected output type" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda..Anaconda: should return the expected output type" time="0.1835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anaconda: should have a Version property that is a string" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda..Anaconda: should have a Version property that is a string" time="0.2332" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anaconda: should have a valid version number" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda..Anaconda: should have a valid version number" time="0.1813" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anaconda: should have a URI property that is a string" name="Get-EvergreenApp Anaconda.Validate Get-EvergreenApp works with: Anaconda..Anaconda: should have a URI property that is a string" time="0.1742" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GeekSoftwarePDF24Creator" executed="True" result="Success" success="True" time="29.8119" asserts="0" description="Get-EvergreenApp GeekSoftwarePDF24Creator">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator." executed="True" result="Success" success="True" time="1.2428" asserts="0" description="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator.">
                <results>
                  <test-case description="GeekSoftwarePDF24Creator: should return something" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator: should return something" time="0.1985" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GeekSoftwarePDF24Creator: should return the expected output type" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator: should return the expected output type" time="0.204" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GeekSoftwarePDF24Creator: should have a Version property that is a string" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator: should have a Version property that is a string" time="0.2142" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GeekSoftwarePDF24Creator: should have a valid version number" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator: should have a valid version number" time="0.2157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GeekSoftwarePDF24Creator: should have a URI property that is a string" name="Get-EvergreenApp GeekSoftwarePDF24Creator.Validate Get-EvergreenApp works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator: should have a URI property that is a string" time="0.2116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Praat" executed="True" result="Success" success="True" time="32.0336" asserts="0" description="Get-EvergreenApp Praat">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat." executed="True" result="Success" success="True" time="1.2913" asserts="0" description="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat.">
                <results>
                  <test-case description="Praat: should return something" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat..Praat: should return something" time="0.2013" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Praat: should return the expected output type" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat..Praat: should return the expected output type" time="0.2008" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Praat: should have a Version property that is a string" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat..Praat: should have a Version property that is a string" time="0.2117" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Praat: should have a valid version number" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat..Praat: should have a valid version number" time="0.2442" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Praat: should have a URI property that is a string" name="Get-EvergreenApp Praat.Validate Get-EvergreenApp works with: Praat..Praat: should have a URI property that is a string" time="0.232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OpenWebStart" executed="True" result="Success" success="True" time="34.4875" asserts="0" description="Get-EvergreenApp OpenWebStart">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart." executed="True" result="Success" success="True" time="1.376" asserts="0" description="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart.">
                <results>
                  <test-case description="OpenWebStart: should return something" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart..OpenWebStart: should return something" time="0.2115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenWebStart: should return the expected output type" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart..OpenWebStart: should return the expected output type" time="0.218" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenWebStart: should have a Version property that is a string" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart..OpenWebStart: should have a Version property that is a string" time="0.237" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenWebStart: should have a valid version number" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart..OpenWebStart: should have a valid version number" time="0.2137" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenWebStart: should have a URI property that is a string" name="Get-EvergreenApp OpenWebStart.Validate Get-EvergreenApp works with: OpenWebStart..OpenWebStart: should have a URI property that is a string" time="0.226" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TogglDesktop" executed="True" result="Success" success="True" time="36.6888" asserts="0" description="Get-EvergreenApp TogglDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop." executed="True" result="Success" success="True" time="1.2637" asserts="0" description="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop.">
                <results>
                  <test-case description="TogglDesktop: should return something" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop..TogglDesktop: should return something" time="0.1945" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TogglDesktop: should return the expected output type" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop..TogglDesktop: should return the expected output type" time="0.1986" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TogglDesktop: should have a Version property that is a string" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop..TogglDesktop: should have a Version property that is a string" time="0.2315" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TogglDesktop: should have a valid version number" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop..TogglDesktop: should have a valid version number" time="0.2142" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TogglDesktop: should have a URI property that is a string" name="Get-EvergreenApp TogglDesktop.Validate Get-EvergreenApp works with: TogglDesktop..TogglDesktop: should have a URI property that is a string" time="0.2167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor" executed="True" result="Success" success="True" time="38.9049" asserts="0" description="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor." executed="True" result="Success" success="True" time="1.3185" asserts="0" description="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor.">
                <results>
                  <test-case description="TrackerSoftwarePDFXChangeEditor: should return something" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor: should return something" time="0.1732" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TrackerSoftwarePDFXChangeEditor: should return the expected output type" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor: should return the expected output type" time="0.1898" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TrackerSoftwarePDFXChangeEditor: should have a Version property that is a string" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor: should have a Version property that is a string" time="0.2829" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TrackerSoftwarePDFXChangeEditor: should have a valid version number" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor: should have a valid version number" time="0.249" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TrackerSoftwarePDFXChangeEditor: should have a URI property that is a string" name="Get-EvergreenApp TrackerSoftwarePDFXChangeEditor.Validate Get-EvergreenApp works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor: should have a URI property that is a string" time="0.2365" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AkeoRufus" executed="True" result="Success" success="True" time="41.2903" asserts="0" description="Get-EvergreenApp AkeoRufus">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus." executed="True" result="Success" success="True" time="1.398" asserts="0" description="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus.">
                <results>
                  <test-case description="AkeoRufus: should return something" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus..AkeoRufus: should return something" time="0.194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AkeoRufus: should return the expected output type" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus..AkeoRufus: should return the expected output type" time="0.2148" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AkeoRufus: should have a Version property that is a string" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus..AkeoRufus: should have a Version property that is a string" time="0.2652" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AkeoRufus: should have a valid version number" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus..AkeoRufus: should have a valid version number" time="0.2613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AkeoRufus: should have a URI property that is a string" name="Get-EvergreenApp AkeoRufus.Validate Get-EvergreenApp works with: AkeoRufus..AkeoRufus: should have a URI property that is a string" time="0.2816" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureStorageExplorer" executed="True" result="Success" success="True" time="43.3901" asserts="0" description="Get-EvergreenApp MicrosoftAzureStorageExplorer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer." executed="True" result="Success" success="True" time="1.2065" asserts="0" description="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer.">
                <results>
                  <test-case description="MicrosoftAzureStorageExplorer: should return something" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer: should return something" time="0.1878" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureStorageExplorer: should return the expected output type" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer: should return the expected output type" time="0.2222" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureStorageExplorer: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer: should have a Version property that is a string" time="0.2141" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureStorageExplorer: should have a valid version number" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer: should have a valid version number" time="0.171" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureStorageExplorer: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftAzureStorageExplorer.Validate Get-EvergreenApp works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer: should have a URI property that is a string" time="0.188" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MirantisLens" executed="True" result="Success" success="True" time="47.1188" asserts="0" description="Get-EvergreenApp MirantisLens">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens." executed="True" result="Success" success="True" time="1.1548" asserts="0" description="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens.">
                <results>
                  <test-case description="MirantisLens: should return something" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens..MirantisLens: should return something" time="0.1734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MirantisLens: should return the expected output type" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens..MirantisLens: should return the expected output type" time="0.1853" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MirantisLens: should have a Version property that is a string" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens..MirantisLens: should have a Version property that is a string" time="0.2016" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MirantisLens: should have a valid version number" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens..MirantisLens: should have a valid version number" time="0.2027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MirantisLens: should have a URI property that is a string" name="Get-EvergreenApp MirantisLens.Validate Get-EvergreenApp works with: MirantisLens..MirantisLens: should have a URI property that is a string" time="0.2032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OracleVirtualBox" executed="True" result="Success" success="True" time="50.9948" asserts="0" description="Get-EvergreenApp OracleVirtualBox">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox." executed="True" result="Success" success="True" time="1.6721" asserts="0" description="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox.">
                <results>
                  <test-case description="OracleVirtualBox: should return something" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox..OracleVirtualBox: should return something" time="0.1872" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleVirtualBox: should return the expected output type" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox..OracleVirtualBox: should return the expected output type" time="0.2469" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleVirtualBox: should have a Version property that is a string" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox..OracleVirtualBox: should have a Version property that is a string" time="0.367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleVirtualBox: should have a valid version number" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox..OracleVirtualBox: should have a valid version number" time="0.3476" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleVirtualBox: should have a URI property that is a string" name="Get-EvergreenApp OracleVirtualBox.Validate Get-EvergreenApp works with: OracleVirtualBox..OracleVirtualBox: should have a URI property that is a string" time="0.3155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpWaypoint" executed="True" result="Success" success="True" time="53.0303" asserts="0" description="Get-EvergreenApp HashicorpWaypoint">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint." executed="True" result="Success" success="True" time="1.218" asserts="0" description="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint.">
                <results>
                  <test-case description="HashicorpWaypoint: should return something" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint..HashicorpWaypoint: should return something" time="0.1906" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpWaypoint: should return the expected output type" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint..HashicorpWaypoint: should return the expected output type" time="0.1981" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpWaypoint: should have a Version property that is a string" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint..HashicorpWaypoint: should have a Version property that is a string" time="0.2136" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpWaypoint: should have a valid version number" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint..HashicorpWaypoint: should have a valid version number" time="0.2187" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpWaypoint: should have a URI property that is a string" name="Get-EvergreenApp HashicorpWaypoint.Validate Get-EvergreenApp works with: HashicorpWaypoint..HashicorpWaypoint: should have a URI property that is a string" time="0.204" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru18" executed="True" result="Success" success="True" time="56.5599" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru18">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18." executed="True" result="Success" success="True" time="1.6434" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18.">
                <results>
                  <test-case description="AdoptOpenJDKSemuru18: should return something" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18: should return something" time="0.191" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru18: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18: should return the expected output type" time="0.2397" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru18: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18: should have a Version property that is a string" time="0.3492" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru18: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18: should have a valid version number" time="0.3422" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru18: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru18.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18: should have a URI property that is a string" time="0.333" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeConnect" executed="True" result="Success" success="True" time="59.4077" asserts="0" description="Get-EvergreenApp AdobeConnect">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect." executed="True" result="Success" success="True" time="1.5244" asserts="0" description="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect.">
                <results>
                  <test-case description="AdobeConnect: should return something" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect..AdobeConnect: should return something" time="0.2327" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeConnect: should return the expected output type" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect..AdobeConnect: should return the expected output type" time="0.2493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeConnect: should have a Version property that is a string" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect..AdobeConnect: should have a Version property that is a string" time="0.2553" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeConnect: should have a valid version number" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect..AdobeConnect: should have a valid version number" time="0.2654" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeConnect: should have a URI property that is a string" name="Get-EvergreenApp AdobeConnect.Validate Get-EvergreenApp works with: AdobeConnect..AdobeConnect: should have a URI property that is a string" time="0.3045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator" executed="True" result="Success" success="True" time="61.6362" asserts="0" description="Get-EvergreenApp MicrosoftBotFrameworkEmulator">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator." executed="True" result="Success" success="True" time="1.2616" asserts="0" description="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator.">
                <results>
                  <test-case description="MicrosoftBotFrameworkEmulator: should return something" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator: should return something" time="0.2411" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBotFrameworkEmulator: should return the expected output type" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator: should return the expected output type" time="0.1841" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBotFrameworkEmulator: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator: should have a Version property that is a string" time="0.2163" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBotFrameworkEmulator: should have a valid version number" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator: should have a valid version number" time="0.1889" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBotFrameworkEmulator: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftBotFrameworkEmulator.Validate Get-EvergreenApp works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator: should have a URI property that is a string" time="0.2252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AWSCLI" executed="True" result="Success" success="True" time="63.4989" asserts="0" description="Get-EvergreenApp AWSCLI">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI." executed="True" result="Success" success="True" time="1.1938" asserts="0" description="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI.">
                <results>
                  <test-case description="AWSCLI: should return something" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI..AWSCLI: should return something" time="0.19" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSCLI: should return the expected output type" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI..AWSCLI: should return the expected output type" time="0.1805" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSCLI: should have a Version property that is a string" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI..AWSCLI: should have a Version property that is a string" time="0.1811" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSCLI: should have a valid version number" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI..AWSCLI: should have a valid version number" time="0.1926" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSCLI: should have a URI property that is a string" name="Get-EvergreenApp AWSCLI.Validate Get-EvergreenApp works with: AWSCLI..AWSCLI: should have a URI property that is a string" time="0.1899" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OpenJDK" executed="True" result="Success" success="True" time="70.3268" asserts="0" description="Get-EvergreenApp OpenJDK">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK." executed="True" result="Success" success="True" time="3.2936" asserts="0" description="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK.">
                <results>
                  <test-case description="OpenJDK: should return something" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK..OpenJDK: should return something" time="0.1894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenJDK: should return the expected output type" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK..OpenJDK: should return the expected output type" time="0.419" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenJDK: should have a Version property that is a string" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK..OpenJDK: should have a Version property that is a string" time="0.8667" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenJDK: should have a valid version number" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK..OpenJDK: should have a valid version number" time="0.8062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenJDK: should have a URI property that is a string" name="Get-EvergreenApp OpenJDK.Validate Get-EvergreenApp works with: OpenJDK..OpenJDK: should have a URI property that is a string" time="0.8121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeBrackets" executed="True" result="Success" success="True" time="72.3905" asserts="0" description="Get-EvergreenApp AdobeBrackets">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets." executed="True" result="Success" success="True" time="1.2038" asserts="0" description="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets.">
                <results>
                  <test-case description="AdobeBrackets: should return something" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets..AdobeBrackets: should return something" time="0.1876" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeBrackets: should return the expected output type" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets..AdobeBrackets: should return the expected output type" time="0.1843" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeBrackets: should have a Version property that is a string" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets..AdobeBrackets: should have a Version property that is a string" time="0.2307" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeBrackets: should have a valid version number" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets..AdobeBrackets: should have a valid version number" time="0.1931" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeBrackets: should have a URI property that is a string" name="Get-EvergreenApp AdobeBrackets.Validate Get-EvergreenApp works with: AdobeBrackets..AdobeBrackets: should have a URI property that is a string" time="0.2041" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JetBrainsIntelliJIDEA" executed="True" result="Success" success="True" time="75.4289" asserts="0" description="Get-EvergreenApp JetBrainsIntelliJIDEA">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA." executed="True" result="Success" success="True" time="1.4141" asserts="0" description="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA.">
                <results>
                  <test-case description="JetBrainsIntelliJIDEA: should return something" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA: should return something" time="0.196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsIntelliJIDEA: should return the expected output type" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA: should return the expected output type" time="0.2586" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsIntelliJIDEA: should have a Version property that is a string" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA: should have a Version property that is a string" time="0.2601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsIntelliJIDEA: should have a valid version number" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA: should have a valid version number" time="0.2404" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsIntelliJIDEA: should have a URI property that is a string" name="Get-EvergreenApp JetBrainsIntelliJIDEA.Validate Get-EvergreenApp works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA: should have a URI property that is a string" time="0.2434" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp CitrixVMTools" executed="True" result="Success" success="True" time="77.4485" asserts="0" description="Get-EvergreenApp CitrixVMTools">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools." executed="True" result="Success" success="True" time="1.4139" asserts="0" description="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools.">
                <results>
                  <test-case description="CitrixVMTools: should return something" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools..CitrixVMTools: should return something" time="0.1862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixVMTools: should return the expected output type" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools..CitrixVMTools: should return the expected output type" time="0.2209" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixVMTools: should have a Version property that is a string" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools..CitrixVMTools: should have a Version property that is a string" time="0.2728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixVMTools: should have a valid version number" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools..CitrixVMTools: should have a valid version number" time="0.2669" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixVMTools: should have a URI property that is a string" name="Get-EvergreenApp CitrixVMTools.Validate Get-EvergreenApp works with: CitrixVMTools..CitrixVMTools: should have a URI property that is a string" time="0.2824" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftPowerToys" executed="True" result="Success" success="True" time="79.6052" asserts="0" description="Get-EvergreenApp MicrosoftPowerToys">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys." executed="True" result="Success" success="True" time="1.236" asserts="0" description="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys.">
                <results>
                  <test-case description="MicrosoftPowerToys: should return something" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys..MicrosoftPowerToys: should return something" time="0.1798" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerToys: should return the expected output type" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys..MicrosoftPowerToys: should return the expected output type" time="0.1983" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerToys: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys..MicrosoftPowerToys: should have a Version property that is a string" time="0.2406" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerToys: should have a valid version number" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys..MicrosoftPowerToys: should have a valid version number" time="0.2085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerToys: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftPowerToys.Validate Get-EvergreenApp works with: MicrosoftPowerToys..MicrosoftPowerToys: should have a URI property that is a string" time="0.2266" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpVault" executed="True" result="Success" success="True" time="81.6096" asserts="0" description="Get-EvergreenApp HashicorpVault">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault." executed="True" result="Success" success="True" time="1.184" asserts="0" description="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault.">
                <results>
                  <test-case description="HashicorpVault: should return something" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault..HashicorpVault: should return something" time="0.1788" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpVault: should return the expected output type" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault..HashicorpVault: should return the expected output type" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpVault: should have a Version property that is a string" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault..HashicorpVault: should have a Version property that is a string" time="0.214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpVault: should have a valid version number" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault..HashicorpVault: should have a valid version number" time="0.1934" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpVault: should have a URI property that is a string" name="Get-EvergreenApp HashicorpVault.Validate Get-EvergreenApp works with: HashicorpVault..HashicorpVault: should have a URI property that is a string" time="0.2147" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SAGAGIS" executed="True" result="Success" success="True" time="83.7092" asserts="0" description="Get-EvergreenApp SAGAGIS">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS." executed="True" result="Success" success="True" time="1.2243" asserts="0" description="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS.">
                <results>
                  <test-case description="SAGAGIS: should return something" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS..SAGAGIS: should return something" time="0.1877" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SAGAGIS: should return the expected output type" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS..SAGAGIS: should return the expected output type" time="0.2433" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SAGAGIS: should have a Version property that is a string" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS..SAGAGIS: should have a Version property that is a string" time="0.2009" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SAGAGIS: should have a valid version number" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS..SAGAGIS: should have a valid version number" time="0.191" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SAGAGIS: should have a URI property that is a string" name="Get-EvergreenApp SAGAGIS.Validate Get-EvergreenApp works with: SAGAGIS..SAGAGIS: should have a URI property that is a string" time="0.2005" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SoberLemurPDFSamBasic" executed="True" result="Success" success="True" time="85.9941" asserts="0" description="Get-EvergreenApp SoberLemurPDFSamBasic">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic." executed="True" result="Success" success="True" time="1.2897" asserts="0" description="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic.">
                <results>
                  <test-case description="SoberLemurPDFSamBasic: should return something" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic: should return something" time="0.1737" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SoberLemurPDFSamBasic: should return the expected output type" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic: should return the expected output type" time="0.2383" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SoberLemurPDFSamBasic: should have a Version property that is a string" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic: should have a Version property that is a string" time="0.2214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SoberLemurPDFSamBasic: should have a valid version number" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic: should have a valid version number" time="0.2271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SoberLemurPDFSamBasic: should have a URI property that is a string" name="Get-EvergreenApp SoberLemurPDFSamBasic.Validate Get-EvergreenApp works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic: should have a URI property that is a string" time="0.2232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TorProjectTorBrowser" executed="True" result="Success" success="True" time="95.8444" asserts="0" description="Get-EvergreenApp TorProjectTorBrowser">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser." executed="True" result="Success" success="True" time="7.8406" asserts="0" description="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser.">
                <results>
                  <test-case description="TorProjectTorBrowser: should return something" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser..TorProjectTorBrowser: should return something" time="0.166" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TorProjectTorBrowser: should return the expected output type" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser..TorProjectTorBrowser: should return the expected output type" time="1.0465" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TorProjectTorBrowser: should have a Version property that is a string" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser..TorProjectTorBrowser: should have a Version property that is a string" time="2.0797" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TorProjectTorBrowser: should have a valid version number" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser..TorProjectTorBrowser: should have a valid version number" time="2.1395" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TorProjectTorBrowser: should have a URI property that is a string" name="Get-EvergreenApp TorProjectTorBrowser.Validate Get-EvergreenApp works with: TorProjectTorBrowser..TorProjectTorBrowser: should have a URI property that is a string" time="2.2331" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JASP" executed="True" result="Success" success="True" time="97.9733" asserts="0" description="Get-EvergreenApp JASP">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP." executed="True" result="Success" success="True" time="1.1377" asserts="0" description="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP.">
                <results>
                  <test-case description="JASP: should return something" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP..JASP: should return something" time="0.1901" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JASP: should return the expected output type" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP..JASP: should return the expected output type" time="0.1815" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JASP: should have a Version property that is a string" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP..JASP: should have a Version property that is a string" time="0.18" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JASP: should have a valid version number" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP..JASP: should have a valid version number" time="0.1928" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JASP: should have a URI property that is a string" name="Get-EvergreenApp JASP.Validate Get-EvergreenApp works with: JASP..JASP: should have a URI property that is a string" time="0.1981" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobat" executed="True" result="Success" success="True" time="101.5333" asserts="0" description="Get-EvergreenApp AdobeAcrobat">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat." executed="True" result="Success" success="True" time="2.1386" asserts="0" description="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat.">
                <results>
                  <test-case description="AdobeAcrobat: should return something" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat..AdobeAcrobat: should return something" time="0.1773" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobat: should return the expected output type" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat..AdobeAcrobat: should return the expected output type" time="0.3167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobat: should have a Version property that is a string" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat..AdobeAcrobat: should have a Version property that is a string" time="0.4843" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobat: should have a valid version number" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat..AdobeAcrobat: should have a valid version number" time="0.4647" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobat: should have a URI property that is a string" name="Get-EvergreenApp AdobeAcrobat.Validate Get-EvergreenApp works with: AdobeAcrobat..AdobeAcrobat: should have a URI property that is a string" time="0.4867" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Cyberduck" executed="True" result="Success" success="True" time="103.4257" asserts="0" description="Get-EvergreenApp Cyberduck">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck." executed="True" result="Success" success="True" time="1.0949" asserts="0" description="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck.">
                <results>
                  <test-case description="Cyberduck: should return something" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck..Cyberduck: should return something" time="0.1788" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cyberduck: should return the expected output type" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck..Cyberduck: should return the expected output type" time="0.177" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cyberduck: should have a Version property that is a string" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck..Cyberduck: should have a Version property that is a string" time="0.1805" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cyberduck: should have a valid version number" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck..Cyberduck: should have a valid version number" time="0.1743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cyberduck: should have a URI property that is a string" name="Get-EvergreenApp Cyberduck.Validate Get-EvergreenApp works with: Cyberduck..Cyberduck: should have a URI property that is a string" time="0.1795" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AtlassianSourcetree" executed="True" result="Success" success="True" time="105.2306" asserts="0" description="Get-EvergreenApp AtlassianSourcetree">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree." executed="True" result="Success" success="True" time="1.2206" asserts="0" description="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree.">
                <results>
                  <test-case description="AtlassianSourcetree: should return something" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree..AtlassianSourcetree: should return something" time="0.1705" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AtlassianSourcetree: should return the expected output type" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree..AtlassianSourcetree: should return the expected output type" time="0.1928" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AtlassianSourcetree: should have a Version property that is a string" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree..AtlassianSourcetree: should have a Version property that is a string" time="0.2239" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AtlassianSourcetree: should have a valid version number" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree..AtlassianSourcetree: should have a valid version number" time="0.2524" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AtlassianSourcetree: should have a URI property that is a string" name="Get-EvergreenApp AtlassianSourcetree.Validate Get-EvergreenApp works with: AtlassianSourcetree..AtlassianSourcetree: should have a URI property that is a string" time="0.2025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ShareX" executed="True" result="Success" success="True" time="107.2553" asserts="0" description="Get-EvergreenApp ShareX">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX." executed="True" result="Success" success="True" time="1.1373" asserts="0" description="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX.">
                <results>
                  <test-case description="ShareX: should return something" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX..ShareX: should return something" time="0.1676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ShareX: should return the expected output type" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX..ShareX: should return the expected output type" time="0.1785" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ShareX: should have a Version property that is a string" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX..ShareX: should have a Version property that is a string" time="0.1938" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ShareX: should have a valid version number" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX..ShareX: should have a valid version number" time="0.2096" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ShareX: should have a URI property that is a string" name="Get-EvergreenApp ShareX.Validate Get-EvergreenApp works with: ShareX..ShareX: should have a URI property that is a string" time="0.2051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp WinSCP" executed="True" result="Success" success="True" time="109.2855" asserts="0" description="Get-EvergreenApp WinSCP">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP." executed="True" result="Success" success="True" time="1.0871" asserts="0" description="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP.">
                <results>
                  <test-case description="WinSCP: should return something" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP..WinSCP: should return something" time="0.1698" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinSCP: should return the expected output type" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP..WinSCP: should return the expected output type" time="0.1664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinSCP: should have a Version property that is a string" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP..WinSCP: should have a Version property that is a string" time="0.1859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinSCP: should have a valid version number" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP..WinSCP: should have a valid version number" time="0.1734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinSCP: should have a URI property that is a string" name="Get-EvergreenApp WinSCP.Validate Get-EvergreenApp works with: WinSCP..WinSCP: should have a URI property that is a string" time="0.1997" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Miniconda" executed="True" result="Success" success="True" time="111.383" asserts="0" description="Get-EvergreenApp Miniconda">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda." executed="True" result="Success" success="True" time="1.5061" asserts="0" description="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda.">
                <results>
                  <test-case description="Miniconda: should return something" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda..Miniconda: should return something" time="0.185" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Miniconda: should return the expected output type" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda..Miniconda: should return the expected output type" time="0.2418" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Miniconda: should have a Version property that is a string" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda..Miniconda: should have a Version property that is a string" time="0.3042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Miniconda: should have a valid version number" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda..Miniconda: should have a valid version number" time="0.2891" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Miniconda: should have a URI property that is a string" name="Get-EvergreenApp Miniconda.Validate Get-EvergreenApp works with: Miniconda..Miniconda: should have a URI property that is a string" time="0.2972" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JamTreeSizeProfessional" executed="True" result="Success" success="True" time="113.4062" asserts="0" description="Get-EvergreenApp JamTreeSizeProfessional">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional." executed="True" result="Success" success="True" time="1.0443" asserts="0" description="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional.">
                <results>
                  <test-case description="JamTreeSizeProfessional: should return something" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional..JamTreeSizeProfessional: should return something" time="0.1663" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeProfessional: should return the expected output type" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional..JamTreeSizeProfessional: should return the expected output type" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeProfessional: should have a Version property that is a string" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional..JamTreeSizeProfessional: should have a Version property that is a string" time="0.1764" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeProfessional: should have a valid version number" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional..JamTreeSizeProfessional: should have a valid version number" time="0.18" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeProfessional: should have a URI property that is a string" name="Get-EvergreenApp JamTreeSizeProfessional.Validate Get-EvergreenApp works with: JamTreeSizeProfessional..JamTreeSizeProfessional: should have a URI property that is a string" time="0.1772" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Audacity" executed="True" result="Success" success="True" time="115.4592" asserts="0" description="Get-EvergreenApp Audacity">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity." executed="True" result="Success" success="True" time="1.142" asserts="0" description="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity.">
                <results>
                  <test-case description="Audacity: should return something" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity..Audacity: should return something" time="0.1856" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Audacity: should return the expected output type" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity..Audacity: should return the expected output type" time="0.1931" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Audacity: should have a Version property that is a string" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity..Audacity: should have a Version property that is a string" time="0.1961" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Audacity: should have a valid version number" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity..Audacity: should have a valid version number" time="0.1976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Audacity: should have a URI property that is a string" name="Get-EvergreenApp Audacity.Validate Get-EvergreenApp works with: Audacity..Audacity: should have a URI property that is a string" time="0.1967" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp 1Password7" executed="True" result="Success" success="True" time="117.0039" asserts="0" description="Get-EvergreenApp 1Password7">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7." executed="True" result="Success" success="True" time="1.1549" asserts="0" description="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7.">
                <results>
                  <test-case description="1Password7: should return something" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7..1Password7: should return something" time="0.1877" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password7: should return the expected output type" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7..1Password7: should return the expected output type" time="0.1897" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password7: should have a Version property that is a string" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7..1Password7: should have a Version property that is a string" time="0.1986" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password7: should have a valid version number" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7..1Password7: should have a valid version number" time="0.1864" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password7: should have a URI property that is a string" name="Get-EvergreenApp 1Password7.Validate Get-EvergreenApp works with: 1Password7..1Password7: should have a URI property that is a string" time="0.1847" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OracleJava8" executed="True" result="Success" success="True" time="118.871" asserts="0" description="Get-EvergreenApp OracleJava8">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8." executed="True" result="Success" success="True" time="1.08" asserts="0" description="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8.">
                <results>
                  <test-case description="OracleJava8: should return something" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8..OracleJava8: should return something" time="0.1589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleJava8: should return the expected output type" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8..OracleJava8: should return the expected output type" time="0.1721" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleJava8: should have a Version property that is a string" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8..OracleJava8: should have a Version property that is a string" time="0.1885" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleJava8: should have a valid version number" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8..OracleJava8: should have a valid version number" time="0.1859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleJava8: should have a URI property that is a string" name="Get-EvergreenApp OracleJava8.Validate Get-EvergreenApp works with: OracleJava8..OracleJava8: should have a URI property that is a string" time="0.1918" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp StefansToolsgregpWin" executed="True" result="Success" success="True" time="120.885" asserts="0" description="Get-EvergreenApp StefansToolsgregpWin">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin." executed="True" result="Success" success="True" time="1.1806" asserts="0" description="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin.">
                <results>
                  <test-case description="StefansToolsgregpWin: should return something" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin..StefansToolsgregpWin: should return something" time="0.1635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="StefansToolsgregpWin: should return the expected output type" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin..StefansToolsgregpWin: should return the expected output type" time="0.1794" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="StefansToolsgregpWin: should have a Version property that is a string" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin..StefansToolsgregpWin: should have a Version property that is a string" time="0.1978" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="StefansToolsgregpWin: should have a valid version number" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin..StefansToolsgregpWin: should have a valid version number" time="0.2325" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="StefansToolsgregpWin: should have a URI property that is a string" name="Get-EvergreenApp StefansToolsgregpWin.Validate Get-EvergreenApp works with: StefansToolsgregpWin..StefansToolsgregpWin: should have a URI property that is a string" time="0.2316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SafeExamBrowser" executed="True" result="Success" success="True" time="123.0417" asserts="0" description="Get-EvergreenApp SafeExamBrowser">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser." executed="True" result="Success" success="True" time="1.3175" asserts="0" description="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser.">
                <results>
                  <test-case description="SafeExamBrowser: should return something" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser..SafeExamBrowser: should return something" time="0.1945" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafeExamBrowser: should return the expected output type" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser..SafeExamBrowser: should return the expected output type" time="0.2106" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafeExamBrowser: should have a Version property that is a string" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser..SafeExamBrowser: should have a Version property that is a string" time="0.2439" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafeExamBrowser: should have a valid version number" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser..SafeExamBrowser: should have a valid version number" time="0.2268" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafeExamBrowser: should have a URI property that is a string" name="Get-EvergreenApp SafeExamBrowser.Validate Get-EvergreenApp works with: SafeExamBrowser..SafeExamBrowser: should have a URI property that is a string" time="0.2388" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareWorkstationPlayer" executed="True" result="Success" success="True" time="125.1923" asserts="0" description="Get-EvergreenApp VMwareWorkstationPlayer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer." executed="True" result="Success" success="True" time="1.037" asserts="0" description="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer.">
                <results>
                  <test-case description="VMwareWorkstationPlayer: should return something" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer: should return something" time="0.2077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPlayer: should return the expected output type" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer: should return the expected output type" time="0.1601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPlayer: should have a Version property that is a string" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer: should have a Version property that is a string" time="0.1639" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPlayer: should have a valid version number" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer: should have a valid version number" time="0.1635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPlayer: should have a URI property that is a string" name="Get-EvergreenApp VMwareWorkstationPlayer.Validate Get-EvergreenApp works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer: should have a URI property that is a string" time="0.1648" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools" executed="True" result="Success" success="True" time="127.293" asserts="0" description="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools." executed="True" result="Success" success="True" time="1.1714" asserts="0" description="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools.">
                <results>
                  <test-case description="MicrosoftAzureFunctionsCoreTools: should return something" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools: should return something" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureFunctionsCoreTools: should return the expected output type" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools: should return the expected output type" time="0.1953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureFunctionsCoreTools: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools: should have a Version property that is a string" time="0.1953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureFunctionsCoreTools: should have a valid version number" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools: should have a valid version number" time="0.2141" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureFunctionsCoreTools: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftAzureFunctionsCoreTools.Validate Get-EvergreenApp works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools: should have a URI property that is a string" time="0.2048" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MattermostDesktop" executed="True" result="Success" success="True" time="129.2216" asserts="0" description="Get-EvergreenApp MattermostDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop." executed="True" result="Success" success="True" time="1.2944" asserts="0" description="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop.">
                <results>
                  <test-case description="MattermostDesktop: should return something" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop..MattermostDesktop: should return something" time="0.166" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MattermostDesktop: should return the expected output type" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop..MattermostDesktop: should return the expected output type" time="0.1991" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MattermostDesktop: should have a Version property that is a string" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop..MattermostDesktop: should have a Version property that is a string" time="0.2405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MattermostDesktop: should have a valid version number" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop..MattermostDesktop: should have a valid version number" time="0.235" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MattermostDesktop: should have a URI property that is a string" name="Get-EvergreenApp MattermostDesktop.Validate Get-EvergreenApp works with: MattermostDesktop..MattermostDesktop: should have a URI property that is a string" time="0.2721" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp BeekeeperStudio" executed="True" result="Success" success="True" time="131.3166" asserts="0" description="Get-EvergreenApp BeekeeperStudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio." executed="True" result="Success" success="True" time="1.1598" asserts="0" description="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio.">
                <results>
                  <test-case description="BeekeeperStudio: should return something" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio..BeekeeperStudio: should return something" time="0.1819" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BeekeeperStudio: should return the expected output type" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio..BeekeeperStudio: should return the expected output type" time="0.1972" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BeekeeperStudio: should have a Version property that is a string" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio..BeekeeperStudio: should have a Version property that is a string" time="0.1955" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BeekeeperStudio: should have a valid version number" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio..BeekeeperStudio: should have a valid version number" time="0.1895" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BeekeeperStudio: should have a URI property that is a string" name="Get-EvergreenApp BeekeeperStudio.Validate Get-EvergreenApp works with: BeekeeperStudio..BeekeeperStudio: should have a URI property that is a string" time="0.2004" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PiriformCCleanerFree" executed="True" result="Success" success="True" time="133.2724" asserts="0" description="Get-EvergreenApp PiriformCCleanerFree">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree." executed="True" result="Success" success="True" time="1.0568" asserts="0" description="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree.">
                <results>
                  <test-case description="PiriformCCleanerFree: should return something" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree..PiriformCCleanerFree: should return something" time="0.166" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PiriformCCleanerFree: should return the expected output type" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree..PiriformCCleanerFree: should return the expected output type" time="0.1699" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PiriformCCleanerFree: should have a Version property that is a string" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree..PiriformCCleanerFree: should have a Version property that is a string" time="0.1894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PiriformCCleanerFree: should have a valid version number" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree..PiriformCCleanerFree: should have a valid version number" time="0.1845" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PiriformCCleanerFree: should have a URI property that is a string" name="Get-EvergreenApp PiriformCCleanerFree.Validate Get-EvergreenApp works with: PiriformCCleanerFree..PiriformCCleanerFree: should have a URI property that is a string" time="0.171" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETFullDiskEncryption" executed="True" result="Success" success="True" time="139.5882" asserts="0" description="Get-EvergreenApp ESETFullDiskEncryption">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption." executed="True" result="Success" success="True" time="4.7439" asserts="0" description="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption.">
                <results>
                  <test-case description="ESETFullDiskEncryption: should return something" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption..ESETFullDiskEncryption: should return something" time="0.1598" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETFullDiskEncryption: should return the expected output type" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption..ESETFullDiskEncryption: should return the expected output type" time="0.6177" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETFullDiskEncryption: should have a Version property that is a string" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption..ESETFullDiskEncryption: should have a Version property that is a string" time="1.2327" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETFullDiskEncryption: should have a valid version number" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption..ESETFullDiskEncryption: should have a valid version number" time="1.2256" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETFullDiskEncryption: should have a URI property that is a string" name="Get-EvergreenApp ESETFullDiskEncryption.Validate Get-EvergreenApp works with: ESETFullDiskEncryption..ESETFullDiskEncryption: should have a URI property that is a string" time="1.3349" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftTeams" executed="True" result="Success" success="True" time="152.0502" asserts="0" description="Get-EvergreenApp MicrosoftTeams">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams." executed="True" result="Success" success="True" time="5.4472" asserts="0" description="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams.">
                <results>
                  <test-case description="MicrosoftTeams: should return something" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams..MicrosoftTeams: should return something" time="0.1678" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTeams: should return the expected output type" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams..MicrosoftTeams: should return the expected output type" time="0.7143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTeams: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams..MicrosoftTeams: should have a Version property that is a string" time="1.4588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTeams: should have a valid version number" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams..MicrosoftTeams: should have a valid version number" time="1.4671" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTeams: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftTeams.Validate Get-EvergreenApp works with: MicrosoftTeams..MicrosoftTeams: should have a URI property that is a string" time="1.468" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TelegramDesktop" executed="True" result="Success" success="True" time="154.0418" asserts="0" description="Get-EvergreenApp TelegramDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop." executed="True" result="Success" success="True" time="1.1214" asserts="0" description="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop.">
                <results>
                  <test-case description="TelegramDesktop: should return something" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop..TelegramDesktop: should return something" time="0.1949" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelegramDesktop: should return the expected output type" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop..TelegramDesktop: should return the expected output type" time="0.1776" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelegramDesktop: should have a Version property that is a string" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop..TelegramDesktop: should have a Version property that is a string" time="0.192" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelegramDesktop: should have a valid version number" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop..TelegramDesktop: should have a valid version number" time="0.1772" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelegramDesktop: should have a URI property that is a string" name="Get-EvergreenApp TelegramDesktop.Validate Get-EvergreenApp works with: TelegramDesktop..TelegramDesktop: should have a URI property that is a string" time="0.1952" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareOSOptimizationTool" executed="True" result="Success" success="True" time="156.3068" asserts="0" description="Get-EvergreenApp VMwareOSOptimizationTool">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool." executed="True" result="Success" success="True" time="1.1922" asserts="0" description="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool.">
                <results>
                  <test-case description="VMwareOSOptimizationTool: should return something" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool: should return something" time="0.1793" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareOSOptimizationTool: should return the expected output type" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool: should return the expected output type" time="0.1834" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareOSOptimizationTool: should have a Version property that is a string" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool: should have a Version property that is a string" time="0.2054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareOSOptimizationTool: should have a valid version number" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool: should have a valid version number" time="0.203" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareOSOptimizationTool: should have a URI property that is a string" name="Get-EvergreenApp VMwareOSOptimizationTool.Validate Get-EvergreenApp works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool: should have a URI property that is a string" time="0.2215" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VeraCrypt" executed="True" result="Success" success="True" time="158.4841" asserts="0" description="Get-EvergreenApp VeraCrypt">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt." executed="True" result="Success" success="True" time="1.3195" asserts="0" description="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt.">
                <results>
                  <test-case description="VeraCrypt: should return something" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt..VeraCrypt: should return something" time="0.1835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VeraCrypt: should return the expected output type" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt..VeraCrypt: should return the expected output type" time="0.196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VeraCrypt: should have a Version property that is a string" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt..VeraCrypt: should have a Version property that is a string" time="0.2384" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VeraCrypt: should have a valid version number" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt..VeraCrypt: should have a valid version number" time="0.2488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VeraCrypt: should have a URI property that is a string" name="Get-EvergreenApp VeraCrypt.Validate Get-EvergreenApp works with: VeraCrypt..VeraCrypt: should have a URI property that is a string" time="0.2459" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdgeDriver" executed="True" result="Success" success="True" time="161.3583" asserts="0" description="Get-EvergreenApp MicrosoftEdgeDriver">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver." executed="True" result="Success" success="True" time="1.9094" asserts="0" description="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver.">
                <results>
                  <test-case description="MicrosoftEdgeDriver: should return something" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver: should return something" time="0.1749" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeDriver: should return the expected output type" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver: should return the expected output type" time="0.3165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeDriver: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver: should have a Version property that is a string" time="0.4129" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeDriver: should have a valid version number" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver: should have a valid version number" time="0.3938" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeDriver: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftEdgeDriver.Validate Get-EvergreenApp works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver: should have a URI property that is a string" time="0.4271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Tower" executed="True" result="Success" success="True" time="163.4135" asserts="0" description="Get-EvergreenApp Tower">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower." executed="True" result="Success" success="True" time="1.3365" asserts="0" description="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower.">
                <results>
                  <test-case description="Tower: should return something" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower..Tower: should return something" time="0.1714" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Tower: should return the expected output type" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower..Tower: should return the expected output type" time="0.1976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Tower: should have a Version property that is a string" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower..Tower: should have a Version property that is a string" time="0.2837" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Tower: should have a valid version number" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower..Tower: should have a valid version number" time="0.2499" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Tower: should have a URI property that is a string" name="Get-EvergreenApp Tower.Validate Get-EvergreenApp works with: Tower..Tower: should have a URI property that is a string" time="0.2501" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpTerraform" executed="True" result="Success" success="True" time="165.3876" asserts="0" description="Get-EvergreenApp HashicorpTerraform">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform." executed="True" result="Success" success="True" time="1.1738" asserts="0" description="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform.">
                <results>
                  <test-case description="HashicorpTerraform: should return something" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform..HashicorpTerraform: should return something" time="0.1754" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpTerraform: should return the expected output type" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform..HashicorpTerraform: should return the expected output type" time="0.1642" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpTerraform: should have a Version property that is a string" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform..HashicorpTerraform: should have a Version property that is a string" time="0.214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpTerraform: should have a valid version number" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform..HashicorpTerraform: should have a valid version number" time="0.211" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpTerraform: should have a URI property that is a string" name="Get-EvergreenApp HashicorpTerraform.Validate Get-EvergreenApp works with: HashicorpTerraform..HashicorpTerraform: should have a URI property that is a string" time="0.1955" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin17" executed="True" result="Success" success="True" time="167.6761" asserts="0" description="Get-EvergreenApp AdoptiumTemurin17">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17." executed="True" result="Success" success="True" time="1.4402" asserts="0" description="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17.">
                <results>
                  <test-case description="AdoptiumTemurin17: should return something" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17..AdoptiumTemurin17: should return something" time="0.2029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin17: should return the expected output type" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17..AdoptiumTemurin17: should return the expected output type" time="0.2445" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin17: should have a Version property that is a string" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17..AdoptiumTemurin17: should have a Version property that is a string" time="0.2832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin17: should have a valid version number" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17..AdoptiumTemurin17: should have a valid version number" time="0.2702" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin17: should have a URI property that is a string" name="Get-EvergreenApp AdoptiumTemurin17.Validate Get-EvergreenApp works with: AdoptiumTemurin17..AdoptiumTemurin17: should have a URI property that is a string" time="0.2551" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftOneDrive" executed="True" result="Success" success="True" time="171.3249" asserts="0" description="Get-EvergreenApp MicrosoftOneDrive">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive." executed="True" result="Success" success="True" time="2.4867" asserts="0" description="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive.">
                <results>
                  <test-case description="MicrosoftOneDrive: should return something" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive..MicrosoftOneDrive: should return something" time="0.1706" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOneDrive: should return the expected output type" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive..MicrosoftOneDrive: should return the expected output type" time="0.3298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOneDrive: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive..MicrosoftOneDrive: should have a Version property that is a string" time="0.6614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOneDrive: should have a valid version number" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive..MicrosoftOneDrive: should have a valid version number" time="0.5714" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOneDrive: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftOneDrive.Validate Get-EvergreenApp works with: MicrosoftOneDrive..MicrosoftOneDrive: should have a URI property that is a string" time="0.5558" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp dbeaver" executed="True" result="Success" success="True" time="173.2045" asserts="0" description="Get-EvergreenApp dbeaver">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver." executed="True" result="Success" success="True" time="1.0472" asserts="0" description="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver.">
                <results>
                  <test-case description="dbeaver: should return something" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver..dbeaver: should return something" time="0.168" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dbeaver: should return the expected output type" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver..dbeaver: should return the expected output type" time="0.1674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dbeaver: should have a Version property that is a string" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver..dbeaver: should have a Version property that is a string" time="0.1633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dbeaver: should have a valid version number" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver..dbeaver: should have a valid version number" time="0.1846" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dbeaver: should have a URI property that is a string" name="Get-EvergreenApp dbeaver.Validate Get-EvergreenApp works with: dbeaver..dbeaver: should have a URI property that is a string" time="0.1756" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefInfraClient" executed="True" result="Success" success="True" time="181.1589" asserts="0" description="Get-EvergreenApp ProgressChefInfraClient">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient." executed="True" result="Success" success="True" time="2.7115" asserts="0" description="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient.">
                <results>
                  <test-case description="ProgressChefInfraClient: should return something" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient..ProgressChefInfraClient: should return something" time="0.1926" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInfraClient: should return the expected output type" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient..ProgressChefInfraClient: should return the expected output type" time="0.3725" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInfraClient: should have a Version property that is a string" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient..ProgressChefInfraClient: should have a Version property that is a string" time="0.6306" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInfraClient: should have a valid version number" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient..ProgressChefInfraClient: should have a valid version number" time="0.6538" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInfraClient: should have a URI property that is a string" name="Get-EvergreenApp ProgressChefInfraClient.Validate Get-EvergreenApp works with: ProgressChefInfraClient..ProgressChefInfraClient: should have a URI property that is a string" time="0.6551" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ProjectLibre" executed="True" result="Success" success="True" time="182.8215" asserts="0" description="Get-EvergreenApp ProjectLibre">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre." executed="True" result="Success" success="True" time="0.9766" asserts="0" description="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre.">
                <results>
                  <test-case description="ProjectLibre: should return something" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre..ProjectLibre: should return something" time="0.1556" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProjectLibre: should return the expected output type" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre..ProjectLibre: should return the expected output type" time="0.1665" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProjectLibre: should have a Version property that is a string" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre..ProjectLibre: should have a Version property that is a string" time="0.1609" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProjectLibre: should have a valid version number" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre..ProjectLibre: should have a valid version number" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProjectLibre: should have a URI property that is a string" name="Get-EvergreenApp ProjectLibre.Validate Get-EvergreenApp works with: ProjectLibre..ProjectLibre: should have a URI property that is a string" time="0.1545" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp RStudio" executed="True" result="Success" success="True" time="186.2237" asserts="0" description="Get-EvergreenApp RStudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio." executed="True" result="Success" success="True" time="2.3771" asserts="0" description="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio.">
                <results>
                  <test-case description="RStudio: should return something" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio..RStudio: should return something" time="0.1754" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RStudio: should return the expected output type" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio..RStudio: should return the expected output type" time="0.3364" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RStudio: should have a Version property that is a string" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio..RStudio: should have a Version property that is a string" time="0.605" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RStudio: should have a valid version number" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio..RStudio: should have a valid version number" time="0.5185" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RStudio: should have a URI property that is a string" name="Get-EvergreenApp RStudio.Validate Get-EvergreenApp works with: RStudio..RStudio: should have a URI property that is a string" time="0.5632" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SafingPortmaster" executed="True" result="Success" success="True" time="188.0821" asserts="0" description="Get-EvergreenApp SafingPortmaster">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster." executed="True" result="Success" success="True" time="1.0721" asserts="0" description="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster.">
                <results>
                  <test-case description="SafingPortmaster: should return something" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster..SafingPortmaster: should return something" time="0.1682" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafingPortmaster: should return the expected output type" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster..SafingPortmaster: should return the expected output type" time="0.1712" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafingPortmaster: should have a Version property that is a string" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster..SafingPortmaster: should have a Version property that is a string" time="0.2049" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafingPortmaster: should have a valid version number" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster..SafingPortmaster: should have a valid version number" time="0.1732" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafingPortmaster: should have a URI property that is a string" name="Get-EvergreenApp SafingPortmaster.Validate Get-EvergreenApp works with: SafingPortmaster..SafingPortmaster: should have a URI property that is a string" time="0.1593" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SumatraPDFReader" executed="True" result="Success" success="True" time="189.9193" asserts="0" description="Get-EvergreenApp SumatraPDFReader">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader." executed="True" result="Success" success="True" time="1.1518" asserts="0" description="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader.">
                <results>
                  <test-case description="SumatraPDFReader: should return something" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader..SumatraPDFReader: should return something" time="0.1552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SumatraPDFReader: should return the expected output type" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader..SumatraPDFReader: should return the expected output type" time="0.1728" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SumatraPDFReader: should have a Version property that is a string" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader..SumatraPDFReader: should have a Version property that is a string" time="0.2214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SumatraPDFReader: should have a valid version number" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader..SumatraPDFReader: should have a valid version number" time="0.2152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SumatraPDFReader: should have a URI property that is a string" name="Get-EvergreenApp SumatraPDFReader.Validate Get-EvergreenApp works with: SumatraPDFReader..SumatraPDFReader: should have a URI property that is a string" time="0.1945" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp LogMeInGoToMeeting" executed="True" result="Success" success="True" time="191.9683" asserts="0" description="Get-EvergreenApp LogMeInGoToMeeting">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting." executed="True" result="Success" success="True" time="1.3402" asserts="0" description="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting.">
                <results>
                  <test-case description="LogMeInGoToMeeting: should return something" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting..LogMeInGoToMeeting: should return something" time="0.1776" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToMeeting: should return the expected output type" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting..LogMeInGoToMeeting: should return the expected output type" time="0.2285" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToMeeting: should have a Version property that is a string" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting..LogMeInGoToMeeting: should have a Version property that is a string" time="0.2413" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToMeeting: should have a valid version number" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting..LogMeInGoToMeeting: should have a valid version number" time="0.2714" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToMeeting: should have a URI property that is a string" name="Get-EvergreenApp LogMeInGoToMeeting.Validate Get-EvergreenApp works with: LogMeInGoToMeeting..LogMeInGoToMeeting: should have a URI property that is a string" time="0.2395" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Fork" executed="True" result="Success" success="True" time="193.451" asserts="0" description="Get-EvergreenApp Fork">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork." executed="True" result="Success" success="True" time="1.042" asserts="0" description="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork.">
                <results>
                  <test-case description="Fork: should return something" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork..Fork: should return something" time="0.1688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fork: should return the expected output type" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork..Fork: should return the expected output type" time="0.1878" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fork: should have a Version property that is a string" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork..Fork: should have a Version property that is a string" time="0.1759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fork: should have a valid version number" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork..Fork: should have a valid version number" time="0.1657" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fork: should have a URI property that is a string" name="Get-EvergreenApp Fork.Validate Get-EvergreenApp works with: Fork..Fork: should have a URI property that is a string" time="0.1621" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AppVentix" executed="True" result="Success" success="True" time="195.6131" asserts="0" description="Get-EvergreenApp AppVentix">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix." executed="True" result="Success" success="True" time="1.033" asserts="0" description="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix.">
                <results>
                  <test-case description="AppVentix: should return something" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix..AppVentix: should return something" time="0.1655" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AppVentix: should return the expected output type" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix..AppVentix: should return the expected output type" time="0.1596" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AppVentix: should have a Version property that is a string" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix..AppVentix: should have a Version property that is a string" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AppVentix: should have a valid version number" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix..AppVentix: should have a valid version number" time="0.1747" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AppVentix: should have a URI property that is a string" name="Get-EvergreenApp AppVentix.Validate Get-EvergreenApp works with: AppVentix..AppVentix: should have a URI property that is a string" time="0.1691" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp McNeelRhino" executed="True" result="Success" success="True" time="197.5721" asserts="0" description="Get-EvergreenApp McNeelRhino">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino." executed="True" result="Success" success="True" time="1.2167" asserts="0" description="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino.">
                <results>
                  <test-case description="McNeelRhino: should return something" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino..McNeelRhino: should return something" time="0.1779" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="McNeelRhino: should return the expected output type" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino..McNeelRhino: should return the expected output type" time="0.1743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="McNeelRhino: should have a Version property that is a string" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino..McNeelRhino: should have a Version property that is a string" time="0.2032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="McNeelRhino: should have a valid version number" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino..McNeelRhino: should have a valid version number" time="0.2132" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="McNeelRhino: should have a URI property that is a string" name="Get-EvergreenApp McNeelRhino.Validate Get-EvergreenApp works with: McNeelRhino..McNeelRhino: should have a URI property that is a string" time="0.2049" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PSFPython" executed="True" result="Success" success="True" time="200.6984" asserts="0" description="Get-EvergreenApp PSFPython">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython." executed="True" result="Success" success="True" time="1.3646" asserts="0" description="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython.">
                <results>
                  <test-case description="PSFPython: should return something" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython..PSFPython: should return something" time="0.1664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSFPython: should return the expected output type" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython..PSFPython: should return the expected output type" time="0.1939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSFPython: should have a Version property that is a string" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython..PSFPython: should have a Version property that is a string" time="0.3038" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSFPython: should have a valid version number" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython..PSFPython: should have a valid version number" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSFPython: should have a URI property that is a string" name="Get-EvergreenApp PSFPython.Validate Get-EvergreenApp works with: PSFPython..PSFPython: should have a URI property that is a string" time="0.2612" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Pandoc" executed="True" result="Success" success="True" time="202.5362" asserts="0" description="Get-EvergreenApp Pandoc">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc." executed="True" result="Success" success="True" time="1.0341" asserts="0" description="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc.">
                <results>
                  <test-case description="Pandoc: should return something" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc..Pandoc: should return something" time="0.173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Pandoc: should return the expected output type" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc..Pandoc: should return the expected output type" time="0.1715" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Pandoc: should have a Version property that is a string" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc..Pandoc: should have a Version property that is a string" time="0.1744" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Pandoc: should have a valid version number" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc..Pandoc: should have a valid version number" time="0.1639" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Pandoc: should have a URI property that is a string" name="Get-EvergreenApp Pandoc.Validate Get-EvergreenApp works with: Pandoc..Pandoc: should have a URI property that is a string" time="0.1605" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JetBrainsPyCharm" executed="True" result="Success" success="True" time="205.2946" asserts="0" description="Get-EvergreenApp JetBrainsPyCharm">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm." executed="True" result="Success" success="True" time="1.3247" asserts="0" description="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm.">
                <results>
                  <test-case description="JetBrainsPyCharm: should return something" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm..JetBrainsPyCharm: should return something" time="0.1723" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsPyCharm: should return the expected output type" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm..JetBrainsPyCharm: should return the expected output type" time="0.2091" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsPyCharm: should have a Version property that is a string" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm..JetBrainsPyCharm: should have a Version property that is a string" time="0.2418" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsPyCharm: should have a valid version number" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm..JetBrainsPyCharm: should have a valid version number" time="0.2495" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsPyCharm: should have a URI property that is a string" name="Get-EvergreenApp JetBrainsPyCharm.Validate Get-EvergreenApp works with: JetBrainsPyCharm..JetBrainsPyCharm: should have a URI property that is a string" time="0.2528" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK8" executed="True" result="Success" success="True" time="207.988" asserts="0" description="Get-EvergreenApp AdoptOpenJDK8">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8." executed="True" result="Success" success="True" time="1.2484" asserts="0" description="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8.">
                <results>
                  <test-case description="AdoptOpenJDK8: should return something" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8..AdoptOpenJDK8: should return something" time="0.1556" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK8: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8..AdoptOpenJDK8: should return the expected output type" time="0.1942" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK8: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8..AdoptOpenJDK8: should have a Version property that is a string" time="0.2351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK8: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8..AdoptOpenJDK8: should have a valid version number" time="0.238" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK8: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDK8.Validate Get-EvergreenApp works with: AdoptOpenJDK8..AdoptOpenJDK8: should have a URI property that is a string" time="0.2521" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JeremyMainGPUProfiler" executed="True" result="Success" success="True" time="209.8388" asserts="0" description="Get-EvergreenApp JeremyMainGPUProfiler">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler." executed="True" result="Success" success="True" time="1.0374" asserts="0" description="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler.">
                <results>
                  <test-case description="JeremyMainGPUProfiler: should return something" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler: should return something" time="0.1676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JeremyMainGPUProfiler: should return the expected output type" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler: should return the expected output type" time="0.1738" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JeremyMainGPUProfiler: should have a Version property that is a string" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler: should have a Version property that is a string" time="0.1726" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JeremyMainGPUProfiler: should have a valid version number" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler: should have a valid version number" time="0.1657" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JeremyMainGPUProfiler: should have a URI property that is a string" name="Get-EvergreenApp JeremyMainGPUProfiler.Validate Get-EvergreenApp works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler: should have a URI property that is a string" time="0.1738" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GitHubRelease" executed="True" result="Success" success="True" time="212.6495" asserts="0" description="Get-EvergreenApp GitHubRelease">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease." executed="True" result="Success" success="True" time="1.4385" asserts="0" description="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease.">
                <results>
                  <test-case description="GitHubRelease: should return something" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease..GitHubRelease: should return something" time="0.1767" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubRelease: should return the expected output type" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease..GitHubRelease: should return the expected output type" time="0.2081" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubRelease: should have a Version property that is a string" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease..GitHubRelease: should have a Version property that is a string" time="0.2776" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubRelease: should have a valid version number" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease..GitHubRelease: should have a valid version number" time="0.2964" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubRelease: should have a URI property that is a string" name="Get-EvergreenApp GitHubRelease.Validate Get-EvergreenApp works with: GitHubRelease..GitHubRelease: should have a URI property that is a string" time="0.3058" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdge" executed="True" result="Success" success="True" time="220.0699" asserts="0" description="Get-EvergreenApp MicrosoftEdge">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge." executed="True" result="Success" success="True" time="2.7448" asserts="0" description="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge.">
                <results>
                  <test-case description="MicrosoftEdge: should return something" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge..MicrosoftEdge: should return something" time="0.1705" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdge: should return the expected output type" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge..MicrosoftEdge: should return the expected output type" time="0.3655" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdge: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge..MicrosoftEdge: should have a Version property that is a string" time="0.6934" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdge: should have a valid version number" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge..MicrosoftEdge: should have a valid version number" time="0.6792" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdge: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftEdge.Validate Get-EvergreenApp works with: MicrosoftEdge..MicrosoftEdge: should have a URI property that is a string" time="0.6541" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETPROTECTServer" executed="True" result="Success" success="True" time="221.8113" asserts="0" description="Get-EvergreenApp ESETPROTECTServer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer." executed="True" result="Success" success="True" time="1.0018" asserts="0" description="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer.">
                <results>
                  <test-case description="ESETPROTECTServer: should return something" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer..ESETPROTECTServer: should return something" time="0.1583" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETPROTECTServer: should return the expected output type" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer..ESETPROTECTServer: should return the expected output type" time="0.1672" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETPROTECTServer: should have a Version property that is a string" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer..ESETPROTECTServer: should have a Version property that is a string" time="0.1633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETPROTECTServer: should have a valid version number" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer..ESETPROTECTServer: should have a valid version number" time="0.1708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETPROTECTServer: should have a URI property that is a string" name="Get-EvergreenApp ESETPROTECTServer.Validate Get-EvergreenApp works with: ESETPROTECTServer..ESETPROTECTServer: should have a URI property that is a string" time="0.1795" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp BlenderLauncher" executed="True" result="Success" success="True" time="223.6742" asserts="0" description="Get-EvergreenApp BlenderLauncher">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher." executed="True" result="Success" success="True" time="1.0514" asserts="0" description="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher.">
                <results>
                  <test-case description="BlenderLauncher: should return something" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher..BlenderLauncher: should return something" time="0.1581" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlenderLauncher: should return the expected output type" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher..BlenderLauncher: should return the expected output type" time="0.1674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlenderLauncher: should have a Version property that is a string" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher..BlenderLauncher: should have a Version property that is a string" time="0.1886" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlenderLauncher: should have a valid version number" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher..BlenderLauncher: should have a valid version number" time="0.1833" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlenderLauncher: should have a URI property that is a string" name="Get-EvergreenApp BlenderLauncher.Validate Get-EvergreenApp works with: BlenderLauncher..BlenderLauncher: should have a URI property that is a string" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MiniZincIDE" executed="True" result="Success" success="True" time="225.4877" asserts="0" description="Get-EvergreenApp MiniZincIDE">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE." executed="True" result="Success" success="True" time="1.0096" asserts="0" description="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE.">
                <results>
                  <test-case description="MiniZincIDE: should return something" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE..MiniZincIDE: should return something" time="0.1682" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MiniZincIDE: should return the expected output type" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE..MiniZincIDE: should return the expected output type" time="0.1693" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MiniZincIDE: should have a Version property that is a string" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE..MiniZincIDE: should have a Version property that is a string" time="0.1601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MiniZincIDE: should have a valid version number" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE..MiniZincIDE: should have a valid version number" time="0.1597" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MiniZincIDE: should have a URI property that is a string" name="Get-EvergreenApp MiniZincIDE.Validate Get-EvergreenApp works with: MiniZincIDE..MiniZincIDE: should have a URI property that is a string" time="0.1718" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OctopusTentacle" executed="True" result="Success" success="True" time="227.3327" asserts="0" description="Get-EvergreenApp OctopusTentacle">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle." executed="True" result="Success" success="True" time="1.0256" asserts="0" description="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle.">
                <results>
                  <test-case description="OctopusTentacle: should return something" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle..OctopusTentacle: should return something" time="0.1525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusTentacle: should return the expected output type" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle..OctopusTentacle: should return the expected output type" time="0.1606" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusTentacle: should have a Version property that is a string" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle..OctopusTentacle: should have a Version property that is a string" time="0.1822" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusTentacle: should have a valid version number" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle..OctopusTentacle: should have a valid version number" time="0.174" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusTentacle: should have a URI property that is a string" name="Get-EvergreenApp OctopusTentacle.Validate Get-EvergreenApp works with: OctopusTentacle..OctopusTentacle: should have a URI property that is a string" time="0.1891" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Nomacs" executed="True" result="Success" success="True" time="229.1803" asserts="0" description="Get-EvergreenApp Nomacs">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs." executed="True" result="Success" success="True" time="1.0284" asserts="0" description="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs.">
                <results>
                  <test-case description="Nomacs: should return something" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs..Nomacs: should return something" time="0.1685" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Nomacs: should return the expected output type" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs..Nomacs: should return the expected output type" time="0.1599" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Nomacs: should have a Version property that is a string" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs..Nomacs: should have a Version property that is a string" time="0.1797" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Nomacs: should have a valid version number" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs..Nomacs: should have a valid version number" time="0.1803" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Nomacs: should have a URI property that is a string" name="Get-EvergreenApp Nomacs.Validate Get-EvergreenApp works with: Nomacs..Nomacs: should have a URI property that is a string" time="0.1766" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp KeePassXCTeamKeePassXC" executed="True" result="Success" success="True" time="231.2962" asserts="0" description="Get-EvergreenApp KeePassXCTeamKeePassXC">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC." executed="True" result="Success" success="True" time="1.1311" asserts="0" description="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC.">
                <results>
                  <test-case description="KeePassXCTeamKeePassXC: should return something" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC: should return something" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePassXCTeamKeePassXC: should return the expected output type" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC: should return the expected output type" time="0.1936" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePassXCTeamKeePassXC: should have a Version property that is a string" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC: should have a Version property that is a string" time="0.1977" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePassXCTeamKeePassXC: should have a valid version number" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC: should have a valid version number" time="0.1939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePassXCTeamKeePassXC: should have a URI property that is a string" name="Get-EvergreenApp KeePassXCTeamKeePassXC.Validate Get-EvergreenApp works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC: should have a URI property that is a string" time="0.2018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ConnectionExperienceIndicator" executed="True" result="Success" success="True" time="233.112" asserts="0" description="Get-EvergreenApp ConnectionExperienceIndicator">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator." executed="True" result="Success" success="True" time="1.0049" asserts="0" description="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator.">
                <results>
                  <test-case description="ConnectionExperienceIndicator: should return something" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator: should return something" time="0.1859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ConnectionExperienceIndicator: should return the expected output type" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator: should return the expected output type" time="0.1711" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ConnectionExperienceIndicator: should have a Version property that is a string" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator: should have a Version property that is a string" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ConnectionExperienceIndicator: should have a valid version number" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator: should have a valid version number" time="0.1542" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ConnectionExperienceIndicator: should have a URI property that is a string" name="Get-EvergreenApp ConnectionExperienceIndicator.Validate Get-EvergreenApp works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator: should have a URI property that is a string" time="0.1584" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp CendioThinLinc" executed="True" result="Success" success="True" time="235.0765" asserts="0" description="Get-EvergreenApp CendioThinLinc">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc." executed="True" result="Success" success="True" time="1.0045" asserts="0" description="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc.">
                <results>
                  <test-case description="CendioThinLinc: should return something" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc..CendioThinLinc: should return something" time="0.154" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CendioThinLinc: should return the expected output type" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc..CendioThinLinc: should return the expected output type" time="0.1751" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CendioThinLinc: should have a Version property that is a string" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc..CendioThinLinc: should have a Version property that is a string" time="0.1809" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CendioThinLinc: should have a valid version number" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc..CendioThinLinc: should have a valid version number" time="0.1637" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CendioThinLinc: should have a URI property that is a string" name="Get-EvergreenApp CendioThinLinc.Validate Get-EvergreenApp works with: CendioThinLinc..CendioThinLinc: should have a URI property that is a string" time="0.1559" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareHorizonClient" executed="True" result="Success" success="True" time="237.0083" asserts="0" description="Get-EvergreenApp VMwareHorizonClient">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient." executed="True" result="Success" success="True" time="1.0311" asserts="0" description="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient.">
                <results>
                  <test-case description="VMwareHorizonClient: should return something" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient..VMwareHorizonClient: should return something" time="0.1695" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClient: should return the expected output type" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient..VMwareHorizonClient: should return the expected output type" time="0.1642" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClient: should have a Version property that is a string" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient..VMwareHorizonClient: should have a Version property that is a string" time="0.1772" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClient: should have a valid version number" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient..VMwareHorizonClient: should have a valid version number" time="0.181" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClient: should have a URI property that is a string" name="Get-EvergreenApp VMwareHorizonClient.Validate Get-EvergreenApp works with: VMwareHorizonClient..VMwareHorizonClient: should have a URI property that is a string" time="0.1706" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp KDiff3" executed="True" result="Success" success="True" time="239.0374" asserts="0" description="Get-EvergreenApp KDiff3">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3." executed="True" result="Success" success="True" time="1.1284" asserts="0" description="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3.">
                <results>
                  <test-case description="KDiff3: should return something" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3..KDiff3: should return something" time="0.1764" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KDiff3: should return the expected output type" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3..KDiff3: should return the expected output type" time="0.1659" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KDiff3: should have a Version property that is a string" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3..KDiff3: should have a Version property that is a string" time="0.1922" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KDiff3: should have a valid version number" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3..KDiff3: should have a valid version number" time="0.2027" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KDiff3: should have a URI property that is a string" name="Get-EvergreenApp KDiff3.Validate Get-EvergreenApp works with: KDiff3..KDiff3: should have a URI property that is a string" time="0.1963" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftSsms" executed="True" result="Success" success="True" time="247.0977" asserts="0" description="Get-EvergreenApp MicrosoftSsms">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms." executed="True" result="Success" success="True" time="1.8759" asserts="0" description="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms.">
                <results>
                  <test-case description="MicrosoftSsms: should return something" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms..MicrosoftSsms: should return something" time="0.1591" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftSsms: should return the expected output type" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms..MicrosoftSsms: should return the expected output type" time="0.266" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftSsms: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms..MicrosoftSsms: should have a Version property that is a string" time="0.4079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftSsms: should have a valid version number" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms..MicrosoftSsms: should have a valid version number" time="0.4315" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftSsms: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftSsms.Validate Get-EvergreenApp works with: MicrosoftSsms..MicrosoftSsms: should have a URI property that is a string" time="0.4416" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp mRemoteNG" executed="True" result="Success" success="True" time="248.8968" asserts="0" description="Get-EvergreenApp mRemoteNG">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG." executed="True" result="Success" success="True" time="0.9914" asserts="0" description="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG.">
                <results>
                  <test-case description="mRemoteNG: should return something" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG..mRemoteNG: should return something" time="0.167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="mRemoteNG: should return the expected output type" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG..mRemoteNG: should return the expected output type" time="0.1709" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="mRemoteNG: should have a Version property that is a string" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG..mRemoteNG: should have a Version property that is a string" time="0.1705" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="mRemoteNG: should have a valid version number" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG..mRemoteNG: should have a valid version number" time="0.1547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="mRemoteNG: should have a URI property that is a string" name="Get-EvergreenApp mRemoteNG.Validate Get-EvergreenApp works with: mRemoteNG..mRemoteNG: should have a URI property that is a string" time="0.1571" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatReaderDC" executed="True" result="Success" success="True" time="262.7525" asserts="0" description="Get-EvergreenApp AdobeAcrobatReaderDC">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC." executed="True" result="Success" success="True" time="3.569" asserts="0" description="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC.">
                <results>
                  <test-case description="AdobeAcrobatReaderDC: should return something" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC: should return something" time="0.176" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatReaderDC: should return the expected output type" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC: should return the expected output type" time="0.4908" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatReaderDC: should have a Version property that is a string" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC: should have a Version property that is a string" time="0.8626" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatReaderDC: should have a valid version number" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC: should have a valid version number" time="0.9146" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatReaderDC: should have a URI property that is a string" name="Get-EvergreenApp AdobeAcrobatReaderDC.Validate Get-EvergreenApp works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC: should have a URI property that is a string" time="0.9473" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpNomad" executed="True" result="Success" success="True" time="264.5504" asserts="0" description="Get-EvergreenApp HashicorpNomad">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad." executed="True" result="Success" success="True" time="1.014" asserts="0" description="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad.">
                <results>
                  <test-case description="HashicorpNomad: should return something" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad..HashicorpNomad: should return something" time="0.1492" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpNomad: should return the expected output type" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad..HashicorpNomad: should return the expected output type" time="0.1785" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpNomad: should have a Version property that is a string" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad..HashicorpNomad: should have a Version property that is a string" time="0.1789" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpNomad: should have a valid version number" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad..HashicorpNomad: should have a valid version number" time="0.172" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpNomad: should have a URI property that is a string" name="Get-EvergreenApp HashicorpNomad.Validate Get-EvergreenApp works with: HashicorpNomad..HashicorpNomad: should have a URI property that is a string" time="0.1773" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Gimp" executed="True" result="Success" success="True" time="266.343" asserts="0" description="Get-EvergreenApp Gimp">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp." executed="True" result="Success" success="True" time="1.009" asserts="0" description="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp.">
                <results>
                  <test-case description="Gimp: should return something" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp..Gimp: should return something" time="0.171" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gimp: should return the expected output type" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp..Gimp: should return the expected output type" time="0.1669" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gimp: should have a Version property that is a string" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp..Gimp: should have a Version property that is a string" time="0.1533" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gimp: should have a valid version number" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp..Gimp: should have a valid version number" time="0.1626" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gimp: should have a URI property that is a string" name="Get-EvergreenApp Gimp.Validate Get-EvergreenApp works with: Gimp..Gimp: should have a URI property that is a string" time="0.1718" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ImageGlass" executed="True" result="Success" success="True" time="268.1295" asserts="0" description="Get-EvergreenApp ImageGlass">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass." executed="True" result="Success" success="True" time="1.056" asserts="0" description="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass.">
                <results>
                  <test-case description="ImageGlass: should return something" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass..ImageGlass: should return something" time="0.1654" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageGlass: should return the expected output type" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass..ImageGlass: should return the expected output type" time="0.1706" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageGlass: should have a Version property that is a string" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass..ImageGlass: should have a Version property that is a string" time="0.2042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageGlass: should have a valid version number" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass..ImageGlass: should have a valid version number" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageGlass: should have a URI property that is a string" name="Get-EvergreenApp ImageGlass.Validate Get-EvergreenApp works with: ImageGlass..ImageGlass: should have a URI property that is a string" time="0.1804" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp BISF" executed="True" result="Success" success="True" time="269.794" asserts="0" description="Get-EvergreenApp BISF">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF." executed="True" result="Success" success="True" time="0.9589" asserts="0" description="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF.">
                <results>
                  <test-case description="BISF: should return something" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF..BISF: should return something" time="0.1473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BISF: should return the expected output type" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF..BISF: should return the expected output type" time="0.1475" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BISF: should have a Version property that is a string" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF..BISF: should have a Version property that is a string" time="0.1766" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BISF: should have a valid version number" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF..BISF: should have a valid version number" time="0.1628" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BISF: should have a URI property that is a string" name="Get-EvergreenApp BISF.Validate Get-EvergreenApp works with: BISF..BISF: should have a URI property that is a string" time="0.159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TelerikFiddlerClassic" executed="True" result="Success" success="True" time="271.2474" asserts="0" description="Get-EvergreenApp TelerikFiddlerClassic">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic." executed="True" result="Success" success="True" time="1.0174" asserts="0" description="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic.">
                <results>
                  <test-case description="TelerikFiddlerClassic: should return something" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic..TelerikFiddlerClassic: should return something" time="0.1576" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerClassic: should return the expected output type" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic..TelerikFiddlerClassic: should return the expected output type" time="0.1802" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerClassic: should have a Version property that is a string" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic..TelerikFiddlerClassic: should have a Version property that is a string" time="0.185" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerClassic: should have a valid version number" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic..TelerikFiddlerClassic: should have a valid version number" time="0.1668" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerClassic: should have a URI property that is a string" name="Get-EvergreenApp TelerikFiddlerClassic.Validate Get-EvergreenApp works with: TelerikFiddlerClassic..TelerikFiddlerClassic: should have a URI property that is a string" time="0.159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Wireshark" executed="True" result="Success" success="True" time="273.1476" asserts="0" description="Get-EvergreenApp Wireshark">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark." executed="True" result="Success" success="True" time="1.2742" asserts="0" description="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark.">
                <results>
                  <test-case description="Wireshark: should return something" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark..Wireshark: should return something" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Wireshark: should return the expected output type" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark..Wireshark: should return the expected output type" time="0.19" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Wireshark: should have a Version property that is a string" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark..Wireshark: should have a Version property that is a string" time="0.2359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Wireshark: should have a valid version number" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark..Wireshark: should have a valid version number" time="0.2555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Wireshark: should have a URI property that is a string" name="Get-EvergreenApp Wireshark.Validate Get-EvergreenApp works with: Wireshark..Wireshark: should have a URI property that is a string" time="0.2607" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp BlueJ" executed="True" result="Success" success="True" time="275.1735" asserts="0" description="Get-EvergreenApp BlueJ">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ." executed="True" result="Success" success="True" time="0.9699" asserts="0" description="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ.">
                <results>
                  <test-case description="BlueJ: should return something" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ..BlueJ: should return something" time="0.1558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlueJ: should return the expected output type" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ..BlueJ: should return the expected output type" time="0.1601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlueJ: should have a Version property that is a string" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ..BlueJ: should have a Version property that is a string" time="0.1675" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlueJ: should have a valid version number" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ..BlueJ: should have a valid version number" time="0.1585" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlueJ: should have a URI property that is a string" name="Get-EvergreenApp BlueJ.Validate Get-EvergreenApp works with: BlueJ..BlueJ: should have a URI property that is a string" time="0.1572" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETEndpointAntivirus" executed="True" result="Success" success="True" time="308.3273" asserts="0" description="Get-EvergreenApp ESETEndpointAntivirus">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus." executed="True" result="Success" success="True" time="20.5664" asserts="0" description="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus.">
                <results>
                  <test-case description="ESETEndpointAntivirus: should return something" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus..ESETEndpointAntivirus: should return something" time="0.1772" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointAntivirus: should return the expected output type" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus..ESETEndpointAntivirus: should return the expected output type" time="2.6636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointAntivirus: should have a Version property that is a string" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus..ESETEndpointAntivirus: should have a Version property that is a string" time="6.0514" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointAntivirus: should have a valid version number" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus..ESETEndpointAntivirus: should have a valid version number" time="5.723" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointAntivirus: should have a URI property that is a string" name="Get-EvergreenApp ESETEndpointAntivirus.Validate Get-EvergreenApp works with: ESETEndpointAntivirus..ESETEndpointAntivirus: should have a URI property that is a string" time="5.7743" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin" executed="True" result="Success" success="True" time="310.5759" asserts="0" description="Get-EvergreenApp ZorgmailVeiligVerzendenAddin">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin." executed="True" result="Success" success="True" time="1.1299" asserts="0" description="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin.">
                <results>
                  <test-case description="ZorgmailVeiligVerzendenAddin: should return something" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin: should return something" time="0.148" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ZorgmailVeiligVerzendenAddin: should return the expected output type" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin: should return the expected output type" time="0.1677" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ZorgmailVeiligVerzendenAddin: should have a Version property that is a string" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin: should have a Version property that is a string" time="0.2145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ZorgmailVeiligVerzendenAddin: should have a valid version number" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin: should have a valid version number" time="0.2042" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ZorgmailVeiligVerzendenAddin: should have a URI property that is a string" name="Get-EvergreenApp ZorgmailVeiligVerzendenAddin.Validate Get-EvergreenApp works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin: should have a URI property that is a string" time="0.23" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Win32OpenSSH" executed="True" result="Success" success="True" time="312.4512" asserts="0" description="Get-EvergreenApp Win32OpenSSH">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH." executed="True" result="Success" success="True" time="1.0388" asserts="0" description="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH.">
                <results>
                  <test-case description="Win32OpenSSH: should return something" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH..Win32OpenSSH: should return something" time="0.1457" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Win32OpenSSH: should return the expected output type" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH..Win32OpenSSH: should return the expected output type" time="0.1633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Win32OpenSSH: should have a Version property that is a string" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH..Win32OpenSSH: should have a Version property that is a string" time="0.1894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Win32OpenSSH: should have a valid version number" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH..Win32OpenSSH: should have a valid version number" time="0.1809" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Win32OpenSSH: should have a URI property that is a string" name="Get-EvergreenApp Win32OpenSSH.Validate Get-EvergreenApp works with: Win32OpenSSH..Win32OpenSSH: should have a URI property that is a string" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp 7zip" executed="True" result="Success" success="True" time="314.7043" asserts="0" description="Get-EvergreenApp 7zip">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip." executed="True" result="Success" success="True" time="1.3419" asserts="0" description="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip.">
                <results>
                  <test-case description="7zip: should return something" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip..7zip: should return something" time="0.1555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7zip: should return the expected output type" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip..7zip: should return the expected output type" time="0.2076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7zip: should have a Version property that is a string" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip..7zip: should have a Version property that is a string" time="0.2872" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7zip: should have a valid version number" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip..7zip: should have a valid version number" time="0.2582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7zip: should have a URI property that is a string" name="Get-EvergreenApp 7zip.Validate Get-EvergreenApp works with: 7zip..7zip: should have a URI property that is a string" time="0.2674" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp dnGrep" executed="True" result="Success" success="True" time="316.5393" asserts="0" description="Get-EvergreenApp dnGrep">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep." executed="True" result="Success" success="True" time="1.0699" asserts="0" description="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep.">
                <results>
                  <test-case description="dnGrep: should return something" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep..dnGrep: should return something" time="0.1601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dnGrep: should return the expected output type" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep..dnGrep: should return the expected output type" time="0.18" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dnGrep: should have a Version property that is a string" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep..dnGrep: should have a Version property that is a string" time="0.1816" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dnGrep: should have a valid version number" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep..dnGrep: should have a valid version number" time="0.1816" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dnGrep: should have a URI property that is a string" name="Get-EvergreenApp dnGrep.Validate Get-EvergreenApp works with: dnGrep..dnGrep: should have a URI property that is a string" time="0.1862" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VercelHyper" executed="True" result="Success" success="True" time="318.3917" asserts="0" description="Get-EvergreenApp VercelHyper">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper." executed="True" result="Success" success="True" time="0.9424" asserts="0" description="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper.">
                <results>
                  <test-case description="VercelHyper: should return something" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper..VercelHyper: should return something" time="0.157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VercelHyper: should return the expected output type" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper..VercelHyper: should return the expected output type" time="0.1547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VercelHyper: should have a Version property that is a string" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper..VercelHyper: should have a Version property that is a string" time="0.1546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VercelHyper: should have a valid version number" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper..VercelHyper: should have a valid version number" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VercelHyper: should have a URI property that is a string" name="Get-EvergreenApp VercelHyper.Validate Get-EvergreenApp works with: VercelHyper..VercelHyper: should have a URI property that is a string" time="0.1574" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PuTTY" executed="True" result="Success" success="True" time="320.434" asserts="0" description="Get-EvergreenApp PuTTY">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY." executed="True" result="Success" success="True" time="1.1615" asserts="0" description="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY.">
                <results>
                  <test-case description="PuTTY: should return something" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY..PuTTY: should return something" time="0.179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PuTTY: should return the expected output type" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY..PuTTY: should return the expected output type" time="0.1793" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PuTTY: should have a Version property that is a string" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY..PuTTY: should have a Version property that is a string" time="0.2056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PuTTY: should have a valid version number" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY..PuTTY: should have a valid version number" time="0.2193" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PuTTY: should have a URI property that is a string" name="Get-EvergreenApp PuTTY.Validate Get-EvergreenApp works with: PuTTY..PuTTY: should have a URI property that is a string" time="0.2117" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ImageMagickStudioImageMagick" executed="True" result="Success" success="True" time="322.0117" asserts="0" description="Get-EvergreenApp ImageMagickStudioImageMagick">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick." executed="True" result="Success" success="True" time="0.8999" asserts="0" description="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick.">
                <results>
                  <test-case description="ImageMagickStudioImageMagick: should return something" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick: should return something" time="0.1449" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageMagickStudioImageMagick: should return the expected output type" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick: should return the expected output type" time="0.1472" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageMagickStudioImageMagick: should have a Version property that is a string" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick: should have a Version property that is a string" time="0.1429" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageMagickStudioImageMagick: should have a valid version number" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick: should have a valid version number" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageMagickStudioImageMagick: should have a URI property that is a string" name="Get-EvergreenApp ImageMagickStudioImageMagick.Validate Get-EvergreenApp works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick: should have a URI property that is a string" time="0.1456" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareTools" executed="True" result="Success" success="True" time="323.8158" asserts="0" description="Get-EvergreenApp VMwareTools">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools." executed="True" result="Success" success="True" time="0.9966" asserts="0" description="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools.">
                <results>
                  <test-case description="VMwareTools: should return something" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools..VMwareTools: should return something" time="0.1528" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareTools: should return the expected output type" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools..VMwareTools: should return the expected output type" time="0.1631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareTools: should have a Version property that is a string" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools..VMwareTools: should have a Version property that is a string" time="0.1708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareTools: should have a valid version number" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools..VMwareTools: should have a valid version number" time="0.1722" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareTools: should have a URI property that is a string" name="Get-EvergreenApp VMwareTools.Validate Get-EvergreenApp works with: VMwareTools..VMwareTools: should have a URI property that is a string" time="0.1768" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OnlyOfficeDesktopEditors" executed="True" result="Success" success="True" time="325.8247" asserts="0" description="Get-EvergreenApp OnlyOfficeDesktopEditors">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors." executed="True" result="Success" success="True" time="1.1703" asserts="0" description="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors.">
                <results>
                  <test-case description="OnlyOfficeDesktopEditors: should return something" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors: should return something" time="0.1604" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OnlyOfficeDesktopEditors: should return the expected output type" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors: should return the expected output type" time="0.1856" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OnlyOfficeDesktopEditors: should have a Version property that is a string" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors: should have a Version property that is a string" time="0.2179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OnlyOfficeDesktopEditors: should have a valid version number" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors: should have a valid version number" time="0.2182" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OnlyOfficeDesktopEditors: should have a URI property that is a string" name="Get-EvergreenApp OnlyOfficeDesktopEditors.Validate Get-EvergreenApp works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors: should have a URI property that is a string" time="0.2194" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETSecureAuthentication" executed="True" result="Success" success="True" time="327.3693" asserts="0" description="Get-EvergreenApp ESETSecureAuthentication">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication." executed="True" result="Success" success="True" time="0.9601" asserts="0" description="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication.">
                <results>
                  <test-case description="ESETSecureAuthentication: should return something" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication..ESETSecureAuthentication: should return something" time="0.1687" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETSecureAuthentication: should return the expected output type" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication..ESETSecureAuthentication: should return the expected output type" time="0.1623" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETSecureAuthentication: should have a Version property that is a string" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication..ESETSecureAuthentication: should have a Version property that is a string" time="0.1567" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETSecureAuthentication: should have a valid version number" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication..ESETSecureAuthentication: should have a valid version number" time="0.1537" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETSecureAuthentication: should have a URI property that is a string" name="Get-EvergreenApp ESETSecureAuthentication.Validate Get-EvergreenApp works with: ESETSecureAuthentication..ESETSecureAuthentication: should have a URI property that is a string" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OpenShellMenu" executed="True" result="Success" success="True" time="329.0956" asserts="0" description="Get-EvergreenApp OpenShellMenu">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu." executed="True" result="Success" success="True" time="0.9744" asserts="0" description="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu.">
                <results>
                  <test-case description="OpenShellMenu: should return something" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu..OpenShellMenu: should return something" time="0.1673" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenShellMenu: should return the expected output type" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu..OpenShellMenu: should return the expected output type" time="0.1459" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenShellMenu: should have a Version property that is a string" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu..OpenShellMenu: should have a Version property that is a string" time="0.1573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenShellMenu: should have a valid version number" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu..OpenShellMenu: should have a valid version number" time="0.1553" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenShellMenu: should have a URI property that is a string" name="Get-EvergreenApp OpenShellMenu.Validate Get-EvergreenApp works with: OpenShellMenu..OpenShellMenu: should have a URI property that is a string" time="0.1747" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp DebaucheeBarrier" executed="True" result="Success" success="True" time="330.8209" asserts="0" description="Get-EvergreenApp DebaucheeBarrier">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier." executed="True" result="Success" success="True" time="0.9856" asserts="0" description="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier.">
                <results>
                  <test-case description="DebaucheeBarrier: should return something" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier..DebaucheeBarrier: should return something" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DebaucheeBarrier: should return the expected output type" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier..DebaucheeBarrier: should return the expected output type" time="0.1664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DebaucheeBarrier: should have a Version property that is a string" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier..DebaucheeBarrier: should have a Version property that is a string" time="0.1631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DebaucheeBarrier: should have a valid version number" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier..DebaucheeBarrier: should have a valid version number" time="0.1688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DebaucheeBarrier: should have a URI property that is a string" name="Get-EvergreenApp DebaucheeBarrier.Validate Get-EvergreenApp works with: DebaucheeBarrier..DebaucheeBarrier: should have a URI property that is a string" time="0.1648" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftPowerShell" executed="True" result="Success" success="True" time="335.4108" asserts="0" description="Get-EvergreenApp MicrosoftPowerShell">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell." executed="True" result="Success" success="True" time="1.7006" asserts="0" description="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell.">
                <results>
                  <test-case description="MicrosoftPowerShell: should return something" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell..MicrosoftPowerShell: should return something" time="0.1662" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerShell: should return the expected output type" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell..MicrosoftPowerShell: should return the expected output type" time="0.1963" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerShell: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell..MicrosoftPowerShell: should have a Version property that is a string" time="0.4196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerShell: should have a valid version number" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell..MicrosoftPowerShell: should have a valid version number" time="0.4203" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerShell: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftPowerShell.Validate Get-EvergreenApp works with: MicrosoftPowerShell..MicrosoftPowerShell: should have a URI property that is a string" time="0.3196" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp 1Password" executed="True" result="Success" success="True" time="336.8199" asserts="0" description="Get-EvergreenApp 1Password">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password." executed="True" result="Success" success="True" time="0.9183" asserts="0" description="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password.">
                <results>
                  <test-case description="1Password: should return something" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password..1Password: should return something" time="0.1548" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password: should return the expected output type" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password..1Password: should return the expected output type" time="0.1451" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password: should have a Version property that is a string" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password..1Password: should have a Version property that is a string" time="0.1469" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password: should have a valid version number" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password..1Password: should have a valid version number" time="0.144" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password: should have a URI property that is a string" name="Get-EvergreenApp 1Password.Validate Get-EvergreenApp works with: 1Password..1Password: should have a URI property that is a string" time="0.1735" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp RingCentral" executed="True" result="Success" success="True" time="339.1851" asserts="0" description="Get-EvergreenApp RingCentral">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral." executed="True" result="Success" success="True" time="1.2882" asserts="0" description="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral.">
                <results>
                  <test-case description="RingCentral: should return something" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral..RingCentral: should return something" time="0.1619" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RingCentral: should return the expected output type" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral..RingCentral: should return the expected output type" time="0.183" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RingCentral: should have a Version property that is a string" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral..RingCentral: should have a Version property that is a string" time="0.2776" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RingCentral: should have a valid version number" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral..RingCentral: should have a valid version number" time="0.2629" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RingCentral: should have a URI property that is a string" name="Get-EvergreenApp RingCentral.Validate Get-EvergreenApp works with: RingCentral..RingCentral: should have a URI property that is a string" time="0.2405" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp DoubleCommander" executed="True" result="Success" success="True" time="341.8165" asserts="0" description="Get-EvergreenApp DoubleCommander">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander." executed="True" result="Success" success="True" time="1.3606" asserts="0" description="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander.">
                <results>
                  <test-case description="DoubleCommander: should return something" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander..DoubleCommander: should return something" time="0.1479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DoubleCommander: should return the expected output type" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander..DoubleCommander: should return the expected output type" time="0.2054" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DoubleCommander: should have a Version property that is a string" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander..DoubleCommander: should have a Version property that is a string" time="0.2718" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DoubleCommander: should have a valid version number" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander..DoubleCommander: should have a valid version number" time="0.2814" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DoubleCommander: should have a URI property that is a string" name="Get-EvergreenApp DoubleCommander.Validate Get-EvergreenApp works with: DoubleCommander..DoubleCommander: should have a URI property that is a string" time="0.2901" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp CitrixWorkspaceApp" executed="True" result="Success" success="True" time="343.5981" asserts="0" description="Get-EvergreenApp CitrixWorkspaceApp">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp." executed="True" result="Success" success="True" time="1.287" asserts="0" description="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp.">
                <results>
                  <test-case description="CitrixWorkspaceApp: should return something" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp..CitrixWorkspaceApp: should return something" time="0.1907" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixWorkspaceApp: should return the expected output type" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp..CitrixWorkspaceApp: should return the expected output type" time="0.2022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixWorkspaceApp: should have a Version property that is a string" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp..CitrixWorkspaceApp: should have a Version property that is a string" time="0.2438" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixWorkspaceApp: should have a valid version number" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp..CitrixWorkspaceApp: should have a valid version number" time="0.2371" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixWorkspaceApp: should have a URI property that is a string" name="Get-EvergreenApp CitrixWorkspaceApp.Validate Get-EvergreenApp works with: CitrixWorkspaceApp..CitrixWorkspaceApp: should have a URI property that is a string" time="0.2389" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Scratch" executed="True" result="Success" success="True" time="344.9761" asserts="0" description="Get-EvergreenApp Scratch">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch." executed="True" result="Success" success="True" time="0.9591" asserts="0" description="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch.">
                <results>
                  <test-case description="Scratch: should return something" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch..Scratch: should return something" time="0.1573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Scratch: should return the expected output type" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch..Scratch: should return the expected output type" time="0.1535" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Scratch: should have a Version property that is a string" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch..Scratch: should have a Version property that is a string" time="0.1478" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Scratch: should have a valid version number" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch..Scratch: should have a valid version number" time="0.1644" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Scratch: should have a URI property that is a string" name="Get-EvergreenApp Scratch.Validate Get-EvergreenApp works with: Scratch..Scratch: should have a URI property that is a string" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin16" executed="True" result="Success" success="True" time="346.5702" asserts="0" description="Get-EvergreenApp AdoptiumTemurin16">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16." executed="True" result="Success" success="True" time="1.0701" asserts="0" description="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16.">
                <results>
                  <test-case description="AdoptiumTemurin16: should return something" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16..AdoptiumTemurin16: should return something" time="0.1645" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin16: should return the expected output type" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16..AdoptiumTemurin16: should return the expected output type" time="0.1658" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin16: should have a Version property that is a string" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16..AdoptiumTemurin16: should have a Version property that is a string" time="0.1844" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin16: should have a valid version number" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16..AdoptiumTemurin16: should have a valid version number" time="0.1774" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin16: should have a URI property that is a string" name="Get-EvergreenApp AdoptiumTemurin16.Validate Get-EvergreenApp works with: AdoptiumTemurin16..AdoptiumTemurin16: should have a URI property that is a string" time="0.1935" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VideoLanVlcPlayer" executed="True" result="Success" success="True" time="349.5298" asserts="0" description="Get-EvergreenApp VideoLanVlcPlayer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer." executed="True" result="Success" success="True" time="1.2928" asserts="0" description="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer.">
                <results>
                  <test-case description="VideoLanVlcPlayer: should return something" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer..VideoLanVlcPlayer: should return something" time="0.1521" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VideoLanVlcPlayer: should return the expected output type" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer..VideoLanVlcPlayer: should return the expected output type" time="0.1946" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VideoLanVlcPlayer: should have a Version property that is a string" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer..VideoLanVlcPlayer: should have a Version property that is a string" time="0.2575" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VideoLanVlcPlayer: should have a valid version number" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer..VideoLanVlcPlayer: should have a valid version number" time="0.2564" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VideoLanVlcPlayer: should have a URI property that is a string" name="Get-EvergreenApp VideoLanVlcPlayer.Validate Get-EvergreenApp works with: VideoLanVlcPlayer..VideoLanVlcPlayer: should have a URI property that is a string" time="0.2599" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GhislerTotalCommander" executed="True" result="Success" success="True" time="350.8365" asserts="0" description="Get-EvergreenApp GhislerTotalCommander">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander." executed="True" result="Success" success="True" time="0.9643" asserts="0" description="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander.">
                <results>
                  <test-case description="GhislerTotalCommander: should return something" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander..GhislerTotalCommander: should return something" time="0.1422" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GhislerTotalCommander: should return the expected output type" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander..GhislerTotalCommander: should return the expected output type" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GhislerTotalCommander: should have a Version property that is a string" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander..GhislerTotalCommander: should have a Version property that is a string" time="0.1703" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GhislerTotalCommander: should have a valid version number" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander..GhislerTotalCommander: should have a valid version number" time="0.1631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GhislerTotalCommander: should have a URI property that is a string" name="Get-EvergreenApp GhislerTotalCommander.Validate Get-EvergreenApp works with: GhislerTotalCommander..GhislerTotalCommander: should have a URI property that is a string" time="0.1807" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OpenLens" executed="True" result="Success" success="True" time="352.699" asserts="0" description="Get-EvergreenApp OpenLens">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens." executed="True" result="Success" success="True" time="0.9588" asserts="0" description="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens.">
                <results>
                  <test-case description="OpenLens: should return something" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens..OpenLens: should return something" time="0.1606" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenLens: should return the expected output type" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens..OpenLens: should return the expected output type" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenLens: should have a Version property that is a string" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens..OpenLens: should have a Version property that is a string" time="0.1484" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenLens: should have a valid version number" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens..OpenLens: should have a valid version number" time="0.1458" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenLens: should have a URI property that is a string" name="Get-EvergreenApp OpenLens.Validate Get-EvergreenApp works with: OpenLens..OpenLens: should have a URI property that is a string" time="0.1788" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp CodelerityApacheNetBeans" executed="True" result="Success" success="True" time="354.4445" asserts="0" description="Get-EvergreenApp CodelerityApacheNetBeans">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans." executed="True" result="Success" success="True" time="0.9339" asserts="0" description="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans.">
                <results>
                  <test-case description="CodelerityApacheNetBeans: should return something" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans: should return something" time="0.1457" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CodelerityApacheNetBeans: should return the expected output type" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans: should return the expected output type" time="0.1457" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CodelerityApacheNetBeans: should have a Version property that is a string" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans: should have a Version property that is a string" time="0.1518" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CodelerityApacheNetBeans: should have a valid version number" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans: should have a valid version number" time="0.164" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CodelerityApacheNetBeans: should have a URI property that is a string" name="Get-EvergreenApp CodelerityApacheNetBeans.Validate Get-EvergreenApp works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans: should have a URI property that is a string" time="0.1686" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp NETworkManager" executed="True" result="Success" success="True" time="356.1744" asserts="0" description="Get-EvergreenApp NETworkManager">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager." executed="True" result="Success" success="True" time="0.958" asserts="0" description="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager.">
                <results>
                  <test-case description="NETworkManager: should return something" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager..NETworkManager: should return something" time="0.1554" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NETworkManager: should return the expected output type" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager..NETworkManager: should return the expected output type" time="0.1567" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NETworkManager: should have a Version property that is a string" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager..NETworkManager: should have a Version property that is a string" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NETworkManager: should have a valid version number" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager..NETworkManager: should have a valid version number" time="0.1664" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NETworkManager: should have a URI property that is a string" name="Get-EvergreenApp NETworkManager.Validate Get-EvergreenApp works with: NETworkManager..NETworkManager: should have a URI property that is a string" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp YubicoAuthenticator" executed="True" result="Success" success="True" time="359.5475" asserts="0" description="Get-EvergreenApp YubicoAuthenticator">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator." executed="True" result="Success" success="True" time="0.9193" asserts="0" description="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator.">
                <results>
                  <test-case description="YubicoAuthenticator: should return something" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator..YubicoAuthenticator: should return something" time="0.1551" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="YubicoAuthenticator: should return the expected output type" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator..YubicoAuthenticator: should return the expected output type" time="0.1625" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="YubicoAuthenticator: should have a Version property that is a string" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator..YubicoAuthenticator: should have a Version property that is a string" time="0.1449" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="YubicoAuthenticator: should have a valid version number" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator..YubicoAuthenticator: should have a valid version number" time="0.1415" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="YubicoAuthenticator: should have a URI property that is a string" name="Get-EvergreenApp YubicoAuthenticator.Validate Get-EvergreenApp works with: YubicoAuthenticator..YubicoAuthenticator: should have a URI property that is a string" time="0.1459" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Notable" executed="True" result="Success" success="True" time="361.3478" asserts="0" description="Get-EvergreenApp Notable">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable." executed="True" result="Success" success="True" time="0.9282" asserts="0" description="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable.">
                <results>
                  <test-case description="Notable: should return something" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable..Notable: should return something" time="0.1496" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Notable: should return the expected output type" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable..Notable: should return the expected output type" time="0.1546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Notable: should have a Version property that is a string" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable..Notable: should have a Version property that is a string" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Notable: should have a valid version number" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable..Notable: should have a valid version number" time="0.1498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Notable: should have a URI property that is a string" name="Get-EvergreenApp Notable.Validate Get-EvergreenApp works with: Notable..Notable: should have a URI property that is a string" time="0.155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftVisualStudioCode" executed="True" result="Success" success="True" time="367.0657" asserts="0" description="Get-EvergreenApp MicrosoftVisualStudioCode">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode." executed="True" result="Success" success="True" time="1.7558" asserts="0" description="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode.">
                <results>
                  <test-case description="MicrosoftVisualStudioCode: should return something" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode: should return something" time="0.147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudioCode: should return the expected output type" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode: should return the expected output type" time="0.2488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudioCode: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode: should have a Version property that is a string" time="0.4084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudioCode: should have a valid version number" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode: should have a valid version number" time="0.3952" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudioCode: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftVisualStudioCode.Validate Get-EvergreenApp works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode: should have a URI property that is a string" time="0.4035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin11" executed="True" result="Success" success="True" time="368.778" asserts="0" description="Get-EvergreenApp AdoptiumTemurin11">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11." executed="True" result="Success" success="True" time="1.1187" asserts="0" description="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11.">
                <results>
                  <test-case description="AdoptiumTemurin11: should return something" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11..AdoptiumTemurin11: should return something" time="0.1416" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin11: should return the expected output type" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11..AdoptiumTemurin11: should return the expected output type" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin11: should have a Version property that is a string" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11..AdoptiumTemurin11: should have a Version property that is a string" time="0.2146" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin11: should have a valid version number" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11..AdoptiumTemurin11: should have a valid version number" time="0.2141" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin11: should have a URI property that is a string" name="Get-EvergreenApp AdoptiumTemurin11.Validate Get-EvergreenApp works with: AdoptiumTemurin11..AdoptiumTemurin11: should have a URI property that is a string" time="0.2263" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Greenshot" executed="True" result="Success" success="True" time="370.6361" asserts="0" description="Get-EvergreenApp Greenshot">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot." executed="True" result="Success" success="True" time="1.085" asserts="0" description="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot.">
                <results>
                  <test-case description="Greenshot: should return something" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot..Greenshot: should return something" time="0.144" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Greenshot: should return the expected output type" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot..Greenshot: should return the expected output type" time="0.161" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Greenshot: should have a Version property that is a string" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot..Greenshot: should have a Version property that is a string" time="0.191" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Greenshot: should have a valid version number" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot..Greenshot: should have a valid version number" time="0.2209" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Greenshot: should have a URI property that is a string" name="Get-EvergreenApp Greenshot.Validate Get-EvergreenApp works with: Greenshot..Greenshot: should have a URI property that is a string" time="0.2083" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftBicep" executed="True" result="Success" success="True" time="372.7324" asserts="0" description="Get-EvergreenApp MicrosoftBicep">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep." executed="True" result="Success" success="True" time="1.1742" asserts="0" description="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep.">
                <results>
                  <test-case description="MicrosoftBicep: should return something" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep..MicrosoftBicep: should return something" time="0.1708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBicep: should return the expected output type" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep..MicrosoftBicep: should return the expected output type" time="0.1999" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBicep: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep..MicrosoftBicep: should have a Version property that is a string" time="0.2215" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBicep: should have a valid version number" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep..MicrosoftBicep: should have a valid version number" time="0.2148" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBicep: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftBicep.Validate Get-EvergreenApp works with: MicrosoftBicep..MicrosoftBicep: should have a URI property that is a string" time="0.2" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Gephi" executed="True" result="Success" success="True" time="374.7765" asserts="0" description="Get-EvergreenApp Gephi">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi." executed="True" result="Success" success="True" time="1.1046" asserts="0" description="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi.">
                <results>
                  <test-case description="Gephi: should return something" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi..Gephi: should return something" time="0.1498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gephi: should return the expected output type" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi..Gephi: should return the expected output type" time="0.184" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gephi: should have a Version property that is a string" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi..Gephi: should have a Version property that is a string" time="0.1877" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gephi: should have a valid version number" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi..Gephi: should have a valid version number" time="0.1752" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gephi: should have a URI property that is a string" name="Get-EvergreenApp Gephi.Validate Get-EvergreenApp works with: Gephi..Gephi: should have a URI property that is a string" time="0.2134" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GitForWindows" executed="True" result="Success" success="True" time="377.5722" asserts="0" description="Get-EvergreenApp GitForWindows">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows." executed="True" result="Success" success="True" time="1.7406" asserts="0" description="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows.">
                <results>
                  <test-case description="GitForWindows: should return something" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows..GitForWindows: should return something" time="0.1624" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitForWindows: should return the expected output type" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows..GitForWindows: should return the expected output type" time="0.2554" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitForWindows: should have a Version property that is a string" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows..GitForWindows: should have a Version property that is a string" time="0.3969" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitForWindows: should have a valid version number" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows..GitForWindows: should have a valid version number" time="0.3878" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitForWindows: should have a URI property that is a string" name="Get-EvergreenApp GitForWindows.Validate Get-EvergreenApp works with: GitForWindows..GitForWindows: should have a URI property that is a string" time="0.3701" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Zotero" executed="True" result="Success" success="True" time="379.0546" asserts="0" description="Get-EvergreenApp Zotero">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero." executed="True" result="Success" success="True" time="0.9256" asserts="0" description="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero.">
                <results>
                  <test-case description="Zotero: should return something" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero..Zotero: should return something" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zotero: should return the expected output type" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero..Zotero: should return the expected output type" time="0.1509" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zotero: should have a Version property that is a string" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero..Zotero: should have a Version property that is a string" time="0.1515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zotero: should have a valid version number" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero..Zotero: should have a valid version number" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zotero: should have a URI property that is a string" name="Get-EvergreenApp Zotero.Validate Get-EvergreenApp works with: Zotero..Zotero: should have a URI property that is a string" time="0.1582" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp XnSoftXnViewMP" executed="True" result="Success" success="True" time="380.8964" asserts="0" description="Get-EvergreenApp XnSoftXnViewMP">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP." executed="True" result="Success" success="True" time="1.0317" asserts="0" description="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP.">
                <results>
                  <test-case description="XnSoftXnViewMP: should return something" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP..XnSoftXnViewMP: should return something" time="0.1441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnViewMP: should return the expected output type" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP..XnSoftXnViewMP: should return the expected output type" time="0.1654" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnViewMP: should have a Version property that is a string" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP..XnSoftXnViewMP: should have a Version property that is a string" time="0.1862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnViewMP: should have a valid version number" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP..XnSoftXnViewMP: should have a valid version number" time="0.1893" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnViewMP: should have a URI property that is a string" name="Get-EvergreenApp XnSoftXnViewMP.Validate Get-EvergreenApp works with: XnSoftXnViewMP..XnSoftXnViewMP: should have a URI property that is a string" time="0.184" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Minitab" executed="True" result="Success" success="True" time="382.6104" asserts="0" description="Get-EvergreenApp Minitab">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab." executed="True" result="Success" success="True" time="1.0247" asserts="0" description="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab.">
                <results>
                  <test-case description="Minitab: should return something" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab..Minitab: should return something" time="0.1542" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Minitab: should return the expected output type" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab..Minitab: should return the expected output type" time="0.1619" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Minitab: should have a Version property that is a string" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab..Minitab: should have a Version property that is a string" time="0.1835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Minitab: should have a valid version number" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab..Minitab: should have a valid version number" time="0.1681" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Minitab: should have a URI property that is a string" name="Get-EvergreenApp Minitab.Validate Get-EvergreenApp works with: Minitab..Minitab: should have a URI property that is a string" time="0.1751" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp FoxitPDFEditor" executed="True" result="Success" success="True" time="391.2729" asserts="0" description="Get-EvergreenApp FoxitPDFEditor">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor." executed="True" result="Success" success="True" time="2.1155" asserts="0" description="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor.">
                <results>
                  <test-case description="FoxitPDFEditor: should return something" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor..FoxitPDFEditor: should return something" time="0.1589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitPDFEditor: should return the expected output type" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor..FoxitPDFEditor: should return the expected output type" time="0.2953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitPDFEditor: should have a Version property that is a string" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor..FoxitPDFEditor: should have a Version property that is a string" time="0.5053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitPDFEditor: should have a valid version number" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor..FoxitPDFEditor: should have a valid version number" time="0.4752" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitPDFEditor: should have a URI property that is a string" name="Get-EvergreenApp FoxitPDFEditor.Validate Get-EvergreenApp works with: FoxitPDFEditor..FoxitPDFEditor: should have a URI property that is a string" time="0.4994" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OperaBrowser" executed="True" result="Success" success="True" time="393.5749" asserts="0" description="Get-EvergreenApp OperaBrowser">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser." executed="True" result="Success" success="True" time="1.4944" asserts="0" description="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser.">
                <results>
                  <test-case description="OperaBrowser: should return something" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser..OperaBrowser: should return something" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaBrowser: should return the expected output type" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser..OperaBrowser: should return the expected output type" time="0.2575" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaBrowser: should have a Version property that is a string" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser..OperaBrowser: should have a Version property that is a string" time="0.2891" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaBrowser: should have a valid version number" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser..OperaBrowser: should have a valid version number" time="0.3055" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaBrowser: should have a URI property that is a string" name="Get-EvergreenApp OperaBrowser.Validate Get-EvergreenApp works with: OperaBrowser..OperaBrowser: should have a URI property that is a string" time="0.294" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK16" executed="True" result="Success" success="True" time="396.0094" asserts="0" description="Get-EvergreenApp AdoptOpenJDK16">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16." executed="True" result="Success" success="True" time="1.1621" asserts="0" description="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16.">
                <results>
                  <test-case description="AdoptOpenJDK16: should return something" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16..AdoptOpenJDK16: should return something" time="0.1781" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK16: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16..AdoptOpenJDK16: should return the expected output type" time="0.183" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK16: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16..AdoptOpenJDK16: should have a Version property that is a string" time="0.1971" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK16: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16..AdoptOpenJDK16: should have a valid version number" time="0.1689" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK16: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDK16.Validate Get-EvergreenApp works with: AdoptOpenJDK16..AdoptOpenJDK16: should have a URI property that is a string" time="0.2049" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb" executed="True" result="Success" success="True" time="398.2833" asserts="0" description="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb." executed="True" result="Success" success="True" time="1.0783" asserts="0" description="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb.">
                <results>
                  <test-case description="AdoptOpenJDKIcedTeaWeb: should return something" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb: should return something" time="0.1753" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKIcedTeaWeb: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb: should return the expected output type" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKIcedTeaWeb: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb: should have a Version property that is a string" time="0.194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKIcedTeaWeb: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb: should have a valid version number" time="0.1918" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKIcedTeaWeb: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDKIcedTeaWeb.Validate Get-EvergreenApp works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb: should have a URI property that is a string" time="0.1958" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETInspectConnector" executed="True" result="Success" success="True" time="400.0901" asserts="0" description="Get-EvergreenApp ESETInspectConnector">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector." executed="True" result="Success" success="True" time="1.0704" asserts="0" description="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector.">
                <results>
                  <test-case description="ESETInspectConnector: should return something" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector..ESETInspectConnector: should return something" time="0.1621" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETInspectConnector: should return the expected output type" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector..ESETInspectConnector: should return the expected output type" time="0.1848" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETInspectConnector: should have a Version property that is a string" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector..ESETInspectConnector: should have a Version property that is a string" time="0.1723" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETInspectConnector: should have a valid version number" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector..ESETInspectConnector: should have a valid version number" time="0.1749" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETInspectConnector: should have a URI property that is a string" name="Get-EvergreenApp ESETInspectConnector.Validate Get-EvergreenApp works with: ESETInspectConnector..ESETInspectConnector: should have a URI property that is a string" time="0.2045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp WinMerge" executed="True" result="Success" success="True" time="402.4261" asserts="0" description="Get-EvergreenApp WinMerge">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge." executed="True" result="Success" success="True" time="1.2234" asserts="0" description="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge.">
                <results>
                  <test-case description="WinMerge: should return something" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge..WinMerge: should return something" time="0.1487" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinMerge: should return the expected output type" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge..WinMerge: should return the expected output type" time="0.1803" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinMerge: should have a Version property that is a string" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge..WinMerge: should have a Version property that is a string" time="0.2192" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinMerge: should have a valid version number" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge..WinMerge: should have a valid version number" time="0.2392" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinMerge: should have a URI property that is a string" name="Get-EvergreenApp WinMerge.Validate Get-EvergreenApp works with: WinMerge..WinMerge: should have a URI property that is a string" time="0.2475" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime" executed="True" result="Success" success="True" time="404.7397" asserts="0" description="Get-EvergreenApp MicrosoftEdgeWebView2Runtime">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime." executed="True" result="Success" success="True" time="1.1633" asserts="0" description="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime.">
                <results>
                  <test-case description="MicrosoftEdgeWebView2Runtime: should return something" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime: should return something" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeWebView2Runtime: should return the expected output type" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime: should return the expected output type" time="0.1894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeWebView2Runtime: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime: should have a Version property that is a string" time="0.2086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeWebView2Runtime: should have a valid version number" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime: should have a valid version number" time="0.1989" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeWebView2Runtime: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftEdgeWebView2Runtime.Validate Get-EvergreenApp works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime: should have a URI property that is a string" time="0.2138" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftTerminal" executed="True" result="Success" success="True" time="406.5866" asserts="0" description="Get-EvergreenApp MicrosoftTerminal">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal." executed="True" result="Success" success="True" time="1.052" asserts="0" description="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal.">
                <results>
                  <test-case description="MicrosoftTerminal: should return something" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal..MicrosoftTerminal: should return something" time="0.1697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTerminal: should return the expected output type" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal..MicrosoftTerminal: should return the expected output type" time="0.1725" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTerminal: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal..MicrosoftTerminal: should have a Version property that is a string" time="0.1919" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTerminal: should have a valid version number" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal..MicrosoftTerminal: should have a valid version number" time="0.1771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTerminal: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftTerminal.Validate Get-EvergreenApp works with: MicrosoftTerminal..MicrosoftTerminal: should have a URI property that is a string" time="0.1762" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ChromiumChromeDriver" executed="True" result="Success" success="True" time="408.4667" asserts="0" description="Get-EvergreenApp ChromiumChromeDriver">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver." executed="True" result="Success" success="True" time="1.063" asserts="0" description="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver.">
                <results>
                  <test-case description="ChromiumChromeDriver: should return something" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver..ChromiumChromeDriver: should return something" time="0.1639" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ChromiumChromeDriver: should return the expected output type" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver..ChromiumChromeDriver: should return the expected output type" time="0.1679" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ChromiumChromeDriver: should have a Version property that is a string" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver..ChromiumChromeDriver: should have a Version property that is a string" time="0.1974" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ChromiumChromeDriver: should have a valid version number" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver..ChromiumChromeDriver: should have a valid version number" time="0.1888" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ChromiumChromeDriver: should have a URI property that is a string" name="Get-EvergreenApp ChromiumChromeDriver.Validate Get-EvergreenApp works with: ChromiumChromeDriver..ChromiumChromeDriver: should have a URI property that is a string" time="0.1829" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpConsul" executed="True" result="Success" success="True" time="410.1761" asserts="0" description="Get-EvergreenApp HashicorpConsul">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul." executed="True" result="Success" success="True" time="1.0042" asserts="0" description="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul.">
                <results>
                  <test-case description="HashicorpConsul: should return something" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul..HashicorpConsul: should return something" time="0.143" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpConsul: should return the expected output type" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul..HashicorpConsul: should return the expected output type" time="0.1715" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpConsul: should have a Version property that is a string" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul..HashicorpConsul: should have a Version property that is a string" time="0.1723" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpConsul: should have a valid version number" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul..HashicorpConsul: should have a valid version number" time="0.177" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpConsul: should have a URI property that is a string" name="Get-EvergreenApp HashicorpConsul.Validate Get-EvergreenApp works with: HashicorpConsul..HashicorpConsul: should have a URI property that is a string" time="0.1725" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp RCoreTeamRforWindows" executed="True" result="Success" success="True" time="412.0492" asserts="0" description="Get-EvergreenApp RCoreTeamRforWindows">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows." executed="True" result="Success" success="True" time="0.9117" asserts="0" description="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows.">
                <results>
                  <test-case description="RCoreTeamRforWindows: should return something" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows..RCoreTeamRforWindows: should return something" time="0.1457" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RCoreTeamRforWindows: should return the expected output type" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows..RCoreTeamRforWindows: should return the expected output type" time="0.1603" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RCoreTeamRforWindows: should have a Version property that is a string" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows..RCoreTeamRforWindows: should have a Version property that is a string" time="0.1604" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RCoreTeamRforWindows: should have a valid version number" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows..RCoreTeamRforWindows: should have a valid version number" time="0.1436" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RCoreTeamRforWindows: should have a URI property that is a string" name="Get-EvergreenApp RCoreTeamRforWindows.Validate Get-EvergreenApp works with: RCoreTeamRforWindows..RCoreTeamRforWindows: should have a URI property that is a string" time="0.1449" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETEndpointSecurity" executed="True" result="Success" success="True" time="450.0606" asserts="0" description="Get-EvergreenApp ESETEndpointSecurity">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity." executed="True" result="Success" success="True" time="19.8814" asserts="0" description="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity.">
                <results>
                  <test-case description="ESETEndpointSecurity: should return something" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity..ESETEndpointSecurity: should return something" time="0.1448" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointSecurity: should return the expected output type" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity..ESETEndpointSecurity: should return the expected output type" time="2.4147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointSecurity: should have a Version property that is a string" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity..ESETEndpointSecurity: should have a Version property that is a string" time="5.8873" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointSecurity: should have a valid version number" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity..ESETEndpointSecurity: should have a valid version number" time="5.5306" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointSecurity: should have a URI property that is a string" name="Get-EvergreenApp ESETEndpointSecurity.Validate Get-EvergreenApp works with: ESETEndpointSecurity..ESETEndpointSecurity: should have a URI property that is a string" time="5.7383" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MuseScore" executed="True" result="Success" success="True" time="452.0361" asserts="0" description="Get-EvergreenApp MuseScore">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore." executed="True" result="Success" success="True" time="1.1413" asserts="0" description="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore.">
                <results>
                  <test-case description="MuseScore: should return something" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore..MuseScore: should return something" time="0.1642" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MuseScore: should return the expected output type" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore..MuseScore: should return the expected output type" time="0.1765" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MuseScore: should have a Version property that is a string" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore..MuseScore: should have a Version property that is a string" time="0.2032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MuseScore: should have a valid version number" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore..MuseScore: should have a valid version number" time="0.2333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MuseScore: should have a URI property that is a string" name="Get-EvergreenApp MuseScore.Validate Get-EvergreenApp works with: MuseScore..MuseScore: should have a URI property that is a string" time="0.1973" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp DevToys" executed="True" result="Success" success="True" time="453.7148" asserts="0" description="Get-EvergreenApp DevToys">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys." executed="True" result="Success" success="True" time="0.9443" asserts="0" description="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys.">
                <results>
                  <test-case description="DevToys: should return something" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys..DevToys: should return something" time="0.1532" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DevToys: should return the expected output type" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys..DevToys: should return the expected output type" time="0.1502" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DevToys: should have a Version property that is a string" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys..DevToys: should have a Version property that is a string" time="0.1585" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DevToys: should have a valid version number" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys..DevToys: should have a valid version number" time="0.1515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DevToys: should have a URI property that is a string" name="Get-EvergreenApp DevToys.Validate Get-EvergreenApp works with: DevToys..DevToys: should have a URI property that is a string" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp NevcairielLAVFilters" executed="True" result="Success" success="True" time="455.4947" asserts="0" description="Get-EvergreenApp NevcairielLAVFilters">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters." executed="True" result="Success" success="True" time="0.9571" asserts="0" description="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters.">
                <results>
                  <test-case description="NevcairielLAVFilters: should return something" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters..NevcairielLAVFilters: should return something" time="0.1571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NevcairielLAVFilters: should return the expected output type" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters..NevcairielLAVFilters: should return the expected output type" time="0.1562" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NevcairielLAVFilters: should have a Version property that is a string" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters..NevcairielLAVFilters: should have a Version property that is a string" time="0.1501" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NevcairielLAVFilters: should have a valid version number" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters..NevcairielLAVFilters: should have a valid version number" time="0.1525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NevcairielLAVFilters: should have a URI property that is a string" name="Get-EvergreenApp NevcairielLAVFilters.Validate Get-EvergreenApp works with: NevcairielLAVFilters..NevcairielLAVFilters: should have a URI property that is a string" time="0.1788" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MasterPackager" executed="True" result="Success" success="True" time="457.6741" asserts="0" description="Get-EvergreenApp MasterPackager">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager." executed="True" result="Success" success="True" time="0.9197" asserts="0" description="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager.">
                <results>
                  <test-case description="MasterPackager: should return something" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager..MasterPackager: should return something" time="0.1501" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MasterPackager: should return the expected output type" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager..MasterPackager: should return the expected output type" time="0.1527" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MasterPackager: should have a Version property that is a string" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager..MasterPackager: should have a Version property that is a string" time="0.1573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MasterPackager: should have a valid version number" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager..MasterPackager: should have a valid version number" time="0.1547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MasterPackager: should have a URI property that is a string" name="Get-EvergreenApp MasterPackager.Validate Get-EvergreenApp works with: MasterPackager..MasterPackager: should have a URI property that is a string" time="0.1479" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp NotepadPlusPlus" executed="True" result="Success" success="True" time="460.634" asserts="0" description="Get-EvergreenApp NotepadPlusPlus">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus." executed="True" result="Success" success="True" time="1.8901" asserts="0" description="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus.">
                <results>
                  <test-case description="NotepadPlusPlus: should return something" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus..NotepadPlusPlus: should return something" time="0.1465" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NotepadPlusPlus: should return the expected output type" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus..NotepadPlusPlus: should return the expected output type" time="0.2546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NotepadPlusPlus: should have a Version property that is a string" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus..NotepadPlusPlus: should have a Version property that is a string" time="0.4509" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NotepadPlusPlus: should have a valid version number" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus..NotepadPlusPlus: should have a valid version number" time="0.4318" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NotepadPlusPlus: should have a URI property that is a string" name="Get-EvergreenApp NotepadPlusPlus.Validate Get-EvergreenApp works with: NotepadPlusPlus..NotepadPlusPlus: should have a URI property that is a string" time="0.4519" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OctopusDeployServer" executed="True" result="Success" success="True" time="462.3294" asserts="0" description="Get-EvergreenApp OctopusDeployServer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer." executed="True" result="Success" success="True" time="0.9598" asserts="0" description="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer.">
                <results>
                  <test-case description="OctopusDeployServer: should return something" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer..OctopusDeployServer: should return something" time="0.151" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusDeployServer: should return the expected output type" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer..OctopusDeployServer: should return the expected output type" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusDeployServer: should have a Version property that is a string" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer..OctopusDeployServer: should have a Version property that is a string" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusDeployServer: should have a valid version number" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer..OctopusDeployServer: should have a valid version number" time="0.1639" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusDeployServer: should have a URI property that is a string" name="Get-EvergreenApp OctopusDeployServer.Validate Get-EvergreenApp works with: OctopusDeployServer..OctopusDeployServer: should have a URI property that is a string" time="0.1562" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp KeeWeb" executed="True" result="Success" success="True" time="464.7243" asserts="0" description="Get-EvergreenApp KeeWeb">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb." executed="True" result="Success" success="True" time="1.3997" asserts="0" description="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb.">
                <results>
                  <test-case description="KeeWeb: should return something" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb..KeeWeb: should return something" time="0.1442" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeeWeb: should return the expected output type" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb..KeeWeb: should return the expected output type" time="0.2005" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeeWeb: should have a Version property that is a string" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb..KeeWeb: should have a Version property that is a string" time="0.2886" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeeWeb: should have a valid version number" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb..KeeWeb: should have a valid version number" time="0.3135" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeeWeb: should have a URI property that is a string" name="Get-EvergreenApp KeeWeb.Validate Get-EvergreenApp works with: KeeWeb..KeeWeb: should have a URI property that is a string" time="0.2937" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpBoundary" executed="True" result="Success" success="True" time="466.4964" asserts="0" description="Get-EvergreenApp HashicorpBoundary">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary." executed="True" result="Success" success="True" time="1.0402" asserts="0" description="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary.">
                <results>
                  <test-case description="HashicorpBoundary: should return something" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary..HashicorpBoundary: should return something" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpBoundary: should return the expected output type" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary..HashicorpBoundary: should return the expected output type" time="0.1656" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpBoundary: should have a Version property that is a string" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary..HashicorpBoundary: should have a Version property that is a string" time="0.1786" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpBoundary: should have a valid version number" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary..HashicorpBoundary: should have a valid version number" time="0.1909" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpBoundary: should have a URI property that is a string" name="Get-EvergreenApp HashicorpBoundary.Validate Get-EvergreenApp works with: HashicorpBoundary..HashicorpBoundary: should have a URI property that is a string" time="0.182" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PSAppDeployToolkit" executed="True" result="Success" success="True" time="468.2638" asserts="0" description="Get-EvergreenApp PSAppDeployToolkit">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit." executed="True" result="Success" success="True" time="0.9287" asserts="0" description="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit.">
                <results>
                  <test-case description="PSAppDeployToolkit: should return something" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit..PSAppDeployToolkit: should return something" time="0.1498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSAppDeployToolkit: should return the expected output type" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit..PSAppDeployToolkit: should return the expected output type" time="0.1474" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSAppDeployToolkit: should have a Version property that is a string" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit..PSAppDeployToolkit: should have a Version property that is a string" time="0.1518" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSAppDeployToolkit: should have a valid version number" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit..PSAppDeployToolkit: should have a valid version number" time="0.1589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSAppDeployToolkit: should have a URI property that is a string" name="Get-EvergreenApp PSAppDeployToolkit.Validate Get-EvergreenApp works with: PSAppDeployToolkit..PSAppDeployToolkit: should have a URI property that is a string" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp FreeFem" executed="True" result="Success" success="True" time="470.164" asserts="0" description="Get-EvergreenApp FreeFem">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem." executed="True" result="Success" success="True" time="1.1372" asserts="0" description="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem.">
                <results>
                  <test-case description="FreeFem: should return something" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem..FreeFem: should return something" time="0.1656" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreeFem: should return the expected output type" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem..FreeFem: should return the expected output type" time="0.1751" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreeFem: should have a Version property that is a string" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem..FreeFem: should have a Version property that is a string" time="0.2062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreeFem: should have a valid version number" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem..FreeFem: should have a valid version number" time="0.2017" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreeFem: should have a URI property that is a string" name="Get-EvergreenApp FreeFem.Validate Get-EvergreenApp works with: FreeFem..FreeFem: should have a URI property that is a string" time="0.2144" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ControlUpConsole" executed="True" result="Success" success="True" time="471.6913" asserts="0" description="Get-EvergreenApp ControlUpConsole">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole." executed="True" result="Success" success="True" time="0.9947" asserts="0" description="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole.">
                <results>
                  <test-case description="ControlUpConsole: should return something" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole..ControlUpConsole: should return something" time="0.1633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpConsole: should return the expected output type" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole..ControlUpConsole: should return the expected output type" time="0.1666" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpConsole: should have a Version property that is a string" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole..ControlUpConsole: should have a Version property that is a string" time="0.1563" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpConsole: should have a valid version number" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole..ControlUpConsole: should have a valid version number" time="0.148" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpConsole: should have a URI property that is a string" name="Get-EvergreenApp ControlUpConsole.Validate Get-EvergreenApp works with: ControlUpConsole..ControlUpConsole: should have a URI property that is a string" time="0.1694" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp EgnyteDesktopApp" executed="True" result="Success" success="True" time="473.176" asserts="0" description="Get-EvergreenApp EgnyteDesktopApp">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp." executed="True" result="Success" success="True" time="0.9317" asserts="0" description="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp.">
                <results>
                  <test-case description="EgnyteDesktopApp: should return something" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp..EgnyteDesktopApp: should return something" time="0.1553" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="EgnyteDesktopApp: should return the expected output type" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp..EgnyteDesktopApp: should return the expected output type" time="0.15" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="EgnyteDesktopApp: should have a Version property that is a string" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp..EgnyteDesktopApp: should have a Version property that is a string" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="EgnyteDesktopApp: should have a valid version number" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp..EgnyteDesktopApp: should have a valid version number" time="0.1446" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="EgnyteDesktopApp: should have a URI property that is a string" name="Get-EvergreenApp EgnyteDesktopApp.Validate Get-EvergreenApp works with: EgnyteDesktopApp..EgnyteDesktopApp: should have a URI property that is a string" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin8" executed="True" result="Success" success="True" time="474.9163" asserts="0" description="Get-EvergreenApp AdoptiumTemurin8">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8." executed="True" result="Success" success="True" time="1.1524" asserts="0" description="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8.">
                <results>
                  <test-case description="AdoptiumTemurin8: should return something" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8..AdoptiumTemurin8: should return something" time="0.1551" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin8: should return the expected output type" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8..AdoptiumTemurin8: should return the expected output type" time="0.1799" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin8: should have a Version property that is a string" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8..AdoptiumTemurin8: should have a Version property that is a string" time="0.2258" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin8: should have a valid version number" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8..AdoptiumTemurin8: should have a valid version number" time="0.2226" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin8: should have a URI property that is a string" name="Get-EvergreenApp AdoptiumTemurin8.Validate Get-EvergreenApp works with: AdoptiumTemurin8..AdoptiumTemurin8: should have a URI property that is a string" time="0.2169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ESETServerSecurity" executed="True" result="Success" success="True" time="477.0048" asserts="0" description="Get-EvergreenApp ESETServerSecurity">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity." executed="True" result="Success" success="True" time="0.9015" asserts="0" description="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity.">
                <results>
                  <test-case description="ESETServerSecurity: should return something" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity..ESETServerSecurity: should return something" time="0.1487" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETServerSecurity: should return the expected output type" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity..ESETServerSecurity: should return the expected output type" time="0.1449" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETServerSecurity: should have a Version property that is a string" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity..ESETServerSecurity: should have a Version property that is a string" time="0.1517" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETServerSecurity: should have a valid version number" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity..ESETServerSecurity: should have a valid version number" time="0.1485" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETServerSecurity: should have a URI property that is a string" name="Get-EvergreenApp ESETServerSecurity.Validate Get-EvergreenApp works with: ESETServerSecurity..ESETServerSecurity: should have a URI property that is a string" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Obsidian" executed="True" result="Success" success="True" time="478.9799" asserts="0" description="Get-EvergreenApp Obsidian">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian." executed="True" result="Success" success="True" time="1.086" asserts="0" description="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian.">
                <results>
                  <test-case description="Obsidian: should return something" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian..Obsidian: should return something" time="0.1565" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Obsidian: should return the expected output type" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian..Obsidian: should return the expected output type" time="0.1661" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Obsidian: should have a Version property that is a string" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian..Obsidian: should have a Version property that is a string" time="0.1882" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Obsidian: should have a valid version number" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian..Obsidian: should have a valid version number" time="0.1974" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Obsidian: should have a URI property that is a string" name="Get-EvergreenApp Obsidian.Validate Get-EvergreenApp works with: Obsidian..Obsidian: should have a URI property that is a string" time="0.2218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OBSStudio" executed="True" result="Success" success="True" time="480.5597" asserts="0" description="Get-EvergreenApp OBSStudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio." executed="True" result="Success" success="True" time="0.9554" asserts="0" description="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio.">
                <results>
                  <test-case description="OBSStudio: should return something" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio..OBSStudio: should return something" time="0.1403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OBSStudio: should return the expected output type" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio..OBSStudio: should return the expected output type" time="0.1507" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OBSStudio: should have a Version property that is a string" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio..OBSStudio: should have a Version property that is a string" time="0.1686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OBSStudio: should have a valid version number" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio..OBSStudio: should have a valid version number" time="0.1666" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OBSStudio: should have a URI property that is a string" name="Get-EvergreenApp OBSStudio.Validate Get-EvergreenApp works with: OBSStudio..OBSStudio: should have a URI property that is a string" time="0.1752" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefInSpec" executed="True" result="Success" success="True" time="485.839" asserts="0" description="Get-EvergreenApp ProgressChefInSpec">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec." executed="True" result="Success" success="True" time="1.9307" asserts="0" description="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec.">
                <results>
                  <test-case description="ProgressChefInSpec: should return something" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec..ProgressChefInSpec: should return something" time="0.153" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInSpec: should return the expected output type" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec..ProgressChefInSpec: should return the expected output type" time="0.2748" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInSpec: should have a Version property that is a string" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec..ProgressChefInSpec: should have a Version property that is a string" time="0.4614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInSpec: should have a valid version number" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec..ProgressChefInSpec: should have a valid version number" time="0.4443" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInSpec: should have a URI property that is a string" name="Get-EvergreenApp ProgressChefInSpec.Validate Get-EvergreenApp works with: ProgressChefInSpec..ProgressChefInSpec: should have a URI property that is a string" time="0.4377" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Anki" executed="True" result="Success" success="True" time="487.7186" asserts="0" description="Get-EvergreenApp Anki">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki." executed="True" result="Success" success="True" time="1.0143" asserts="0" description="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki.">
                <results>
                  <test-case description="Anki: should return something" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki..Anki: should return something" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anki: should return the expected output type" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki..Anki: should return the expected output type" time="0.1633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anki: should have a Version property that is a string" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki..Anki: should have a Version property that is a string" time="0.1635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anki: should have a valid version number" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki..Anki: should have a valid version number" time="0.1788" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anki: should have a URI property that is a string" name="Get-EvergreenApp Anki.Validate Get-EvergreenApp works with: Anki..Anki: should have a URI property that is a string" time="0.1727" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK11" executed="True" result="Success" success="True" time="490.2281" asserts="0" description="Get-EvergreenApp AdoptOpenJDK11">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11." executed="True" result="Success" success="True" time="1.1765" asserts="0" description="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11.">
                <results>
                  <test-case description="AdoptOpenJDK11: should return something" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11..AdoptOpenJDK11: should return something" time="0.1549" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK11: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11..AdoptOpenJDK11: should return the expected output type" time="0.1817" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK11: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11..AdoptOpenJDK11: should have a Version property that is a string" time="0.2153" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK11: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11..AdoptOpenJDK11: should have a valid version number" time="0.2353" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK11: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDK11.Validate Get-EvergreenApp works with: AdoptOpenJDK11..AdoptOpenJDK11: should have a URI property that is a string" time="0.2271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftFSLogixApps" executed="True" result="Success" success="True" time="492.2896" asserts="0" description="Get-EvergreenApp MicrosoftFSLogixApps">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps." executed="True" result="Success" success="True" time="0.8995" asserts="0" description="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps.">
                <results>
                  <test-case description="MicrosoftFSLogixApps: should return something" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps: should return something" time="0.1488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftFSLogixApps: should return the expected output type" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps: should return the expected output type" time="0.1429" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftFSLogixApps: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps: should have a Version property that is a string" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftFSLogixApps: should have a valid version number" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps: should have a valid version number" time="0.1431" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftFSLogixApps: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftFSLogixApps.Validate Get-EvergreenApp works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps: should have a URI property that is a string" time="0.1467" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatProStdDC" executed="True" result="Success" success="True" time="493.9382" asserts="0" description="Get-EvergreenApp AdobeAcrobatProStdDC">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC." executed="True" result="Success" success="True" time="1.1865" asserts="0" description="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC.">
                <results>
                  <test-case description="AdobeAcrobatProStdDC: should return something" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC: should return something" time="0.1489" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatProStdDC: should return the expected output type" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC: should return the expected output type" time="0.1813" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatProStdDC: should have a Version property that is a string" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC: should have a Version property that is a string" time="0.2404" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatProStdDC: should have a valid version number" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC: should have a valid version number" time="0.2217" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatProStdDC: should have a URI property that is a string" name="Get-EvergreenApp AdobeAcrobatProStdDC.Validate Get-EvergreenApp works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC: should have a URI property that is a string" time="0.2217" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpPacker" executed="True" result="Success" success="True" time="495.7277" asserts="0" description="Get-EvergreenApp HashicorpPacker">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker." executed="True" result="Success" success="True" time="1.0503" asserts="0" description="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker.">
                <results>
                  <test-case description="HashicorpPacker: should return something" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker..HashicorpPacker: should return something" time="0.1481" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpPacker: should return the expected output type" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker..HashicorpPacker: should return the expected output type" time="0.1739" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpPacker: should have a Version property that is a string" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker..HashicorpPacker: should have a Version property that is a string" time="0.1859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpPacker: should have a valid version number" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker..HashicorpPacker: should have a valid version number" time="0.1798" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpPacker: should have a URI property that is a string" name="Get-EvergreenApp HashicorpPacker.Validate Get-EvergreenApp works with: HashicorpPacker..HashicorpPacker: should have a URI property that is a string" time="0.2009" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VisualCppRedistAIO" executed="True" result="Success" success="True" time="497.4317" asserts="0" description="Get-EvergreenApp VisualCppRedistAIO">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO." executed="True" result="Success" success="True" time="0.9607" asserts="0" description="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO.">
                <results>
                  <test-case description="VisualCppRedistAIO: should return something" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO..VisualCppRedistAIO: should return something" time="0.1394" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VisualCppRedistAIO: should return the expected output type" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO..VisualCppRedistAIO: should return the expected output type" time="0.1379" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VisualCppRedistAIO: should have a Version property that is a string" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO..VisualCppRedistAIO: should have a Version property that is a string" time="0.1525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VisualCppRedistAIO: should have a valid version number" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO..VisualCppRedistAIO: should have a valid version number" time="0.2255" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VisualCppRedistAIO: should have a URI property that is a string" name="Get-EvergreenApp VisualCppRedistAIO.Validate Get-EvergreenApp works with: VisualCppRedistAIO..VisualCppRedistAIO: should have a URI property that is a string" time="0.1486" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatDC" executed="True" result="Success" success="True" time="499.4255" asserts="0" description="Get-EvergreenApp AdobeAcrobatDC">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC." executed="True" result="Success" success="True" time="1.346" asserts="0" description="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC.">
                <results>
                  <test-case description="AdobeAcrobatDC: should return something" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC..AdobeAcrobatDC: should return something" time="0.15" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatDC: should return the expected output type" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC..AdobeAcrobatDC: should return the expected output type" time="0.2366" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatDC: should have a Version property that is a string" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC..AdobeAcrobatDC: should have a Version property that is a string" time="0.2842" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatDC: should have a valid version number" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC..AdobeAcrobatDC: should have a valid version number" time="0.2525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatDC: should have a URI property that is a string" name="Get-EvergreenApp AdobeAcrobatDC.Validate Get-EvergreenApp works with: AdobeAcrobatDC..AdobeAcrobatDC: should have a URI property that is a string" time="0.257" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp KarakunOpenWebStart" executed="True" result="Success" success="True" time="501.171" asserts="0" description="Get-EvergreenApp KarakunOpenWebStart">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart." executed="True" result="Success" success="True" time="0.9337" asserts="0" description="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart.">
                <results>
                  <test-case description="KarakunOpenWebStart: should return something" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart..KarakunOpenWebStart: should return something" time="0.1424" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KarakunOpenWebStart: should return the expected output type" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart..KarakunOpenWebStart: should return the expected output type" time="0.1469" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KarakunOpenWebStart: should have a Version property that is a string" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart..KarakunOpenWebStart: should have a Version property that is a string" time="0.1593" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KarakunOpenWebStart: should have a valid version number" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart..KarakunOpenWebStart: should have a valid version number" time="0.1624" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KarakunOpenWebStart: should have a URI property that is a string" name="Get-EvergreenApp KarakunOpenWebStart.Validate Get-EvergreenApp works with: KarakunOpenWebStart..KarakunOpenWebStart: should have a URI property that is a string" time="0.1611" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru17" executed="True" result="Success" success="True" time="504.0383" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru17">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17." executed="True" result="Success" success="True" time="1.3425" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17.">
                <results>
                  <test-case description="AdoptOpenJDKSemuru17: should return something" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17: should return something" time="0.1617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru17: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17: should return the expected output type" time="0.1979" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru17: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17: should have a Version property that is a string" time="0.2729" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru17: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17: should have a valid version number" time="0.2715" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru17: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru17.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17: should have a URI property that is a string" time="0.2782" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Microsoft.NET" executed="True" result="Success" success="True" time="510.8043" asserts="0" description="Get-EvergreenApp Microsoft.NET">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET." executed="True" result="Success" success="True" time="2.823" asserts="0" description="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET.">
                <results>
                  <test-case description="Microsoft.NET: should return something" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET..Microsoft.NET: should return something" time="0.1512" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft.NET: should return the expected output type" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET..Microsoft.NET: should return the expected output type" time="0.3954" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft.NET: should have a Version property that is a string" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET..Microsoft.NET: should have a Version property that is a string" time="0.726" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft.NET: should have a valid version number" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET..Microsoft.NET: should have a valid version number" time="0.704" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft.NET: should have a URI property that is a string" name="Get-EvergreenApp Microsoft.NET.Validate Get-EvergreenApp works with: Microsoft.NET..Microsoft.NET: should have a URI property that is a string" time="0.6691" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp WixToolset" executed="True" result="Success" success="True" time="512.7081" asserts="0" description="Get-EvergreenApp WixToolset">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset." executed="True" result="Success" success="True" time="1.0421" asserts="0" description="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset.">
                <results>
                  <test-case description="WixToolset: should return something" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset..WixToolset: should return something" time="0.1571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WixToolset: should return the expected output type" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset..WixToolset: should return the expected output type" time="0.1449" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WixToolset: should have a Version property that is a string" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset..WixToolset: should have a Version property that is a string" time="0.1787" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WixToolset: should have a valid version number" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset..WixToolset: should have a valid version number" time="0.1813" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WixToolset: should have a URI property that is a string" name="Get-EvergreenApp WixToolset.Validate Get-EvergreenApp works with: WixToolset..WixToolset: should have a URI property that is a string" time="0.1887" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp gretl" executed="True" result="Success" success="True" time="514.6611" asserts="0" description="Get-EvergreenApp gretl">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl." executed="True" result="Success" success="True" time="1.0666" asserts="0" description="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl.">
                <results>
                  <test-case description="gretl: should return something" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl..gretl: should return something" time="0.1583" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="gretl: should return the expected output type" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl..gretl: should return the expected output type" time="0.1634" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="gretl: should have a Version property that is a string" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl..gretl: should have a Version property that is a string" time="0.194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="gretl: should have a valid version number" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl..gretl: should have a valid version number" time="0.1833" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="gretl: should have a URI property that is a string" name="Get-EvergreenApp gretl.Validate Get-EvergreenApp works with: gretl..gretl: should have a URI property that is a string" time="0.179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp DockerDesktop" executed="True" result="Success" success="True" time="516.0583" asserts="0" description="Get-EvergreenApp DockerDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop." executed="True" result="Success" success="True" time="1.0171" asserts="0" description="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop.">
                <results>
                  <test-case description="DockerDesktop: should return something" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop..DockerDesktop: should return something" time="0.1533" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DockerDesktop: should return the expected output type" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop..DockerDesktop: should return the expected output type" time="0.1585" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DockerDesktop: should have a Version property that is a string" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop..DockerDesktop: should have a Version property that is a string" time="0.1732" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DockerDesktop: should have a valid version number" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop..DockerDesktop: should have a valid version number" time="0.1716" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DockerDesktop: should have a URI property that is a string" name="Get-EvergreenApp DockerDesktop.Validate Get-EvergreenApp works with: DockerDesktop..DockerDesktop: should have a URI property that is a string" time="0.1743" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OperaGXBrowser" executed="True" result="Success" success="True" time="517.7035" asserts="0" description="Get-EvergreenApp OperaGXBrowser">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser." executed="True" result="Success" success="True" time="1.1227" asserts="0" description="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser.">
                <results>
                  <test-case description="OperaGXBrowser: should return something" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser..OperaGXBrowser: should return something" time="0.1626" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaGXBrowser: should return the expected output type" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser..OperaGXBrowser: should return the expected output type" time="0.1822" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaGXBrowser: should have a Version property that is a string" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser..OperaGXBrowser: should have a Version property that is a string" time="0.1858" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaGXBrowser: should have a valid version number" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser..OperaGXBrowser: should have a valid version number" time="0.1853" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaGXBrowser: should have a URI property that is a string" name="Get-EvergreenApp OperaGXBrowser.Validate Get-EvergreenApp works with: OperaGXBrowser..OperaGXBrowser: should have a URI property that is a string" time="0.221" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp 7ZipZS" executed="True" result="Success" success="True" time="520.1346" asserts="0" description="Get-EvergreenApp 7ZipZS">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS." executed="True" result="Success" success="True" time="1.2461" asserts="0" description="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS.">
                <results>
                  <test-case description="7ZipZS: should return something" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS..7ZipZS: should return something" time="0.147" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7ZipZS: should return the expected output type" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS..7ZipZS: should return the expected output type" time="0.2126" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7ZipZS: should have a Version property that is a string" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS..7ZipZS: should have a Version property that is a string" time="0.2372" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7ZipZS: should have a valid version number" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS..7ZipZS: should have a valid version number" time="0.2565" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7ZipZS: should have a URI property that is a string" name="Get-EvergreenApp 7ZipZS.Validate Get-EvergreenApp works with: 7ZipZS..7ZipZS: should have a URI property that is a string" time="0.2267" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Gpg4win" executed="True" result="Success" success="True" time="523.0419" asserts="0" description="Get-EvergreenApp Gpg4win">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win." executed="True" result="Success" success="True" time="0.8701" asserts="0" description="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win.">
                <results>
                  <test-case description="Gpg4win: should return something" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win..Gpg4win: should return something" time="0.1423" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gpg4win: should return the expected output type" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win..Gpg4win: should return the expected output type" time="0.1385" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gpg4win: should have a Version property that is a string" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win..Gpg4win: should have a Version property that is a string" time="0.145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gpg4win: should have a valid version number" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win..Gpg4win: should have a valid version number" time="0.138" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gpg4win: should have a URI property that is a string" name="Get-EvergreenApp Gpg4win.Validate Get-EvergreenApp works with: Gpg4win..Gpg4win: should have a URI property that is a string" time="0.1498" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp RizonesoftNotepad3" executed="True" result="Success" success="True" time="525.2226" asserts="0" description="Get-EvergreenApp RizonesoftNotepad3">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3." executed="True" result="Success" success="True" time="1.2646" asserts="0" description="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3.">
                <results>
                  <test-case description="RizonesoftNotepad3: should return something" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3..RizonesoftNotepad3: should return something" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RizonesoftNotepad3: should return the expected output type" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3..RizonesoftNotepad3: should return the expected output type" time="0.1845" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RizonesoftNotepad3: should have a Version property that is a string" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3..RizonesoftNotepad3: should have a Version property that is a string" time="0.2563" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RizonesoftNotepad3: should have a valid version number" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3..RizonesoftNotepad3: should have a valid version number" time="0.2417" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RizonesoftNotepad3: should have a URI property that is a string" name="Get-EvergreenApp RizonesoftNotepad3.Validate Get-EvergreenApp works with: RizonesoftNotepad3..RizonesoftNotepad3: should have a URI property that is a string" time="0.2523" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp OperaCryptoBrowser" executed="True" result="Success" success="True" time="526.6387" asserts="0" description="Get-EvergreenApp OperaCryptoBrowser">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser." executed="True" result="Success" success="True" time="0.9596" asserts="0" description="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser.">
                <results>
                  <test-case description="OperaCryptoBrowser: should return something" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser..OperaCryptoBrowser: should return something" time="0.1494" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaCryptoBrowser: should return the expected output type" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser..OperaCryptoBrowser: should return the expected output type" time="0.1563" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaCryptoBrowser: should have a Version property that is a string" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser..OperaCryptoBrowser: should have a Version property that is a string" time="0.1703" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaCryptoBrowser: should have a valid version number" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser..OperaCryptoBrowser: should have a valid version number" time="0.1564" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaCryptoBrowser: should have a URI property that is a string" name="Get-EvergreenApp OperaCryptoBrowser.Validate Get-EvergreenApp works with: OperaCryptoBrowser..OperaCryptoBrowser: should have a URI property that is a string" time="0.1665" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GitHubAtom" executed="True" result="Success" success="True" time="528.3833" asserts="0" description="Get-EvergreenApp GitHubAtom">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom." executed="True" result="Success" success="True" time="0.9315" asserts="0" description="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom.">
                <results>
                  <test-case description="GitHubAtom: should return something" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom..GitHubAtom: should return something" time="0.1398" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubAtom: should return the expected output type" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom..GitHubAtom: should return the expected output type" time="0.1509" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubAtom: should have a Version property that is a string" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom..GitHubAtom: should have a Version property that is a string" time="0.1606" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubAtom: should have a valid version number" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom..GitHubAtom: should have a valid version number" time="0.1641" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubAtom: should have a URI property that is a string" name="Get-EvergreenApp GitHubAtom.Validate Get-EvergreenApp works with: GitHubAtom..GitHubAtom: should have a URI property that is a string" time="0.1646" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VastLimitsUberAgent" executed="True" result="Success" success="True" time="529.8684" asserts="0" description="Get-EvergreenApp VastLimitsUberAgent">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent." executed="True" result="Success" success="True" time="0.9423" asserts="0" description="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent.">
                <results>
                  <test-case description="VastLimitsUberAgent: should return something" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent..VastLimitsUberAgent: should return something" time="0.1544" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VastLimitsUberAgent: should return the expected output type" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent..VastLimitsUberAgent: should return the expected output type" time="0.1555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VastLimitsUberAgent: should have a Version property that is a string" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent..VastLimitsUberAgent: should have a Version property that is a string" time="0.155" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VastLimitsUberAgent: should have a valid version number" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent..VastLimitsUberAgent: should have a valid version number" time="0.1496" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VastLimitsUberAgent: should have a URI property that is a string" name="Get-EvergreenApp VastLimitsUberAgent.Validate Get-EvergreenApp works with: VastLimitsUberAgent..VastLimitsUberAgent: should have a URI property that is a string" time="0.1538" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Microsoft365Apps" executed="True" result="Success" success="True" time="531.9659" asserts="0" description="Get-EvergreenApp Microsoft365Apps">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps." executed="True" result="Success" success="True" time="1.4547" asserts="0" description="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps.">
                <results>
                  <test-case description="Microsoft365Apps: should return something" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps..Microsoft365Apps: should return something" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft365Apps: should return the expected output type" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps..Microsoft365Apps: should return the expected output type" time="0.2035" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft365Apps: should have a Version property that is a string" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps..Microsoft365Apps: should have a Version property that is a string" time="0.3107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft365Apps: should have a valid version number" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps..Microsoft365Apps: should have a valid version number" time="0.304" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft365Apps: should have a URI property that is a string" name="Get-EvergreenApp Microsoft365Apps.Validate Get-EvergreenApp works with: Microsoft365Apps..Microsoft365Apps: should have a URI property that is a string" time="0.3226" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PDFForgePDFCreator" executed="True" result="Success" success="True" time="533.8632" asserts="0" description="Get-EvergreenApp PDFForgePDFCreator">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator." executed="True" result="Success" success="True" time="0.891" asserts="0" description="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator.">
                <results>
                  <test-case description="PDFForgePDFCreator: should return something" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator..PDFForgePDFCreator: should return something" time="0.1432" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PDFForgePDFCreator: should return the expected output type" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator..PDFForgePDFCreator: should return the expected output type" time="0.1382" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PDFForgePDFCreator: should have a Version property that is a string" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator..PDFForgePDFCreator: should have a Version property that is a string" time="0.1499" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PDFForgePDFCreator: should have a valid version number" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator..PDFForgePDFCreator: should have a valid version number" time="0.1674" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PDFForgePDFCreator: should have a URI property that is a string" name="Get-EvergreenApp PDFForgePDFCreator.Validate Get-EvergreenApp works with: PDFForgePDFCreator..PDFForgePDFCreator: should have a URI property that is a string" time="0.1461" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru8" executed="True" result="Success" success="True" time="537.3962" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru8">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8." executed="True" result="Success" success="True" time="1.7879" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8.">
                <results>
                  <test-case description="AdoptOpenJDKSemuru8: should return something" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8: should return something" time="0.1486" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru8: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8: should return the expected output type" time="0.2704" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru8: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8: should have a Version property that is a string" time="0.4406" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru8: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8: should have a valid version number" time="0.3894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru8: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru8.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8: should have a URI property that is a string" time="0.3875" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Terminals" executed="True" result="Success" success="True" time="539.032" asserts="0" description="Get-EvergreenApp Terminals">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals." executed="True" result="Success" success="True" time="0.8779" asserts="0" description="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals.">
                <results>
                  <test-case description="Terminals: should return something" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals..Terminals: should return something" time="0.1462" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminals: should return the expected output type" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals..Terminals: should return the expected output type" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminals: should have a Version property that is a string" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals..Terminals: should have a Version property that is a string" time="0.1461" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminals: should have a valid version number" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals..Terminals: should have a valid version number" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminals: should have a URI property that is a string" name="Get-EvergreenApp Terminals.Validate Get-EvergreenApp works with: Terminals..Terminals: should have a URI property that is a string" time="0.137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ScooterBeyondCompare" executed="True" result="Success" success="True" time="540.444" asserts="0" description="Get-EvergreenApp ScooterBeyondCompare">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare." executed="True" result="Success" success="True" time="0.8963" asserts="0" description="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare.">
                <results>
                  <test-case description="ScooterBeyondCompare: should return something" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare..ScooterBeyondCompare: should return something" time="0.1434" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScooterBeyondCompare: should return the expected output type" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare..ScooterBeyondCompare: should return the expected output type" time="0.1431" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScooterBeyondCompare: should have a Version property that is a string" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare..ScooterBeyondCompare: should have a Version property that is a string" time="0.1514" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScooterBeyondCompare: should have a valid version number" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare..ScooterBeyondCompare: should have a valid version number" time="0.1488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScooterBeyondCompare: should have a URI property that is a string" name="Get-EvergreenApp ScooterBeyondCompare.Validate Get-EvergreenApp works with: ScooterBeyondCompare..ScooterBeyondCompare: should have a URI property that is a string" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp PeaZipPeaZip" executed="True" result="Success" success="True" time="542.3846" asserts="0" description="Get-EvergreenApp PeaZipPeaZip">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip." executed="True" result="Success" success="True" time="0.9875" asserts="0" description="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip.">
                <results>
                  <test-case description="PeaZipPeaZip: should return something" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip..PeaZipPeaZip: should return something" time="0.152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PeaZipPeaZip: should return the expected output type" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip..PeaZipPeaZip: should return the expected output type" time="0.161" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PeaZipPeaZip: should have a Version property that is a string" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip..PeaZipPeaZip: should have a Version property that is a string" time="0.1719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PeaZipPeaZip: should have a valid version number" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip..PeaZipPeaZip: should have a valid version number" time="0.1751" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PeaZipPeaZip: should have a URI property that is a string" name="Get-EvergreenApp PeaZipPeaZip.Validate Get-EvergreenApp works with: PeaZipPeaZip..PeaZipPeaZip: should have a URI property that is a string" time="0.1699" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ScreenToGif" executed="True" result="Success" success="True" time="545.5169" asserts="0" description="Get-EvergreenApp ScreenToGif">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif." executed="True" result="Success" success="True" time="2.0232" asserts="0" description="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif.">
                <results>
                  <test-case description="ScreenToGif: should return something" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif..ScreenToGif: should return something" time="0.1504" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScreenToGif: should return the expected output type" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif..ScreenToGif: should return the expected output type" time="0.2834" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScreenToGif: should have a Version property that is a string" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif..ScreenToGif: should have a Version property that is a string" time="0.4848" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScreenToGif: should have a valid version number" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif..ScreenToGif: should have a valid version number" time="0.4733" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScreenToGif: should have a URI property that is a string" name="Get-EvergreenApp ScreenToGif.Validate Get-EvergreenApp works with: ScreenToGif..ScreenToGif: should have a URI property that is a string" time="0.4733" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMPlexWorkstation" executed="True" result="Success" success="True" time="547.2265" asserts="0" description="Get-EvergreenApp VMPlexWorkstation">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation." executed="True" result="Success" success="True" time="0.9832" asserts="0" description="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation.">
                <results>
                  <test-case description="VMPlexWorkstation: should return something" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation..VMPlexWorkstation: should return something" time="0.1473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMPlexWorkstation: should return the expected output type" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation..VMPlexWorkstation: should return the expected output type" time="0.1536" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMPlexWorkstation: should have a Version property that is a string" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation..VMPlexWorkstation: should have a Version property that is a string" time="0.182" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMPlexWorkstation: should have a valid version number" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation..VMPlexWorkstation: should have a valid version number" time="0.1715" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMPlexWorkstation: should have a URI property that is a string" name="Get-EvergreenApp VMPlexWorkstation.Validate Get-EvergreenApp works with: VMPlexWorkstation..VMPlexWorkstation: should have a URI property that is a string" time="0.1749" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp VMwareWorkstationPro" executed="True" result="Success" success="True" time="549.3433" asserts="0" description="Get-EvergreenApp VMwareWorkstationPro">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro." executed="True" result="Success" success="True" time="0.9221" asserts="0" description="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro.">
                <results>
                  <test-case description="VMwareWorkstationPro: should return something" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro..VMwareWorkstationPro: should return something" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPro: should return the expected output type" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro..VMwareWorkstationPro: should return the expected output type" time="0.1392" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPro: should have a Version property that is a string" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro..VMwareWorkstationPro: should have a Version property that is a string" time="0.1473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPro: should have a valid version number" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro..VMwareWorkstationPro: should have a valid version number" time="0.1618" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPro: should have a URI property that is a string" name="Get-EvergreenApp VMwareWorkstationPro.Validate Get-EvergreenApp works with: VMwareWorkstationPro..VMwareWorkstationPro: should have a URI property that is a string" time="0.1516" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Maximus5ConEmu" executed="True" result="Success" success="True" time="551.2658" asserts="0" description="Get-EvergreenApp Maximus5ConEmu">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu." executed="True" result="Success" success="True" time="1.1087" asserts="0" description="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu.">
                <results>
                  <test-case description="Maximus5ConEmu: should return something" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu..Maximus5ConEmu: should return something" time="0.1613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Maximus5ConEmu: should return the expected output type" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu..Maximus5ConEmu: should return the expected output type" time="0.1866" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Maximus5ConEmu: should have a Version property that is a string" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu..Maximus5ConEmu: should have a Version property that is a string" time="0.2108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Maximus5ConEmu: should have a valid version number" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu..Maximus5ConEmu: should have a valid version number" time="0.1976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Maximus5ConEmu: should have a URI property that is a string" name="Get-EvergreenApp Maximus5ConEmu.Validate Get-EvergreenApp works with: Maximus5ConEmu..Maximus5ConEmu: should have a URI property that is a string" time="0.1958" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp voidtoolsEverything" executed="True" result="Success" success="True" time="552.6672" asserts="0" description="Get-EvergreenApp voidtoolsEverything">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything." executed="True" result="Success" success="True" time="1.0144" asserts="0" description="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything.">
                <results>
                  <test-case description="voidtoolsEverything: should return something" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything..voidtoolsEverything: should return something" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="voidtoolsEverything: should return the expected output type" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything..voidtoolsEverything: should return the expected output type" time="0.1627" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="voidtoolsEverything: should have a Version property that is a string" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything..voidtoolsEverything: should have a Version property that is a string" time="0.1826" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="voidtoolsEverything: should have a valid version number" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything..voidtoolsEverything: should have a valid version number" time="0.1838" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="voidtoolsEverything: should have a URI property that is a string" name="Get-EvergreenApp voidtoolsEverything.Validate Get-EvergreenApp works with: voidtoolsEverything..voidtoolsEverything: should have a URI property that is a string" time="0.1671" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp deviceTRUST" executed="True" result="Success" success="True" time="556.3112" asserts="0" description="Get-EvergreenApp deviceTRUST">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST." executed="True" result="Success" success="True" time="3.0365" asserts="0" description="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST.">
                <results>
                  <test-case description="deviceTRUST: should return something" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST..deviceTRUST: should return something" time="0.1441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="deviceTRUST: should return the expected output type" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST..deviceTRUST: should return the expected output type" time="0.4092" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="deviceTRUST: should have a Version property that is a string" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST..deviceTRUST: should have a Version property that is a string" time="0.7911" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="deviceTRUST: should have a valid version number" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST..deviceTRUST: should have a valid version number" time="0.7506" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="deviceTRUST: should have a URI property that is a string" name="Get-EvergreenApp deviceTRUST.Validate Get-EvergreenApp works with: deviceTRUST..deviceTRUST: should have a URI property that is a string" time="0.7909" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent" executed="True" result="Success" success="True" time="558.1435" asserts="0" description="Get-EvergreenApp MicrosoftAzureWindowsVMAgent">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent." executed="True" result="Success" success="True" time="0.9604" asserts="0" description="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent.">
                <results>
                  <test-case description="MicrosoftAzureWindowsVMAgent: should return something" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent: should return something" time="0.1373" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureWindowsVMAgent: should return the expected output type" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent: should return the expected output type" time="0.156" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureWindowsVMAgent: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent: should have a Version property that is a string" time="0.1755" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureWindowsVMAgent: should have a valid version number" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent: should have a valid version number" time="0.1693" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureWindowsVMAgent: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftAzureWindowsVMAgent.Validate Get-EvergreenApp works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent: should have a URI property that is a string" time="0.1686" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru11" executed="True" result="Success" success="True" time="560.9085" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru11">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11." executed="True" result="Success" success="True" time="1.2629" asserts="0" description="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11.">
                <results>
                  <test-case description="AdoptOpenJDKSemuru11: should return something" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11: should return something" time="0.139" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru11: should return the expected output type" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11: should return the expected output type" time="0.1887" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru11: should have a Version property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11: should have a Version property that is a string" time="0.272" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru11: should have a valid version number" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11: should have a valid version number" time="0.2459" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru11: should have a URI property that is a string" name="Get-EvergreenApp AdoptOpenJDKSemuru11.Validate Get-EvergreenApp works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11: should have a URI property that is a string" time="0.2573" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ControlUpAgent" executed="True" result="Success" success="True" time="562.2306" asserts="0" description="Get-EvergreenApp ControlUpAgent">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent." executed="True" result="Success" success="True" time="0.9161" asserts="0" description="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent.">
                <results>
                  <test-case description="ControlUpAgent: should return something" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent..ControlUpAgent: should return something" time="0.1387" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpAgent: should return the expected output type" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent..ControlUpAgent: should return the expected output type" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpAgent: should have a Version property that is a string" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent..ControlUpAgent: should have a Version property that is a string" time="0.1574" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpAgent: should have a valid version number" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent..ControlUpAgent: should have a valid version number" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpAgent: should have a URI property that is a string" name="Get-EvergreenApp ControlUpAgent.Validate Get-EvergreenApp works with: ControlUpAgent..ControlUpAgent: should have a URI property that is a string" time="0.159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MendeleyDesktop" executed="True" result="Success" success="True" time="563.6485" asserts="0" description="Get-EvergreenApp MendeleyDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop." executed="True" result="Success" success="True" time="0.8674" asserts="0" description="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop.">
                <results>
                  <test-case description="MendeleyDesktop: should return something" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop..MendeleyDesktop: should return something" time="0.1515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MendeleyDesktop: should return the expected output type" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop..MendeleyDesktop: should return the expected output type" time="0.1388" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MendeleyDesktop: should have a Version property that is a string" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop..MendeleyDesktop: should have a Version property that is a string" time="0.1393" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MendeleyDesktop: should have a valid version number" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop..MendeleyDesktop: should have a valid version number" time="0.1384" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MendeleyDesktop: should have a URI property that is a string" name="Get-EvergreenApp MendeleyDesktop.Validate Get-EvergreenApp works with: MendeleyDesktop..MendeleyDesktop: should have a URI property that is a string" time="0.1462" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp JamTreeSizeFree" executed="True" result="Success" success="True" time="565.4607" asserts="0" description="Get-EvergreenApp JamTreeSizeFree">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree." executed="True" result="Success" success="True" time="0.93" asserts="0" description="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree.">
                <results>
                  <test-case description="JamTreeSizeFree: should return something" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree..JamTreeSizeFree: should return something" time="0.1459" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeFree: should return the expected output type" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree..JamTreeSizeFree: should return the expected output type" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeFree: should have a Version property that is a string" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree..JamTreeSizeFree: should have a Version property that is a string" time="0.1602" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeFree: should have a valid version number" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree..JamTreeSizeFree: should have a valid version number" time="0.1519" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeFree: should have a URI property that is a string" name="Get-EvergreenApp JamTreeSizeFree.Validate Get-EvergreenApp works with: JamTreeSizeFree..JamTreeSizeFree: should have a URI property that is a string" time="0.1604" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftVisualStudio" executed="True" result="Success" success="True" time="566.9059" asserts="0" description="Get-EvergreenApp MicrosoftVisualStudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio." executed="True" result="Success" success="True" time="0.8866" asserts="0" description="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio.">
                <results>
                  <test-case description="MicrosoftVisualStudio: should return something" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio..MicrosoftVisualStudio: should return something" time="0.1391" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudio: should return the expected output type" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio..MicrosoftVisualStudio: should return the expected output type" time="0.1585" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudio: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio..MicrosoftVisualStudio: should have a Version property that is a string" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudio: should have a valid version number" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio..MicrosoftVisualStudio: should have a valid version number" time="0.139" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudio: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftVisualStudio.Validate Get-EvergreenApp works with: MicrosoftVisualStudio..MicrosoftVisualStudio: should have a URI property that is a string" time="0.1395" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp LogMeInGoToOpener" executed="True" result="Success" success="True" time="568.4017" asserts="0" description="Get-EvergreenApp LogMeInGoToOpener">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener." executed="True" result="Success" success="True" time="0.8673" asserts="0" description="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener.">
                <results>
                  <test-case description="LogMeInGoToOpener: should return something" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener..LogMeInGoToOpener: should return something" time="0.1429" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToOpener: should return the expected output type" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener..LogMeInGoToOpener: should return the expected output type" time="0.1376" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToOpener: should have a Version property that is a string" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener..LogMeInGoToOpener: should have a Version property that is a string" time="0.1426" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToOpener: should have a valid version number" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener..LogMeInGoToOpener: should have a valid version number" time="0.1388" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToOpener: should have a URI property that is a string" name="Get-EvergreenApp LogMeInGoToOpener.Validate Get-EvergreenApp works with: LogMeInGoToOpener..LogMeInGoToOpener: should have a URI property that is a string" time="0.1471" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults" executed="True" result="Success" success="True" time="570.1669" asserts="0" description="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults." executed="True" result="Success" success="True" time="0.9831" asserts="0" description="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults.">
                <results>
                  <test-case description="stealthpuppyWindowsCustomisedDefaults: should return something" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults: should return something" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="stealthpuppyWindowsCustomisedDefaults: should return the expected output type" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults: should return the expected output type" time="0.1569" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="stealthpuppyWindowsCustomisedDefaults: should have a Version property that is a string" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults: should have a Version property that is a string" time="0.1809" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="stealthpuppyWindowsCustomisedDefaults: should have a valid version number" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults: should have a valid version number" time="0.1698" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="stealthpuppyWindowsCustomisedDefaults: should have a URI property that is a string" name="Get-EvergreenApp stealthpuppyWindowsCustomisedDefaults.Validate Get-EvergreenApp works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults: should have a URI property that is a string" time="0.1747" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TelerikFiddlerEverywhere" executed="True" result="Success" success="True" time="571.6291" asserts="0" description="Get-EvergreenApp TelerikFiddlerEverywhere">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere." executed="True" result="Success" success="True" time="0.9043" asserts="0" description="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere.">
                <results>
                  <test-case description="TelerikFiddlerEverywhere: should return something" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere: should return something" time="0.1518" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerEverywhere: should return the expected output type" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere: should return the expected output type" time="0.146" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerEverywhere: should have a Version property that is a string" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere: should have a Version property that is a string" time="0.1487" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerEverywhere: should have a valid version number" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere: should have a valid version number" time="0.145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerEverywhere: should have a URI property that is a string" name="Get-EvergreenApp TelerikFiddlerEverywhere.Validate Get-EvergreenApp works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere: should have a URI property that is a string" time="0.1492" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp RDAnalyzer" executed="True" result="Success" success="True" time="573.3924" asserts="0" description="Get-EvergreenApp RDAnalyzer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer." executed="True" result="Success" success="True" time="0.921" asserts="0" description="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer.">
                <results>
                  <test-case description="RDAnalyzer: should return something" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer..RDAnalyzer: should return something" time="0.1513" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RDAnalyzer: should return the expected output type" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer..RDAnalyzer: should return the expected output type" time="0.1656" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RDAnalyzer: should have a Version property that is a string" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer..RDAnalyzer: should have a Version property that is a string" time="0.1531" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RDAnalyzer: should have a valid version number" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer..RDAnalyzer: should have a valid version number" time="0.1605" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RDAnalyzer: should have a URI property that is a string" name="Get-EvergreenApp RDAnalyzer.Validate Get-EvergreenApp works with: RDAnalyzer..RDAnalyzer: should have a URI property that is a string" time="0.141" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Slack" executed="True" result="Success" success="True" time="575.1716" asserts="0" description="Get-EvergreenApp Slack">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack." executed="True" result="Success" success="True" time="1.0198" asserts="0" description="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack.">
                <results>
                  <test-case description="Slack: should return something" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack..Slack: should return something" time="0.1405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Slack: should return the expected output type" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack..Slack: should return the expected output type" time="0.1645" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Slack: should have a Version property that is a string" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack..Slack: should have a Version property that is a string" time="0.1874" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Slack: should have a valid version number" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack..Slack: should have a valid version number" time="0.1883" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Slack: should have a URI property that is a string" name="Get-EvergreenApp Slack.Validate Get-EvergreenApp works with: Slack..Slack: should have a URI property that is a string" time="0.1927" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Postman" executed="True" result="Success" success="True" time="577.2212" asserts="0" description="Get-EvergreenApp Postman">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman." executed="True" result="Success" success="True" time="0.9108" asserts="0" description="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman.">
                <results>
                  <test-case description="Postman: should return something" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman..Postman: should return something" time="0.1395" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Postman: should return the expected output type" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman..Postman: should return the expected output type" time="0.1463" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Postman: should have a Version property that is a string" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman..Postman: should have a Version property that is a string" time="0.1651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Postman: should have a valid version number" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman..Postman: should have a valid version number" time="0.1571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Postman: should have a URI property that is a string" name="Get-EvergreenApp Postman.Validate Get-EvergreenApp works with: Postman..Postman: should have a URI property that is a string" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp BitwardenDesktop" executed="True" result="Success" success="True" time="578.9554" asserts="0" description="Get-EvergreenApp BitwardenDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop." executed="True" result="Success" success="True" time="0.8699" asserts="0" description="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop.">
                <results>
                  <test-case description="BitwardenDesktop: should return something" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop..BitwardenDesktop: should return something" time="0.1414" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BitwardenDesktop: should return the expected output type" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop..BitwardenDesktop: should return the expected output type" time="0.1421" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BitwardenDesktop: should have a Version property that is a string" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop..BitwardenDesktop: should have a Version property that is a string" time="0.1514" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BitwardenDesktop: should have a valid version number" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop..BitwardenDesktop: should have a valid version number" time="0.1407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BitwardenDesktop: should have a URI property that is a string" name="Get-EvergreenApp BitwardenDesktop.Validate Get-EvergreenApp works with: BitwardenDesktop..BitwardenDesktop: should have a URI property that is a string" time="0.1413" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Handbrake" executed="True" result="Success" success="True" time="581.2939" asserts="0" description="Get-EvergreenApp Handbrake">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake." executed="True" result="Success" success="True" time="1.2901" asserts="0" description="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake.">
                <results>
                  <test-case description="Handbrake: should return something" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake..Handbrake: should return something" time="0.1493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Handbrake: should return the expected output type" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake..Handbrake: should return the expected output type" time="0.1999" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Handbrake: should have a Version property that is a string" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake..Handbrake: should have a Version property that is a string" time="0.2653" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Handbrake: should have a valid version number" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake..Handbrake: should have a valid version number" time="0.2546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Handbrake: should have a URI property that is a string" name="Get-EvergreenApp Handbrake.Validate Get-EvergreenApp works with: Handbrake..Handbrake: should have a URI property that is a string" time="0.2714" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SignalDesktop" executed="True" result="Success" success="True" time="582.8518" asserts="0" description="Get-EvergreenApp SignalDesktop">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop." executed="True" result="Success" success="True" time="0.8567" asserts="0" description="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop.">
                <results>
                  <test-case description="SignalDesktop: should return something" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop..SignalDesktop: should return something" time="0.1531" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SignalDesktop: should return the expected output type" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop..SignalDesktop: should return the expected output type" time="0.1371" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SignalDesktop: should have a Version property that is a string" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop..SignalDesktop: should have a Version property that is a string" time="0.1341" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SignalDesktop: should have a valid version number" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop..SignalDesktop: should have a valid version number" time="0.1323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SignalDesktop: should have a URI property that is a string" name="Get-EvergreenApp SignalDesktop.Validate Get-EvergreenApp works with: SignalDesktop..SignalDesktop: should have a URI property that is a string" time="0.1354" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AutoDarkMode" executed="True" result="Success" success="True" time="584.6241" asserts="0" description="Get-EvergreenApp AutoDarkMode">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode." executed="True" result="Success" success="True" time="0.9712" asserts="0" description="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode.">
                <results>
                  <test-case description="AutoDarkMode: should return something" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode..AutoDarkMode: should return something" time="0.1409" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoDarkMode: should return the expected output type" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode..AutoDarkMode: should return the expected output type" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoDarkMode: should have a Version property that is a string" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode..AutoDarkMode: should have a Version property that is a string" time="0.1755" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoDarkMode: should have a valid version number" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode..AutoDarkMode: should have a valid version number" time="0.1808" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoDarkMode: should have a URI property that is a string" name="Get-EvergreenApp AutoDarkMode.Validate Get-EvergreenApp works with: AutoDarkMode..AutoDarkMode: should have a URI property that is a string" time="0.1806" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp GitExtensions" executed="True" result="Success" success="True" time="586.3283" asserts="0" description="Get-EvergreenApp GitExtensions">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions." executed="True" result="Success" success="True" time="0.9808" asserts="0" description="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions.">
                <results>
                  <test-case description="GitExtensions: should return something" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions..GitExtensions: should return something" time="0.1517" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitExtensions: should return the expected output type" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions..GitExtensions: should return the expected output type" time="0.1493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitExtensions: should have a Version property that is a string" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions..GitExtensions: should have a Version property that is a string" time="0.1686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitExtensions: should have a valid version number" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions..GitExtensions: should have a valid version number" time="0.1672" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitExtensions: should have a URI property that is a string" name="Get-EvergreenApp GitExtensions.Validate Get-EvergreenApp works with: GitExtensions..GitExtensions: should have a URI property that is a string" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp SmartBearSoapUI" executed="True" result="Success" success="True" time="588.1068" asserts="0" description="Get-EvergreenApp SmartBearSoapUI">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI." executed="True" result="Success" success="True" time="0.8781" asserts="0" description="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI.">
                <results>
                  <test-case description="SmartBearSoapUI: should return something" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI..SmartBearSoapUI: should return something" time="0.1359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SmartBearSoapUI: should return the expected output type" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI..SmartBearSoapUI: should return the expected output type" time="0.1473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SmartBearSoapUI: should have a Version property that is a string" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI..SmartBearSoapUI: should have a Version property that is a string" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SmartBearSoapUI: should have a valid version number" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI..SmartBearSoapUI: should have a valid version number" time="0.1476" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SmartBearSoapUI: should have a URI property that is a string" name="Get-EvergreenApp SmartBearSoapUI.Validate Get-EvergreenApp works with: SmartBearSoapUI..SmartBearSoapUI: should have a URI property that is a string" time="0.1464" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AirtameApp" executed="True" result="Success" success="True" time="590.3651" asserts="0" description="Get-EvergreenApp AirtameApp">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp." executed="True" result="Success" success="True" time="1.0454" asserts="0" description="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp.">
                <results>
                  <test-case description="AirtameApp: should return something" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp..AirtameApp: should return something" time="0.1399" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AirtameApp: should return the expected output type" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp..AirtameApp: should return the expected output type" time="0.1547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AirtameApp: should have a Version property that is a string" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp..AirtameApp: should have a Version property that is a string" time="0.1862" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AirtameApp: should have a valid version number" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp..AirtameApp: should have a valid version number" time="0.2086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AirtameApp: should have a URI property that is a string" name="Get-EvergreenApp AirtameApp.Validate Get-EvergreenApp works with: AirtameApp..AirtameApp: should have a URI property that is a string" time="0.1951" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp KeePass" executed="True" result="Success" success="True" time="592.1761" asserts="0" description="Get-EvergreenApp KeePass">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass." executed="True" result="Success" success="True" time="0.917" asserts="0" description="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass.">
                <results>
                  <test-case description="KeePass: should return something" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass..KeePass: should return something" time="0.1441" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePass: should return the expected output type" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass..KeePass: should return the expected output type" time="0.1565" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePass: should have a Version property that is a string" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass..KeePass: should have a Version property that is a string" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePass: should have a valid version number" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass..KeePass: should have a valid version number" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePass: should have a URI property that is a string" name="Get-EvergreenApp KeePass.Validate Get-EvergreenApp works with: KeePass..KeePass: should have a URI property that is a string" time="0.1554" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificJAWS" executed="True" result="Success" success="True" time="594.041" asserts="0" description="Get-EvergreenApp FreedomScientificJAWS">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS." executed="True" result="Success" success="True" time="0.9781" asserts="0" description="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS.">
                <results>
                  <test-case description="FreedomScientificJAWS: should return something" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS..FreedomScientificJAWS: should return something" time="0.1553" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificJAWS: should return the expected output type" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS..FreedomScientificJAWS: should return the expected output type" time="0.1582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificJAWS: should have a Version property that is a string" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS..FreedomScientificJAWS: should have a Version property that is a string" time="0.1559" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificJAWS: should have a valid version number" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS..FreedomScientificJAWS: should have a valid version number" time="0.1641" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificJAWS: should have a URI property that is a string" name="Get-EvergreenApp FreedomScientificJAWS.Validate Get-EvergreenApp works with: FreedomScientificJAWS..FreedomScientificJAWS: should have a URI property that is a string" time="0.1892" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TeamViewer" executed="True" result="Success" success="True" time="595.4482" asserts="0" description="Get-EvergreenApp TeamViewer">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer." executed="True" result="Success" success="True" time="0.9504" asserts="0" description="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer.">
                <results>
                  <test-case description="TeamViewer: should return something" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer..TeamViewer: should return something" time="0.1615" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeamViewer: should return the expected output type" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer..TeamViewer: should return the expected output type" time="0.1548" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeamViewer: should have a Version property that is a string" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer..TeamViewer: should have a Version property that is a string" time="0.162" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeamViewer: should have a valid version number" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer..TeamViewer: should have a valid version number" time="0.1467" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeamViewer: should have a URI property that is a string" name="Get-EvergreenApp TeamViewer.Validate Get-EvergreenApp works with: TeamViewer..TeamViewer: should have a URI property that is a string" time="0.1659" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TechSmithCamtasia" executed="True" result="Success" success="True" time="596.9984" asserts="0" description="Get-EvergreenApp TechSmithCamtasia">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia." executed="True" result="Success" success="True" time="0.9936" asserts="0" description="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia.">
                <results>
                  <test-case description="TechSmithCamtasia: should return something" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia..TechSmithCamtasia: should return something" time="0.1533" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithCamtasia: should return the expected output type" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia..TechSmithCamtasia: should return the expected output type" time="0.16" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithCamtasia: should have a Version property that is a string" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia..TechSmithCamtasia: should have a Version property that is a string" time="0.1716" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithCamtasia: should have a valid version number" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia..TechSmithCamtasia: should have a valid version number" time="0.1704" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithCamtasia: should have a URI property that is a string" name="Get-EvergreenApp TechSmithCamtasia.Validate Get-EvergreenApp works with: TechSmithCamtasia..TechSmithCamtasia: should have a URI property that is a string" time="0.1824" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificFusion" executed="True" result="Success" success="True" time="598.5556" asserts="0" description="Get-EvergreenApp FreedomScientificFusion">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion." executed="True" result="Success" success="True" time="0.8211" asserts="0" description="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion.">
                <results>
                  <test-case description="FreedomScientificFusion: should return something" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion..FreedomScientificFusion: should return something" time="0.1399" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificFusion: should return the expected output type" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion..FreedomScientificFusion: should return the expected output type" time="0.1352" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificFusion: should have a Version property that is a string" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion..FreedomScientificFusion: should have a Version property that is a string" time="0.1337" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificFusion: should have a valid version number" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion..FreedomScientificFusion: should have a valid version number" time="0.132" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificFusion: should have a URI property that is a string" name="Get-EvergreenApp FreedomScientificFusion.Validate Get-EvergreenApp works with: FreedomScientificFusion..FreedomScientificFusion: should have a URI property that is a string" time="0.1367" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AmazonCorretto" executed="True" result="Success" success="True" time="602.3698" asserts="0" description="Get-EvergreenApp AmazonCorretto">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto." executed="True" result="Success" success="True" time="1.5195" asserts="0" description="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto.">
                <results>
                  <test-case description="AmazonCorretto: should return something" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto..AmazonCorretto: should return something" time="0.1525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AmazonCorretto: should return the expected output type" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto..AmazonCorretto: should return the expected output type" time="0.2446" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AmazonCorretto: should have a Version property that is a string" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto..AmazonCorretto: should have a Version property that is a string" time="0.3168" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AmazonCorretto: should have a valid version number" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto..AmazonCorretto: should have a valid version number" time="0.3268" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AmazonCorretto: should have a URI property that is a string" name="Get-EvergreenApp AmazonCorretto.Validate Get-EvergreenApp works with: AmazonCorretto..AmazonCorretto: should have a URI property that is a string" time="0.3229" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefWorkstation" executed="True" result="Success" success="True" time="607.4354" asserts="0" description="Get-EvergreenApp ProgressChefWorkstation">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation." executed="True" result="Success" success="True" time="1.8439" asserts="0" description="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation.">
                <results>
                  <test-case description="ProgressChefWorkstation: should return something" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation..ProgressChefWorkstation: should return something" time="0.1448" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefWorkstation: should return the expected output type" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation..ProgressChefWorkstation: should return the expected output type" time="0.2598" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefWorkstation: should have a Version property that is a string" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation..ProgressChefWorkstation: should have a Version property that is a string" time="0.4298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefWorkstation: should have a valid version number" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation..ProgressChefWorkstation: should have a valid version number" time="0.4408" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefWorkstation: should have a URI property that is a string" name="Get-EvergreenApp ProgressChefWorkstation.Validate Get-EvergreenApp works with: ProgressChefWorkstation..ProgressChefWorkstation: should have a URI property that is a string" time="0.4134" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AWSSAMCLI" executed="True" result="Success" success="True" time="609.1681" asserts="0" description="Get-EvergreenApp AWSSAMCLI">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI." executed="True" result="Success" success="True" time="0.9744" asserts="0" description="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI.">
                <results>
                  <test-case description="AWSSAMCLI: should return something" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI..AWSSAMCLI: should return something" time="0.1613" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSSAMCLI: should return the expected output type" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI..AWSSAMCLI: should return the expected output type" time="0.171" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSSAMCLI: should have a Version property that is a string" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI..AWSSAMCLI: should have a Version property that is a string" time="0.1558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSSAMCLI: should have a valid version number" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI..AWSSAMCLI: should have a valid version number" time="0.1517" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSSAMCLI: should have a URI property that is a string" name="Get-EvergreenApp AWSSAMCLI.Validate Get-EvergreenApp works with: AWSSAMCLI..AWSSAMCLI: should have a URI property that is a string" time="0.159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp diagrams.net" executed="True" result="Success" success="True" time="611.385" asserts="0" description="Get-EvergreenApp diagrams.net">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net." executed="True" result="Success" success="True" time="1.2562" asserts="0" description="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net.">
                <results>
                  <test-case description="diagrams.net: should return something" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net..diagrams.net: should return something" time="0.1459" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="diagrams.net: should return the expected output type" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net..diagrams.net: should return the expected output type" time="0.1793" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="diagrams.net: should have a Version property that is a string" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net..diagrams.net: should have a Version property that is a string" time="0.269" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="diagrams.net: should have a valid version number" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net..diagrams.net: should have a valid version number" time="0.2334" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="diagrams.net: should have a URI property that is a string" name="Get-EvergreenApp diagrams.net.Validate Get-EvergreenApp works with: diagrams.net..diagrams.net: should have a URI property that is a string" time="0.2667" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin18" executed="True" result="Success" success="True" time="613.2227" asserts="0" description="Get-EvergreenApp AdoptiumTemurin18">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18." executed="True" result="Success" success="True" time="1.1621" asserts="0" description="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18.">
                <results>
                  <test-case description="AdoptiumTemurin18: should return something" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18..AdoptiumTemurin18: should return something" time="0.1676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin18: should return the expected output type" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18..AdoptiumTemurin18: should return the expected output type" time="0.1839" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin18: should have a Version property that is a string" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18..AdoptiumTemurin18: should have a Version property that is a string" time="0.2067" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin18: should have a valid version number" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18..AdoptiumTemurin18: should have a valid version number" time="0.2191" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin18: should have a URI property that is a string" name="Get-EvergreenApp AdoptiumTemurin18.Validate Get-EvergreenApp works with: AdoptiumTemurin18..AdoptiumTemurin18: should have a URI property that is a string" time="0.2197" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Protege" executed="True" result="Success" success="True" time="615.0254" asserts="0" description="Get-EvergreenApp Protege">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege." executed="True" result="Success" success="True" time="0.9668" asserts="0" description="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege.">
                <results>
                  <test-case description="Protege: should return something" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege..Protege: should return something" time="0.1506" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Protege: should return the expected output type" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege..Protege: should return the expected output type" time="0.1605" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Protege: should have a Version property that is a string" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege..Protege: should have a Version property that is a string" time="0.1604" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Protege: should have a valid version number" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege..Protege: should have a valid version number" time="0.1549" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Protege: should have a URI property that is a string" name="Get-EvergreenApp Protege.Validate Get-EvergreenApp works with: Protege..Protege: should have a URI property that is a string" time="0.1626" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp XnSoftXnConvert" executed="True" result="Success" success="True" time="616.741" asserts="0" description="Get-EvergreenApp XnSoftXnConvert">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert." executed="True" result="Success" success="True" time="1.0322" asserts="0" description="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert.">
                <results>
                  <test-case description="XnSoftXnConvert: should return something" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert..XnSoftXnConvert: should return something" time="0.176" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnConvert: should return the expected output type" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert..XnSoftXnConvert: should return the expected output type" time="0.1931" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnConvert: should have a Version property that is a string" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert..XnSoftXnConvert: should have a Version property that is a string" time="0.1799" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnConvert: should have a valid version number" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert..XnSoftXnConvert: should have a valid version number" time="0.167" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnConvert: should have a URI property that is a string" name="Get-EvergreenApp XnSoftXnConvert.Validate Get-EvergreenApp works with: XnSoftXnConvert..XnSoftXnConvert: should have a URI property that is a string" time="0.1652" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp USBPcap" executed="True" result="Success" success="True" time="618.4082" asserts="0" description="Get-EvergreenApp USBPcap">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap." executed="True" result="Success" success="True" time="0.9123" asserts="0" description="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap.">
                <results>
                  <test-case description="USBPcap: should return something" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap..USBPcap: should return something" time="0.1525" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="USBPcap: should return the expected output type" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap..USBPcap: should return the expected output type" time="0.1589" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="USBPcap: should have a Version property that is a string" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap..USBPcap: should have a Version property that is a string" time="0.1591" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="USBPcap: should have a valid version number" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap..USBPcap: should have a valid version number" time="0.1411" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="USBPcap: should have a URI property that is a string" name="Get-EvergreenApp USBPcap.Validate Get-EvergreenApp works with: USBPcap..USBPcap: should have a URI property that is a string" time="0.1413" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp TechSmithSnagit" executed="True" result="Success" success="True" time="620.1477" asserts="0" description="Get-EvergreenApp TechSmithSnagit">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit." executed="True" result="Success" success="True" time="1.1669" asserts="0" description="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit.">
                <results>
                  <test-case description="TechSmithSnagit: should return something" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit..TechSmithSnagit: should return something" time="0.1736" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithSnagit: should return the expected output type" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit..TechSmithSnagit: should return the expected output type" time="0.2351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithSnagit: should have a Version property that is a string" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit..TechSmithSnagit: should have a Version property that is a string" time="0.1976" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithSnagit: should have a valid version number" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit..TechSmithSnagit: should have a valid version number" time="0.2003" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithSnagit: should have a URI property that is a string" name="Get-EvergreenApp TechSmithSnagit.Validate Get-EvergreenApp works with: TechSmithSnagit..TechSmithSnagit: should have a URI property that is a string" time="0.2116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp Zoom" executed="True" result="Success" success="True" time="625.6894" asserts="0" description="Get-EvergreenApp Zoom">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom." executed="True" result="Success" success="True" time="2.3444" asserts="0" description="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom.">
                <results>
                  <test-case description="Zoom: should return something" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom..Zoom: should return something" time="0.1438" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zoom: should return the expected output type" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom..Zoom: should return the expected output type" time="0.3308" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zoom: should have a Version property that is a string" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom..Zoom: should have a Version property that is a string" time="0.5724" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zoom: should have a valid version number" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom..Zoom: should have a valid version number" time="0.5368" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zoom: should have a URI property that is a string" name="Get-EvergreenApp Zoom.Validate Get-EvergreenApp works with: Zoom..Zoom: should have a URI property that is a string" time="0.572" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificZoomText" executed="True" result="Success" success="True" time="627.3416" asserts="0" description="Get-EvergreenApp FreedomScientificZoomText">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText." executed="True" result="Success" success="True" time="0.9847" asserts="0" description="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText.">
                <results>
                  <test-case description="FreedomScientificZoomText: should return something" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText..FreedomScientificZoomText: should return something" time="0.1524" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificZoomText: should return the expected output type" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText..FreedomScientificZoomText: should return the expected output type" time="0.1766" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificZoomText: should have a Version property that is a string" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText..FreedomScientificZoomText: should have a Version property that is a string" time="0.1504" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificZoomText: should have a valid version number" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText..FreedomScientificZoomText: should have a valid version number" time="0.1539" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificZoomText: should have a URI property that is a string" name="Get-EvergreenApp FreedomScientificZoomText.Validate Get-EvergreenApp works with: FreedomScientificZoomText..FreedomScientificZoomText: should have a URI property that is a string" time="0.1723" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MestrelabMnova" executed="True" result="Success" success="True" time="630.0208" asserts="0" description="Get-EvergreenApp MestrelabMnova">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova." executed="True" result="Success" success="True" time="0.9507" asserts="0" description="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova.">
                <results>
                  <test-case description="MestrelabMnova: should return something" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova..MestrelabMnova: should return something" time="0.134" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MestrelabMnova: should return the expected output type" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova..MestrelabMnova: should return the expected output type" time="0.1493" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MestrelabMnova: should have a Version property that is a string" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova..MestrelabMnova: should have a Version property that is a string" time="0.1652" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MestrelabMnova: should have a valid version number" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova..MestrelabMnova: should have a valid version number" time="0.1701" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MestrelabMnova: should have a URI property that is a string" name="Get-EvergreenApp MestrelabMnova.Validate Get-EvergreenApp works with: MestrelabMnova..MestrelabMnova: should have a URI property that is a string" time="0.1845" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp jrsoftwareInnoSetup" executed="True" result="Success" success="True" time="631.7743" asserts="0" description="Get-EvergreenApp jrsoftwareInnoSetup">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup." executed="True" result="Success" success="True" time="0.8978" asserts="0" description="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup.">
                <results>
                  <test-case description="jrsoftwareInnoSetup: should return something" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup: should return something" time="0.1697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jrsoftwareInnoSetup: should return the expected output type" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup: should return the expected output type" time="0.158" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jrsoftwareInnoSetup: should have a Version property that is a string" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup: should have a Version property that is a string" time="0.1331" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jrsoftwareInnoSetup: should have a valid version number" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup: should have a valid version number" time="0.1285" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jrsoftwareInnoSetup: should have a URI property that is a string" name="Get-EvergreenApp jrsoftwareInnoSetup.Validate Get-EvergreenApp works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup: should have a URI property that is a string" time="0.1325" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftOutlook" executed="True" result="Success" success="True" time="633.13" asserts="0" description="Get-EvergreenApp MicrosoftOutlook">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook." executed="True" result="Success" success="True" time="0.8959" asserts="0" description="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook.">
                <results>
                  <test-case description="MicrosoftOutlook: should return something" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook..MicrosoftOutlook: should return something" time="0.133" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOutlook: should return the expected output type" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook..MicrosoftOutlook: should return the expected output type" time="0.1593" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOutlook: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook..MicrosoftOutlook: should have a Version property that is a string" time="0.1573" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOutlook: should have a valid version number" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook..MicrosoftOutlook: should have a valid version number" time="0.1367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOutlook: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftOutlook.Validate Get-EvergreenApp works with: MicrosoftOutlook..MicrosoftOutlook: should have a URI property that is a string" time="0.1556" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureDataStudio" executed="True" result="Success" success="True" time="636.1891" asserts="0" description="Get-EvergreenApp MicrosoftAzureDataStudio">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio." executed="True" result="Success" success="True" time="1.221" asserts="0" description="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio.">
                <results>
                  <test-case description="MicrosoftAzureDataStudio: should return something" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio: should return something" time="0.1684" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureDataStudio: should return the expected output type" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio: should return the expected output type" time="0.2065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureDataStudio: should have a Version property that is a string" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio: should have a Version property that is a string" time="0.2398" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureDataStudio: should have a valid version number" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio: should have a valid version number" time="0.2195" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureDataStudio: should have a URI property that is a string" name="Get-EvergreenApp MicrosoftAzureDataStudio.Validate Get-EvergreenApp works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio: should have a URI property that is a string" time="0.2265" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-EvergreenApp fail tests" executed="True" result="Success" success="True" time="637.0108" asserts="0" description="Get-EvergreenApp fail tests">
            <results>
              <test-suite type="TestFixture" name="Get-EvergreenApp fail tests.Validate 'Get-EvergreenApp fails gracefully" executed="True" result="Success" success="True" time="0.6593" asserts="0" description="Get-EvergreenApp fail tests.Validate 'Get-EvergreenApp fails gracefully">
                <results>
                  <test-case description="Should Throw with invalid app" name="Get-EvergreenApp fail tests.Validate 'Get-EvergreenApp fails gracefully.Should Throw with invalid app" time="0.5118" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Find-EvergreenApp" executed="True" result="Success" success="True" time="639.6915" asserts="0" description="Find-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Find-EvergreenApp.Validate Find-EvergreenApp works" executed="True" result="Success" success="True" time="1.9601" asserts="0" description="Find-EvergreenApp.Validate Find-EvergreenApp works">
                <results>
                  <test-case description="Should not Throw" name="Find-EvergreenApp.Validate Find-EvergreenApp works.Should not Throw" time="0.9051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should returns an object" name="Find-EvergreenApp.Validate Find-EvergreenApp works.Should returns an object" time="0.886" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Find-EvergreenApp.Validate Find-EvergreenApp fails gracefully" executed="True" result="Success" success="True" time="2.5388" asserts="0" description="Find-EvergreenApp.Validate Find-EvergreenApp fails gracefully">
                <results>
                  <test-case description="Should Throw with invalid app" name="Find-EvergreenApp.Validate Find-EvergreenApp fails gracefully.Should Throw with invalid app" time="0.4365" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="642.507" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64." executed="True" result="Success" success="True" time="2.6706" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64..Save-EvergreenApp should not Throw" time="2.3387" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64..Should save in the right path" time="0.1903" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="647.0601" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86." executed="True" result="Success" success="True" time="4.3884" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with x86.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86..Save-EvergreenApp should not Throw" time="4.0809" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86..Should save in the right path" time="0.1586" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="652.6021" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64." executed="True" result="Success" success="True" time="5.3947" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with x64.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64..Save-EvergreenApp should not Throw" time="5.0647" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64..Should save in the right path" time="0.1783" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="657.7424" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64." executed="True" result="Success" success="True" time="5.0046" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with x64.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64..Save-EvergreenApp should not Throw" time="4.6807" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x64..Should save in the right path" time="0.1613" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="661.0273" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86." executed="True" result="Success" success="True" time="3.1557" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with x86.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86..Save-EvergreenApp should not Throw" time="2.8062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with x86..Should save in the right path" time="0.1962" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Save-EvergreenApp" executed="True" result="Success" success="True" time="664.129" asserts="0" description="Save-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64." executed="True" result="Success" success="True" time="2.9494" asserts="0" description="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64.">
                <results>
                  <test-case description="Save-EvergreenApp should not Throw" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64..Save-EvergreenApp should not Throw" time="2.6333" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should save in the right path" name="Save-EvergreenApp.Validate Save-EvergreenApp works with arm64..Should save in the right path" time="0.1765" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="665.0258" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitReader." executed="True" result="Success" success="True" time="0.7689" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitReader.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FoxitReader' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitReader..'Export-EvergreenManifest -Name FoxitReader' should not Throw" time="0.2919" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitReader has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitReader..FoxitReader has expected properties" time="0.338" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="665.9159" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ArtifexGhostscript." executed="True" result="Success" success="True" time="0.7219" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ArtifexGhostscript.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ArtifexGhostscript' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ArtifexGhostscript..'Export-EvergreenManifest -Name ArtifexGhostscript' should not Throw" time="0.2286" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ArtifexGhostscript has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ArtifexGhostscript..ArtifexGhostscript has expected properties" time="0.3358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="666.8138" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftWindowsPackageManagerClient." executed="True" result="Success" success="True" time="0.7337" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftWindowsPackageManagerClient.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftWindowsPackageManagerClient' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftWindowsPackageManagerClient..'Export-EvergreenManifest -Name MicrosoftWindowsPackageManagerClient' should not Throw" time="0.2646" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftWindowsPackageManagerClient has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftWindowsPackageManagerClient..MicrosoftWindowsPackageManagerClient has expected properties" time="0.2984" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="667.707" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClientAlt." executed="True" result="Success" success="True" time="0.7589" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClientAlt.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareHorizonClientAlt' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClientAlt..'Export-EvergreenManifest -Name VMwareHorizonClientAlt' should not Throw" time="0.2784" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClientAlt has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClientAlt..VMwareHorizonClientAlt has expected properties" time="0.3169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="668.6074" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeXstudio." executed="True" result="Success" success="True" time="0.7439" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeXstudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TeXstudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeXstudio..'Export-EvergreenManifest -Name TeXstudio' should not Throw" time="0.2483" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeXstudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeXstudio..TeXstudio has expected properties" time="0.3265" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="669.4127" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jq." executed="True" result="Success" success="True" time="0.6822" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jq.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name jq' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jq..'Export-EvergreenManifest -Name jq' should not Throw" time="0.2502" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jq has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jq..jq has expected properties" time="0.2809" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="670.2279" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Naps2." executed="True" result="Success" success="True" time="0.6746" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Naps2.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Naps2' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Naps2..'Export-EvergreenManifest -Name Naps2' should not Throw" time="0.2353" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Naps2 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Naps2..Naps2 has expected properties" time="0.2916" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="671.2227" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GoogleChrome." executed="True" result="Success" success="True" time="0.8464" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GoogleChrome.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GoogleChrome' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GoogleChrome..'Export-EvergreenManifest -Name GoogleChrome' should not Throw" time="0.3389" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GoogleChrome has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GoogleChrome..GoogleChrome has expected properties" time="0.3538" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="672.098" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anaconda." executed="True" result="Success" success="True" time="0.7271" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anaconda.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Anaconda' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anaconda..'Export-EvergreenManifest -Name Anaconda' should not Throw" time="0.2297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anaconda has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anaconda..Anaconda has expected properties" time="0.3186" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="672.9986" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GeekSoftwarePDF24Creator." executed="True" result="Success" success="True" time="0.7628" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GeekSoftwarePDF24Creator.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GeekSoftwarePDF24Creator' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GeekSoftwarePDF24Creator..'Export-EvergreenManifest -Name GeekSoftwarePDF24Creator' should not Throw" time="0.2498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GeekSoftwarePDF24Creator has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GeekSoftwarePDF24Creator..GeekSoftwarePDF24Creator has expected properties" time="0.3325" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="673.8074" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Praat." executed="True" result="Success" success="True" time="0.6639" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Praat.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Praat' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Praat..'Export-EvergreenManifest -Name Praat' should not Throw" time="0.2246" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Praat has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Praat..Praat has expected properties" time="0.2827" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="674.5695" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenWebStart." executed="True" result="Success" success="True" time="0.6263" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenWebStart.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OpenWebStart' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenWebStart..'Export-EvergreenManifest -Name OpenWebStart' should not Throw" time="0.2083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenWebStart has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenWebStart..OpenWebStart has expected properties" time="0.2787" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="675.3694" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TogglDesktop." executed="True" result="Success" success="True" time="0.6759" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TogglDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TogglDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TogglDesktop..'Export-EvergreenManifest -Name TogglDesktop' should not Throw" time="0.2299" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TogglDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TogglDesktop..TogglDesktop has expected properties" time="0.2911" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="676.1913" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TrackerSoftwarePDFXChangeEditor." executed="True" result="Success" success="True" time="0.6952" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TrackerSoftwarePDFXChangeEditor.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TrackerSoftwarePDFXChangeEditor' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TrackerSoftwarePDFXChangeEditor..'Export-EvergreenManifest -Name TrackerSoftwarePDFXChangeEditor' should not Throw" time="0.263" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TrackerSoftwarePDFXChangeEditor has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TrackerSoftwarePDFXChangeEditor..TrackerSoftwarePDFXChangeEditor has expected properties" time="0.2864" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="676.9423" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AkeoRufus." executed="True" result="Success" success="True" time="0.621" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AkeoRufus.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AkeoRufus' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AkeoRufus..'Export-EvergreenManifest -Name AkeoRufus' should not Throw" time="0.2085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AkeoRufus has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AkeoRufus..AkeoRufus has expected properties" time="0.2764" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="677.6823" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureStorageExplorer." executed="True" result="Success" success="True" time="0.6056" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureStorageExplorer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftAzureStorageExplorer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureStorageExplorer..'Export-EvergreenManifest -Name MicrosoftAzureStorageExplorer' should not Throw" time="0.2066" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureStorageExplorer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureStorageExplorer..MicrosoftAzureStorageExplorer has expected properties" time="0.2627" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="678.4927" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MirantisLens." executed="True" result="Success" success="True" time="0.6868" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MirantisLens.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MirantisLens' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MirantisLens..'Export-EvergreenManifest -Name MirantisLens' should not Throw" time="0.2747" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MirantisLens has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MirantisLens..MirantisLens has expected properties" time="0.2785" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="679.4396" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleVirtualBox." executed="True" result="Success" success="True" time="0.8156" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleVirtualBox.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OracleVirtualBox' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleVirtualBox..'Export-EvergreenManifest -Name OracleVirtualBox' should not Throw" time="0.3576" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleVirtualBox has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleVirtualBox..OracleVirtualBox has expected properties" time="0.3183" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="680.2353" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpWaypoint." executed="True" result="Success" success="True" time="0.6653" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpWaypoint.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpWaypoint' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpWaypoint..'Export-EvergreenManifest -Name HashicorpWaypoint' should not Throw" time="0.2351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpWaypoint has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpWaypoint..HashicorpWaypoint has expected properties" time="0.2842" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="680.9402" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru18." executed="True" result="Success" success="True" time="0.5844" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru18.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDKSemuru18' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru18..'Export-EvergreenManifest -Name AdoptOpenJDKSemuru18' should not Throw" time="0.1968" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru18 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru18..AdoptOpenJDKSemuru18 has expected properties" time="0.259" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="681.7082" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeConnect." executed="True" result="Success" success="True" time="0.6491" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeConnect.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeConnect' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeConnect..'Export-EvergreenManifest -Name AdobeConnect' should not Throw" time="0.2318" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeConnect has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeConnect..AdobeConnect has expected properties" time="0.2732" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="682.4471" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBotFrameworkEmulator." executed="True" result="Success" success="True" time="0.616" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBotFrameworkEmulator.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftBotFrameworkEmulator' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBotFrameworkEmulator..'Export-EvergreenManifest -Name MicrosoftBotFrameworkEmulator' should not Throw" time="0.2122" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBotFrameworkEmulator has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBotFrameworkEmulator..MicrosoftBotFrameworkEmulator has expected properties" time="0.2722" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="683.2548" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSCLI." executed="True" result="Success" success="True" time="0.6785" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSCLI.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AWSCLI' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSCLI..'Export-EvergreenManifest -Name AWSCLI' should not Throw" time="0.252" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSCLI has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSCLI..AWSCLI has expected properties" time="0.2819" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="684.029" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenJDK." executed="True" result="Success" success="True" time="0.6455" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenJDK.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OpenJDK' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenJDK..'Export-EvergreenManifest -Name OpenJDK' should not Throw" time="0.2173" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenJDK has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenJDK..OpenJDK has expected properties" time="0.2896" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="684.8012" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeBrackets." executed="True" result="Success" success="True" time="0.6308" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeBrackets.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeBrackets' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeBrackets..'Export-EvergreenManifest -Name AdobeBrackets' should not Throw" time="0.2177" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeBrackets has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeBrackets..AdobeBrackets has expected properties" time="0.2721" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="685.6317" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsIntelliJIDEA." executed="True" result="Success" success="True" time="0.7044" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsIntelliJIDEA.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JetBrainsIntelliJIDEA' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsIntelliJIDEA..'Export-EvergreenManifest -Name JetBrainsIntelliJIDEA' should not Throw" time="0.2438" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsIntelliJIDEA has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsIntelliJIDEA..JetBrainsIntelliJIDEA has expected properties" time="0.2923" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="686.4655" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixVMTools." executed="True" result="Success" success="True" time="0.6826" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixVMTools.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name CitrixVMTools' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixVMTools..'Export-EvergreenManifest -Name CitrixVMTools' should not Throw" time="0.2278" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixVMTools has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixVMTools..CitrixVMTools has expected properties" time="0.3062" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="687.2803" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerToys." executed="True" result="Success" success="True" time="0.6727" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerToys.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftPowerToys' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerToys..'Export-EvergreenManifest -Name MicrosoftPowerToys' should not Throw" time="0.2339" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerToys has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerToys..MicrosoftPowerToys has expected properties" time="0.2926" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="688.105" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpVault." executed="True" result="Success" success="True" time="0.6792" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpVault.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpVault' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpVault..'Export-EvergreenManifest -Name HashicorpVault' should not Throw" time="0.2381" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpVault has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpVault..HashicorpVault has expected properties" time="0.2998" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="688.9869" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SAGAGIS." executed="True" result="Success" success="True" time="0.7458" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SAGAGIS.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SAGAGIS' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SAGAGIS..'Export-EvergreenManifest -Name SAGAGIS' should not Throw" time="0.2895" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SAGAGIS has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SAGAGIS..SAGAGIS has expected properties" time="0.3213" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="689.7419" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SoberLemurPDFSamBasic." executed="True" result="Success" success="True" time="0.6336" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SoberLemurPDFSamBasic.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SoberLemurPDFSamBasic' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SoberLemurPDFSamBasic..'Export-EvergreenManifest -Name SoberLemurPDFSamBasic' should not Throw" time="0.2116" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SoberLemurPDFSamBasic has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SoberLemurPDFSamBasic..SoberLemurPDFSamBasic has expected properties" time="0.286" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="690.58" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TorProjectTorBrowser." executed="True" result="Success" success="True" time="0.6958" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TorProjectTorBrowser.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TorProjectTorBrowser' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TorProjectTorBrowser..'Export-EvergreenManifest -Name TorProjectTorBrowser' should not Throw" time="0.2405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TorProjectTorBrowser has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TorProjectTorBrowser..TorProjectTorBrowser has expected properties" time="0.3164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="691.4411" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JASP." executed="True" result="Success" success="True" time="0.7299" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JASP.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JASP' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JASP..'Export-EvergreenManifest -Name JASP' should not Throw" time="0.2556" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JASP has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JASP..JASP has expected properties" time="0.3196" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="692.5654" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobat." executed="True" result="Success" success="True" time="0.9809" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobat.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeAcrobat' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobat..'Export-EvergreenManifest -Name AdobeAcrobat' should not Throw" time="0.3939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobat has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobat..AdobeAcrobat has expected properties" time="0.4374" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="693.5019" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Cyberduck." executed="True" result="Success" success="True" time="0.795" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Cyberduck.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Cyberduck' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Cyberduck..'Export-EvergreenManifest -Name Cyberduck' should not Throw" time="0.3033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Cyberduck has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Cyberduck..Cyberduck has expected properties" time="0.3381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="694.4903" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AtlassianSourcetree." executed="True" result="Success" success="True" time="0.8288" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AtlassianSourcetree.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AtlassianSourcetree' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AtlassianSourcetree..'Export-EvergreenManifest -Name AtlassianSourcetree' should not Throw" time="0.2791" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AtlassianSourcetree has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AtlassianSourcetree..AtlassianSourcetree has expected properties" time="0.3838" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="695.3806" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ShareX." executed="True" result="Success" success="True" time="0.7433" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ShareX.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ShareX' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ShareX..'Export-EvergreenManifest -Name ShareX' should not Throw" time="0.2558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ShareX has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ShareX..ShareX has expected properties" time="0.3274" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="696.2417" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinSCP." executed="True" result="Success" success="True" time="0.731" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinSCP.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name WinSCP' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinSCP..'Export-EvergreenManifest -Name WinSCP' should not Throw" time="0.2702" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinSCP has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinSCP..WinSCP has expected properties" time="0.3116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="697.0313" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Miniconda." executed="True" result="Success" success="True" time="0.6602" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Miniconda.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Miniconda' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Miniconda..'Export-EvergreenManifest -Name Miniconda' should not Throw" time="0.2343" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Miniconda has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Miniconda..Miniconda has expected properties" time="0.2857" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="697.9262" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeProfessional." executed="True" result="Success" success="True" time="0.7579" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeProfessional.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JamTreeSizeProfessional' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeProfessional..'Export-EvergreenManifest -Name JamTreeSizeProfessional' should not Throw" time="0.2822" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeProfessional has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeProfessional..JamTreeSizeProfessional has expected properties" time="0.2956" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="698.7915" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Audacity." executed="True" result="Success" success="True" time="0.7127" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Audacity.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Audacity' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Audacity..'Export-EvergreenManifest -Name Audacity' should not Throw" time="0.2554" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Audacity has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Audacity..Audacity has expected properties" time="0.2931" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="699.5998" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password7." executed="True" result="Success" success="True" time="0.6723" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password7.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name 1Password7' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password7..'Export-EvergreenManifest -Name 1Password7' should not Throw" time="0.2194" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password7 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password7..1Password7 has expected properties" time="0.3022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="700.438" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleJava8." executed="True" result="Success" success="True" time="0.6858" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleJava8.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OracleJava8' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleJava8..'Export-EvergreenManifest -Name OracleJava8' should not Throw" time="0.2473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OracleJava8 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OracleJava8..OracleJava8 has expected properties" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="701.263" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: StefansToolsgregpWin." executed="True" result="Success" success="True" time="0.6905" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: StefansToolsgregpWin.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name StefansToolsgregpWin' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: StefansToolsgregpWin..'Export-EvergreenManifest -Name StefansToolsgregpWin' should not Throw" time="0.2214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="StefansToolsgregpWin has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: StefansToolsgregpWin..StefansToolsgregpWin has expected properties" time="0.2929" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="702.039" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafeExamBrowser." executed="True" result="Success" success="True" time="0.6414" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafeExamBrowser.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SafeExamBrowser' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafeExamBrowser..'Export-EvergreenManifest -Name SafeExamBrowser' should not Throw" time="0.2251" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafeExamBrowser has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafeExamBrowser..SafeExamBrowser has expected properties" time="0.2749" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="702.9061" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPlayer." executed="True" result="Success" success="True" time="0.7217" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPlayer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareWorkstationPlayer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPlayer..'Export-EvergreenManifest -Name VMwareWorkstationPlayer' should not Throw" time="0.273" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPlayer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPlayer..VMwareWorkstationPlayer has expected properties" time="0.2862" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="703.8143" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureFunctionsCoreTools." executed="True" result="Success" success="True" time="0.7569" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureFunctionsCoreTools.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftAzureFunctionsCoreTools' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureFunctionsCoreTools..'Export-EvergreenManifest -Name MicrosoftAzureFunctionsCoreTools' should not Throw" time="0.2687" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureFunctionsCoreTools has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureFunctionsCoreTools..MicrosoftAzureFunctionsCoreTools has expected properties" time="0.3522" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="704.7628" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MattermostDesktop." executed="True" result="Success" success="True" time="0.7881" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MattermostDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MattermostDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MattermostDesktop..'Export-EvergreenManifest -Name MattermostDesktop' should not Throw" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MattermostDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MattermostDesktop..MattermostDesktop has expected properties" time="0.3621" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="705.6419" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BeekeeperStudio." executed="True" result="Success" success="True" time="0.7243" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BeekeeperStudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name BeekeeperStudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BeekeeperStudio..'Export-EvergreenManifest -Name BeekeeperStudio' should not Throw" time="0.24" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BeekeeperStudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BeekeeperStudio..BeekeeperStudio has expected properties" time="0.3367" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="706.5419" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PiriformCCleanerFree." executed="True" result="Success" success="True" time="0.7601" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PiriformCCleanerFree.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PiriformCCleanerFree' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PiriformCCleanerFree..'Export-EvergreenManifest -Name PiriformCCleanerFree' should not Throw" time="0.2511" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PiriformCCleanerFree has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PiriformCCleanerFree..PiriformCCleanerFree has expected properties" time="0.3523" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="707.3994" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETFullDiskEncryption." executed="True" result="Success" success="True" time="0.7127" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETFullDiskEncryption.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETFullDiskEncryption' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETFullDiskEncryption..'Export-EvergreenManifest -Name ESETFullDiskEncryption' should not Throw" time="0.2601" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETFullDiskEncryption has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETFullDiskEncryption..ESETFullDiskEncryption has expected properties" time="0.3002" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="708.3268" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTeams." executed="True" result="Success" success="True" time="0.7922" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTeams.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftTeams' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTeams..'Export-EvergreenManifest -Name MicrosoftTeams' should not Throw" time="0.3121" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTeams has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTeams..MicrosoftTeams has expected properties" time="0.3444" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="709.1476" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelegramDesktop." executed="True" result="Success" success="True" time="0.6817" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelegramDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TelegramDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelegramDesktop..'Export-EvergreenManifest -Name TelegramDesktop' should not Throw" time="0.2416" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelegramDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelegramDesktop..TelegramDesktop has expected properties" time="0.2923" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="709.9159" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareOSOptimizationTool." executed="True" result="Success" success="True" time="0.6411" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareOSOptimizationTool.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareOSOptimizationTool' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareOSOptimizationTool..'Export-EvergreenManifest -Name VMwareOSOptimizationTool' should not Throw" time="0.2093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareOSOptimizationTool has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareOSOptimizationTool..VMwareOSOptimizationTool has expected properties" time="0.2955" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="710.7741" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VeraCrypt." executed="True" result="Success" success="True" time="0.7307" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VeraCrypt.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VeraCrypt' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VeraCrypt..'Export-EvergreenManifest -Name VeraCrypt' should not Throw" time="0.2614" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VeraCrypt has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VeraCrypt..VeraCrypt has expected properties" time="0.3238" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="711.7318" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeDriver." executed="True" result="Success" success="True" time="0.8235" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeDriver.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftEdgeDriver' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeDriver..'Export-EvergreenManifest -Name MicrosoftEdgeDriver' should not Throw" time="0.3068" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeDriver has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeDriver..MicrosoftEdgeDriver has expected properties" time="0.3635" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="712.5854" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Tower." executed="True" result="Success" success="True" time="0.7179" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Tower.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Tower' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Tower..'Export-EvergreenManifest -Name Tower' should not Throw" time="0.2346" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Tower has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Tower..Tower has expected properties" time="0.3271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="713.5339" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpTerraform." executed="True" result="Success" success="True" time="0.8056" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpTerraform.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpTerraform' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpTerraform..'Export-EvergreenManifest -Name HashicorpTerraform' should not Throw" time="0.2871" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpTerraform has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpTerraform..HashicorpTerraform has expected properties" time="0.3358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="714.4061" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin17." executed="True" result="Success" success="True" time="0.6992" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin17.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptiumTemurin17' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin17..'Export-EvergreenManifest -Name AdoptiumTemurin17' should not Throw" time="0.2223" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin17 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin17..AdoptiumTemurin17 has expected properties" time="0.3136" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="715.3239" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOneDrive." executed="True" result="Success" success="True" time="0.7701" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOneDrive.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftOneDrive' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOneDrive..'Export-EvergreenManifest -Name MicrosoftOneDrive' should not Throw" time="0.2636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOneDrive has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOneDrive..MicrosoftOneDrive has expected properties" time="0.3362" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="716.2105" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dbeaver." executed="True" result="Success" success="True" time="0.7393" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dbeaver.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name dbeaver' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dbeaver..'Export-EvergreenManifest -Name dbeaver' should not Throw" time="0.2717" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dbeaver has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dbeaver..dbeaver has expected properties" time="0.3087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="717.2874" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInfraClient." executed="True" result="Success" success="True" time="0.8801" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInfraClient.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ProgressChefInfraClient' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInfraClient..'Export-EvergreenManifest -Name ProgressChefInfraClient' should not Throw" time="0.3271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInfraClient has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInfraClient..ProgressChefInfraClient has expected properties" time="0.37" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="718.1947" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProjectLibre." executed="True" result="Success" success="True" time="0.7633" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProjectLibre.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ProjectLibre' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProjectLibre..'Export-EvergreenManifest -Name ProjectLibre' should not Throw" time="0.292" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProjectLibre has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProjectLibre..ProjectLibre has expected properties" time="0.3191" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="719.159" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RStudio." executed="True" result="Success" success="True" time="0.8149" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RStudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name RStudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RStudio..'Export-EvergreenManifest -Name RStudio' should not Throw" time="0.2991" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RStudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RStudio..RStudio has expected properties" time="0.3638" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="720.1007" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafingPortmaster." executed="True" result="Success" success="True" time="0.7773" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafingPortmaster.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SafingPortmaster' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafingPortmaster..'Export-EvergreenManifest -Name SafingPortmaster' should not Throw" time="0.2939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SafingPortmaster has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SafingPortmaster..SafingPortmaster has expected properties" time="0.3302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="721.1109" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SumatraPDFReader." executed="True" result="Success" success="True" time="0.8477" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SumatraPDFReader.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SumatraPDFReader' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SumatraPDFReader..'Export-EvergreenManifest -Name SumatraPDFReader' should not Throw" time="0.2781" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SumatraPDFReader has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SumatraPDFReader..SumatraPDFReader has expected properties" time="0.3911" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="722.1266" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToMeeting." executed="True" result="Success" success="True" time="0.8245" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToMeeting.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name LogMeInGoToMeeting' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToMeeting..'Export-EvergreenManifest -Name LogMeInGoToMeeting' should not Throw" time="0.2803" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToMeeting has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToMeeting..LogMeInGoToMeeting has expected properties" time="0.3718" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="723.0096" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Fork." executed="True" result="Success" success="True" time="0.7539" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Fork.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Fork' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Fork..'Export-EvergreenManifest -Name Fork' should not Throw" time="0.2515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fork has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Fork..Fork has expected properties" time="0.3602" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="723.9598" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AppVentix." executed="True" result="Success" success="True" time="0.7896" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AppVentix.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AppVentix' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AppVentix..'Export-EvergreenManifest -Name AppVentix' should not Throw" time="0.2793" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AppVentix has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AppVentix..AppVentix has expected properties" time="0.3499" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="724.8039" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: McNeelRhino." executed="True" result="Success" success="True" time="0.7082" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: McNeelRhino.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name McNeelRhino' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: McNeelRhino..'Export-EvergreenManifest -Name McNeelRhino' should not Throw" time="0.2552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="McNeelRhino has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: McNeelRhino..McNeelRhino has expected properties" time="0.2943" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="725.7075" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSFPython." executed="True" result="Success" success="True" time="0.7449" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSFPython.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PSFPython' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSFPython..'Export-EvergreenManifest -Name PSFPython' should not Throw" time="0.2597" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSFPython has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSFPython..PSFPython has expected properties" time="0.3338" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="726.5476" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Pandoc." executed="True" result="Success" success="True" time="0.6954" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Pandoc.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Pandoc' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Pandoc..'Export-EvergreenManifest -Name Pandoc' should not Throw" time="0.237" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Pandoc has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Pandoc..Pandoc has expected properties" time="0.2948" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="727.4951" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsPyCharm." executed="True" result="Success" success="True" time="0.785" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsPyCharm.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JetBrainsPyCharm' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsPyCharm..'Export-EvergreenManifest -Name JetBrainsPyCharm' should not Throw" time="0.2632" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JetBrainsPyCharm has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JetBrainsPyCharm..JetBrainsPyCharm has expected properties" time="0.3475" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="728.4295" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK8." executed="True" result="Success" success="True" time="0.7717" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK8.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDK8' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK8..'Export-EvergreenManifest -Name AdoptOpenJDK8' should not Throw" time="0.2649" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK8 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK8..AdoptOpenJDK8 has expected properties" time="0.3269" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="729.3229" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JeremyMainGPUProfiler." executed="True" result="Success" success="True" time="0.7311" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JeremyMainGPUProfiler.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JeremyMainGPUProfiler' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JeremyMainGPUProfiler..'Export-EvergreenManifest -Name JeremyMainGPUProfiler' should not Throw" time="0.2348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JeremyMainGPUProfiler has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JeremyMainGPUProfiler..JeremyMainGPUProfiler has expected properties" time="0.343" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="730.2093" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubRelease." executed="True" result="Success" success="True" time="0.7568" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubRelease.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GitHubRelease' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubRelease..'Export-EvergreenManifest -Name GitHubRelease' should not Throw" time="0.2483" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubRelease has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubRelease..GitHubRelease has expected properties" time="0.3382" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="731.1924" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdge." executed="True" result="Success" success="True" time="0.8469" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdge.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftEdge' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdge..'Export-EvergreenManifest -Name MicrosoftEdge' should not Throw" time="0.3214" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdge has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdge..MicrosoftEdge has expected properties" time="0.3922" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="732.0495" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETPROTECTServer." executed="True" result="Success" success="True" time="0.7139" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETPROTECTServer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETPROTECTServer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETPROTECTServer..'Export-EvergreenManifest -Name ESETPROTECTServer' should not Throw" time="0.2668" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETPROTECTServer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETPROTECTServer..ESETPROTECTServer has expected properties" time="0.3065" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="732.9493" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlenderLauncher." executed="True" result="Success" success="True" time="0.7295" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlenderLauncher.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name BlenderLauncher' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlenderLauncher..'Export-EvergreenManifest -Name BlenderLauncher' should not Throw" time="0.2308" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlenderLauncher has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlenderLauncher..BlenderLauncher has expected properties" time="0.3495" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="733.8464" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MiniZincIDE." executed="True" result="Success" success="True" time="0.7533" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MiniZincIDE.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MiniZincIDE' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MiniZincIDE..'Export-EvergreenManifest -Name MiniZincIDE' should not Throw" time="0.2245" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MiniZincIDE has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MiniZincIDE..MiniZincIDE has expected properties" time="0.3559" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="734.7015" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusTentacle." executed="True" result="Success" success="True" time="0.7272" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusTentacle.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OctopusTentacle' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusTentacle..'Export-EvergreenManifest -Name OctopusTentacle' should not Throw" time="0.2533" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusTentacle has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusTentacle..OctopusTentacle has expected properties" time="0.3341" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="735.5886" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Nomacs." executed="True" result="Success" success="True" time="0.7372" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Nomacs.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Nomacs' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Nomacs..'Export-EvergreenManifest -Name Nomacs' should not Throw" time="0.2566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Nomacs has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Nomacs..Nomacs has expected properties" time="0.3146" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="736.4514" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePassXCTeamKeePassXC." executed="True" result="Success" success="True" time="0.7023" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePassXCTeamKeePassXC.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name KeePassXCTeamKeePassXC' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePassXCTeamKeePassXC..'Export-EvergreenManifest -Name KeePassXCTeamKeePassXC' should not Throw" time="0.2454" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePassXCTeamKeePassXC has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePassXCTeamKeePassXC..KeePassXCTeamKeePassXC has expected properties" time="0.3104" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="737.3108" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ConnectionExperienceIndicator." executed="True" result="Success" success="True" time="0.7113" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ConnectionExperienceIndicator.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ConnectionExperienceIndicator' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ConnectionExperienceIndicator..'Export-EvergreenManifest -Name ConnectionExperienceIndicator' should not Throw" time="0.2436" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ConnectionExperienceIndicator has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ConnectionExperienceIndicator..ConnectionExperienceIndicator has expected properties" time="0.3222" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="738.1317" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CendioThinLinc." executed="True" result="Success" success="True" time="0.679" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CendioThinLinc.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name CendioThinLinc' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CendioThinLinc..'Export-EvergreenManifest -Name CendioThinLinc' should not Throw" time="0.2381" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CendioThinLinc has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CendioThinLinc..CendioThinLinc has expected properties" time="0.2938" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="739.0221" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClient." executed="True" result="Success" success="True" time="0.7325" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClient.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareHorizonClient' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClient..'Export-EvergreenManifest -Name VMwareHorizonClient' should not Throw" time="0.2581" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareHorizonClient has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareHorizonClient..VMwareHorizonClient has expected properties" time="0.3303" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="740.0237" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KDiff3." executed="True" result="Success" success="True" time="0.8466" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KDiff3.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name KDiff3' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KDiff3..'Export-EvergreenManifest -Name KDiff3' should not Throw" time="0.3235" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KDiff3 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KDiff3..KDiff3 has expected properties" time="0.3564" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="740.9779" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftSsms." executed="True" result="Success" success="True" time="0.8072" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftSsms.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftSsms' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftSsms..'Export-EvergreenManifest -Name MicrosoftSsms' should not Throw" time="0.2893" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftSsms has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftSsms..MicrosoftSsms has expected properties" time="0.3692" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="741.8464" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: mRemoteNG." executed="True" result="Success" success="True" time="0.705" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: mRemoteNG.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name mRemoteNG' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: mRemoteNG..'Export-EvergreenManifest -Name mRemoteNG' should not Throw" time="0.2659" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="mRemoteNG has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: mRemoteNG..mRemoteNG has expected properties" time="0.2808" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="743.063" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatReaderDC." executed="True" result="Success" success="True" time="1.0462" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatReaderDC.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeAcrobatReaderDC' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatReaderDC..'Export-EvergreenManifest -Name AdobeAcrobatReaderDC' should not Throw" time="0.4403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatReaderDC has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatReaderDC..AdobeAcrobatReaderDC has expected properties" time="0.4391" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="744.049" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpNomad." executed="True" result="Success" success="True" time="0.8514" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpNomad.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpNomad' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpNomad..'Export-EvergreenManifest -Name HashicorpNomad' should not Throw" time="0.3224" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpNomad has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpNomad..HashicorpNomad has expected properties" time="0.3715" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="744.9105" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gimp." executed="True" result="Success" success="True" time="0.7311" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gimp.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Gimp' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gimp..'Export-EvergreenManifest -Name Gimp' should not Throw" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gimp has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gimp..Gimp has expected properties" time="0.319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="745.7407" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageGlass." executed="True" result="Success" success="True" time="0.6957" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageGlass.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ImageGlass' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageGlass..'Export-EvergreenManifest -Name ImageGlass' should not Throw" time="0.2491" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageGlass has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageGlass..ImageGlass has expected properties" time="0.3084" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="746.5816" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BISF." executed="True" result="Success" success="True" time="0.699" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BISF.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name BISF' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BISF..'Export-EvergreenManifest -Name BISF' should not Throw" time="0.2428" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BISF has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BISF..BISF has expected properties" time="0.3028" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="747.5042" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerClassic." executed="True" result="Success" success="True" time="0.767" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerClassic.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TelerikFiddlerClassic' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerClassic..'Export-EvergreenManifest -Name TelerikFiddlerClassic' should not Throw" time="0.262" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerClassic has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerClassic..TelerikFiddlerClassic has expected properties" time="0.348" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="748.3731" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Wireshark." executed="True" result="Success" success="True" time="0.7266" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Wireshark.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Wireshark' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Wireshark..'Export-EvergreenManifest -Name Wireshark' should not Throw" time="0.2647" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Wireshark has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Wireshark..Wireshark has expected properties" time="0.3071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="749.1763" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlueJ." executed="True" result="Success" success="True" time="0.6749" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlueJ.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name BlueJ' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlueJ..'Export-EvergreenManifest -Name BlueJ' should not Throw" time="0.2186" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BlueJ has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BlueJ..BlueJ has expected properties" time="0.3037" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="750.026" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointAntivirus." executed="True" result="Success" success="True" time="0.7086" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointAntivirus.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETEndpointAntivirus' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointAntivirus..'Export-EvergreenManifest -Name ESETEndpointAntivirus' should not Throw" time="0.2648" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointAntivirus has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointAntivirus..ESETEndpointAntivirus has expected properties" time="0.2922" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="750.9112" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ZorgmailVeiligVerzendenAddin." executed="True" result="Success" success="True" time="0.7505" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ZorgmailVeiligVerzendenAddin.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ZorgmailVeiligVerzendenAddin' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ZorgmailVeiligVerzendenAddin..'Export-EvergreenManifest -Name ZorgmailVeiligVerzendenAddin' should not Throw" time="0.2807" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ZorgmailVeiligVerzendenAddin has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ZorgmailVeiligVerzendenAddin..ZorgmailVeiligVerzendenAddin has expected properties" time="0.3207" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="751.7599" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Win32OpenSSH." executed="True" result="Success" success="True" time="0.7153" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Win32OpenSSH.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Win32OpenSSH' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Win32OpenSSH..'Export-EvergreenManifest -Name Win32OpenSSH' should not Throw" time="0.2504" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Win32OpenSSH has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Win32OpenSSH..Win32OpenSSH has expected properties" time="0.327" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="752.7051" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7zip." executed="True" result="Success" success="True" time="0.7977" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7zip.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name 7zip' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7zip..'Export-EvergreenManifest -Name 7zip' should not Throw" time="0.281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7zip has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7zip..7zip has expected properties" time="0.3722" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="753.5646" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dnGrep." executed="True" result="Success" success="True" time="0.7223" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dnGrep.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name dnGrep' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dnGrep..'Export-EvergreenManifest -Name dnGrep' should not Throw" time="0.2325" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="dnGrep has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: dnGrep..dnGrep has expected properties" time="0.334" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="754.4372" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VercelHyper." executed="True" result="Success" success="True" time="0.7321" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VercelHyper.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VercelHyper' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VercelHyper..'Export-EvergreenManifest -Name VercelHyper' should not Throw" time="0.2561" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VercelHyper has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VercelHyper..VercelHyper has expected properties" time="0.3232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="755.2848" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PuTTY." executed="True" result="Success" success="True" time="0.7109" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PuTTY.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PuTTY' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PuTTY..'Export-EvergreenManifest -Name PuTTY' should not Throw" time="0.245" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PuTTY has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PuTTY..PuTTY has expected properties" time="0.3208" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="756.1465" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageMagickStudioImageMagick." executed="True" result="Success" success="True" time="0.7288" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageMagickStudioImageMagick.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ImageMagickStudioImageMagick' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageMagickStudioImageMagick..'Export-EvergreenManifest -Name ImageMagickStudioImageMagick' should not Throw" time="0.2369" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ImageMagickStudioImageMagick has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ImageMagickStudioImageMagick..ImageMagickStudioImageMagick has expected properties" time="0.3521" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="757.0663" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareTools." executed="True" result="Success" success="True" time="0.7666" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareTools.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareTools' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareTools..'Export-EvergreenManifest -Name VMwareTools' should not Throw" time="0.2832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareTools has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareTools..VMwareTools has expected properties" time="0.3175" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="757.8816" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OnlyOfficeDesktopEditors." executed="True" result="Success" success="True" time="0.667" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OnlyOfficeDesktopEditors.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OnlyOfficeDesktopEditors' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OnlyOfficeDesktopEditors..'Export-EvergreenManifest -Name OnlyOfficeDesktopEditors' should not Throw" time="0.2407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OnlyOfficeDesktopEditors has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OnlyOfficeDesktopEditors..OnlyOfficeDesktopEditors has expected properties" time="0.2764" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="758.7321" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETSecureAuthentication." executed="True" result="Success" success="True" time="0.7134" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETSecureAuthentication.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETSecureAuthentication' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETSecureAuthentication..'Export-EvergreenManifest -Name ESETSecureAuthentication' should not Throw" time="0.2433" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETSecureAuthentication has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETSecureAuthentication..ESETSecureAuthentication has expected properties" time="0.3299" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="759.5055" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenShellMenu." executed="True" result="Success" success="True" time="0.638" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenShellMenu.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OpenShellMenu' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenShellMenu..'Export-EvergreenManifest -Name OpenShellMenu' should not Throw" time="0.2176" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenShellMenu has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenShellMenu..OpenShellMenu has expected properties" time="0.2814" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="760.2856" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DebaucheeBarrier." executed="True" result="Success" success="True" time="0.6545" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DebaucheeBarrier.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name DebaucheeBarrier' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DebaucheeBarrier..'Export-EvergreenManifest -Name DebaucheeBarrier' should not Throw" time="0.2265" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DebaucheeBarrier has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DebaucheeBarrier..DebaucheeBarrier has expected properties" time="0.2824" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="761.1027" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerShell." executed="True" result="Success" success="True" time="0.6942" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerShell.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftPowerShell' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerShell..'Export-EvergreenManifest -Name MicrosoftPowerShell' should not Throw" time="0.2527" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftPowerShell has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftPowerShell..MicrosoftPowerShell has expected properties" time="0.3038" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="761.9252" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password." executed="True" result="Success" success="True" time="0.6791" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name 1Password' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password..'Export-EvergreenManifest -Name 1Password' should not Throw" time="0.2407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="1Password has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 1Password..1Password has expected properties" time="0.2833" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="762.7987" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RingCentral." executed="True" result="Success" success="True" time="0.7389" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RingCentral.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name RingCentral' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RingCentral..'Export-EvergreenManifest -Name RingCentral' should not Throw" time="0.2758" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RingCentral has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RingCentral..RingCentral has expected properties" time="0.3085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="763.5514" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DoubleCommander." executed="True" result="Success" success="True" time="0.6196" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DoubleCommander.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name DoubleCommander' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DoubleCommander..'Export-EvergreenManifest -Name DoubleCommander' should not Throw" time="0.2108" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DoubleCommander has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DoubleCommander..DoubleCommander has expected properties" time="0.2691" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="764.406" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixWorkspaceApp." executed="True" result="Success" success="True" time="0.7021" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixWorkspaceApp.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name CitrixWorkspaceApp' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixWorkspaceApp..'Export-EvergreenManifest -Name CitrixWorkspaceApp' should not Throw" time="0.2504" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CitrixWorkspaceApp has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CitrixWorkspaceApp..CitrixWorkspaceApp has expected properties" time="0.3071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="765.238" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Scratch." executed="True" result="Success" success="True" time="0.6879" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Scratch.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Scratch' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Scratch..'Export-EvergreenManifest -Name Scratch' should not Throw" time="0.2367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Scratch has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Scratch..Scratch has expected properties" time="0.3036" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="766.1098" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin16." executed="True" result="Success" success="True" time="0.7393" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin16.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptiumTemurin16' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin16..'Export-EvergreenManifest -Name AdoptiumTemurin16' should not Throw" time="0.2555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin16 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin16..AdoptiumTemurin16 has expected properties" time="0.3055" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="767.0332" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VideoLanVlcPlayer." executed="True" result="Success" success="True" time="0.7612" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VideoLanVlcPlayer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VideoLanVlcPlayer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VideoLanVlcPlayer..'Export-EvergreenManifest -Name VideoLanVlcPlayer' should not Throw" time="0.29" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VideoLanVlcPlayer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VideoLanVlcPlayer..VideoLanVlcPlayer has expected properties" time="0.3232" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="767.8818" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GhislerTotalCommander." executed="True" result="Success" success="True" time="0.7156" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GhislerTotalCommander.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GhislerTotalCommander' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GhislerTotalCommander..'Export-EvergreenManifest -Name GhislerTotalCommander' should not Throw" time="0.2583" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GhislerTotalCommander has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GhislerTotalCommander..GhislerTotalCommander has expected properties" time="0.323" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="768.6457" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenLens." executed="True" result="Success" success="True" time="0.642" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenLens.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OpenLens' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenLens..'Export-EvergreenManifest -Name OpenLens' should not Throw" time="0.2398" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OpenLens has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OpenLens..OpenLens has expected properties" time="0.2729" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="769.3973" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CodelerityApacheNetBeans." executed="True" result="Success" success="True" time="0.6255" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CodelerityApacheNetBeans.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name CodelerityApacheNetBeans' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CodelerityApacheNetBeans..'Export-EvergreenManifest -Name CodelerityApacheNetBeans' should not Throw" time="0.223" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="CodelerityApacheNetBeans has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: CodelerityApacheNetBeans..CodelerityApacheNetBeans has expected properties" time="0.2588" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="770.186" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NETworkManager." executed="True" result="Success" success="True" time="0.6536" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NETworkManager.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name NETworkManager' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NETworkManager..'Export-EvergreenManifest -Name NETworkManager' should not Throw" time="0.2123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NETworkManager has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NETworkManager..NETworkManager has expected properties" time="0.2807" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="771.0056" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: YubicoAuthenticator." executed="True" result="Success" success="True" time="0.677" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: YubicoAuthenticator.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name YubicoAuthenticator' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: YubicoAuthenticator..'Export-EvergreenManifest -Name YubicoAuthenticator' should not Throw" time="0.2434" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="YubicoAuthenticator has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: YubicoAuthenticator..YubicoAuthenticator has expected properties" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="771.8105" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Notable." executed="True" result="Success" success="True" time="0.6703" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Notable.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Notable' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Notable..'Export-EvergreenManifest -Name Notable' should not Throw" time="0.2541" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Notable has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Notable..Notable has expected properties" time="0.2699" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="772.653" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudioCode." executed="True" result="Success" success="True" time="0.7096" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudioCode.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftVisualStudioCode' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudioCode..'Export-EvergreenManifest -Name MicrosoftVisualStudioCode' should not Throw" time="0.2489" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudioCode has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudioCode..MicrosoftVisualStudioCode has expected properties" time="0.297" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="773.4828" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin11." executed="True" result="Success" success="True" time="0.6913" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin11.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptiumTemurin11' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin11..'Export-EvergreenManifest -Name AdoptiumTemurin11' should not Throw" time="0.2442" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin11 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin11..AdoptiumTemurin11 has expected properties" time="0.2984" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="774.306" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Greenshot." executed="True" result="Success" success="True" time="0.6778" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Greenshot.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Greenshot' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Greenshot..'Export-EvergreenManifest -Name Greenshot' should not Throw" time="0.2219" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Greenshot has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Greenshot..Greenshot has expected properties" time="0.3085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="775.1204" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBicep." executed="True" result="Success" success="True" time="0.6729" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBicep.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftBicep' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBicep..'Export-EvergreenManifest -Name MicrosoftBicep' should not Throw" time="0.2328" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftBicep has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftBicep..MicrosoftBicep has expected properties" time="0.2919" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="775.9384" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gephi." executed="True" result="Success" success="True" time="0.6835" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gephi.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Gephi' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gephi..'Export-EvergreenManifest -Name Gephi' should not Throw" time="0.2175" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gephi has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gephi..Gephi has expected properties" time="0.3164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="776.7967" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitForWindows." executed="True" result="Success" success="True" time="0.6886" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitForWindows.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GitForWindows' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitForWindows..'Export-EvergreenManifest -Name GitForWindows' should not Throw" time="0.2346" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitForWindows has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitForWindows..GitForWindows has expected properties" time="0.2889" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="777.5938" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zotero." executed="True" result="Success" success="True" time="0.6635" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zotero.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Zotero' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zotero..'Export-EvergreenManifest -Name Zotero' should not Throw" time="0.2531" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zotero has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zotero..Zotero has expected properties" time="0.2722" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="778.5103" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnViewMP." executed="True" result="Success" success="True" time="0.7759" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnViewMP.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name XnSoftXnViewMP' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnViewMP..'Export-EvergreenManifest -Name XnSoftXnViewMP' should not Throw" time="0.2842" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnViewMP has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnViewMP..XnSoftXnViewMP has expected properties" time="0.3561" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="779.3157" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Minitab." executed="True" result="Success" success="True" time="0.6757" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Minitab.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Minitab' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Minitab..'Export-EvergreenManifest -Name Minitab' should not Throw" time="0.2455" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Minitab has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Minitab..Minitab has expected properties" time="0.2859" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="780.2328" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitPDFEditor." executed="True" result="Success" success="True" time="0.7827" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitPDFEditor.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FoxitPDFEditor' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitPDFEditor..'Export-EvergreenManifest -Name FoxitPDFEditor' should not Throw" time="0.2915" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FoxitPDFEditor has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FoxitPDFEditor..FoxitPDFEditor has expected properties" time="0.3289" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="781.2157" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaBrowser." executed="True" result="Success" success="True" time="0.8544" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaBrowser.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OperaBrowser' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaBrowser..'Export-EvergreenManifest -Name OperaBrowser' should not Throw" time="0.2962" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaBrowser has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaBrowser..OperaBrowser has expected properties" time="0.3909" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="782.085" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK16." executed="True" result="Success" success="True" time="0.7204" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK16.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDK16' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK16..'Export-EvergreenManifest -Name AdoptOpenJDK16' should not Throw" time="0.2547" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK16 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK16..AdoptOpenJDK16 has expected properties" time="0.3083" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="782.9453" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKIcedTeaWeb." executed="True" result="Success" success="True" time="0.7169" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKIcedTeaWeb.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDKIcedTeaWeb' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKIcedTeaWeb..'Export-EvergreenManifest -Name AdoptOpenJDKIcedTeaWeb' should not Throw" time="0.2403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKIcedTeaWeb has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKIcedTeaWeb..AdoptOpenJDKIcedTeaWeb has expected properties" time="0.2973" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="783.7904" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETInspectConnector." executed="True" result="Success" success="True" time="0.7095" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETInspectConnector.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETInspectConnector' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETInspectConnector..'Export-EvergreenManifest -Name ESETInspectConnector' should not Throw" time="0.2555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETInspectConnector has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETInspectConnector..ESETInspectConnector has expected properties" time="0.3069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="784.6022" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinMerge." executed="True" result="Success" success="True" time="0.6836" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinMerge.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name WinMerge' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinMerge..'Export-EvergreenManifest -Name WinMerge' should not Throw" time="0.2419" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WinMerge has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WinMerge..WinMerge has expected properties" time="0.3001" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="785.5888" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeWebView2Runtime." executed="True" result="Success" success="True" time="0.8322" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeWebView2Runtime.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftEdgeWebView2Runtime' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeWebView2Runtime..'Export-EvergreenManifest -Name MicrosoftEdgeWebView2Runtime' should not Throw" time="0.3093" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftEdgeWebView2Runtime has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftEdgeWebView2Runtime..MicrosoftEdgeWebView2Runtime has expected properties" time="0.3708" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="786.3945" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTerminal." executed="True" result="Success" success="True" time="0.6749" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTerminal.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftTerminal' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTerminal..'Export-EvergreenManifest -Name MicrosoftTerminal' should not Throw" time="0.2279" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftTerminal has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftTerminal..MicrosoftTerminal has expected properties" time="0.301" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="787.3189" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ChromiumChromeDriver." executed="True" result="Success" success="True" time="0.7622" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ChromiumChromeDriver.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ChromiumChromeDriver' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ChromiumChromeDriver..'Export-EvergreenManifest -Name ChromiumChromeDriver' should not Throw" time="0.2872" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ChromiumChromeDriver has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ChromiumChromeDriver..ChromiumChromeDriver has expected properties" time="0.3164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="788.1833" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpConsul." executed="True" result="Success" success="True" time="0.7103" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpConsul.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpConsul' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpConsul..'Export-EvergreenManifest -Name HashicorpConsul' should not Throw" time="0.2354" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpConsul has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpConsul..HashicorpConsul has expected properties" time="0.3368" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="789.0258" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RCoreTeamRforWindows." executed="True" result="Success" success="True" time="0.7117" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RCoreTeamRforWindows.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name RCoreTeamRforWindows' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RCoreTeamRforWindows..'Export-EvergreenManifest -Name RCoreTeamRforWindows' should not Throw" time="0.2427" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RCoreTeamRforWindows has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RCoreTeamRforWindows..RCoreTeamRforWindows has expected properties" time="0.3303" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="789.8766" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointSecurity." executed="True" result="Success" success="True" time="0.7249" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointSecurity.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETEndpointSecurity' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointSecurity..'Export-EvergreenManifest -Name ESETEndpointSecurity' should not Throw" time="0.2473" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETEndpointSecurity has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETEndpointSecurity..ESETEndpointSecurity has expected properties" time="0.3343" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="790.6432" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MuseScore." executed="True" result="Success" success="True" time="0.6365" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MuseScore.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MuseScore' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MuseScore..'Export-EvergreenManifest -Name MuseScore' should not Throw" time="0.2237" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MuseScore has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MuseScore..MuseScore has expected properties" time="0.2747" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="791.4736" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DevToys." executed="True" result="Success" success="True" time="0.6821" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DevToys.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name DevToys' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DevToys..'Export-EvergreenManifest -Name DevToys' should not Throw" time="0.2498" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DevToys has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DevToys..DevToys has expected properties" time="0.2834" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="792.2658" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NevcairielLAVFilters." executed="True" result="Success" success="True" time="0.6599" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NevcairielLAVFilters.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name NevcairielLAVFilters' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NevcairielLAVFilters..'Export-EvergreenManifest -Name NevcairielLAVFilters' should not Throw" time="0.2293" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NevcairielLAVFilters has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NevcairielLAVFilters..NevcairielLAVFilters has expected properties" time="0.2882" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="793.1583" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MasterPackager." executed="True" result="Success" success="True" time="0.7486" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MasterPackager.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MasterPackager' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MasterPackager..'Export-EvergreenManifest -Name MasterPackager' should not Throw" time="0.2832" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MasterPackager has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MasterPackager..MasterPackager has expected properties" time="0.3109" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="794.0625" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NotepadPlusPlus." executed="True" result="Success" success="True" time="0.7508" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NotepadPlusPlus.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name NotepadPlusPlus' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NotepadPlusPlus..'Export-EvergreenManifest -Name NotepadPlusPlus' should not Throw" time="0.2713" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="NotepadPlusPlus has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: NotepadPlusPlus..NotepadPlusPlus has expected properties" time="0.3182" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="794.9375" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusDeployServer." executed="True" result="Success" success="True" time="0.7265" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusDeployServer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OctopusDeployServer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusDeployServer..'Export-EvergreenManifest -Name OctopusDeployServer' should not Throw" time="0.2475" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OctopusDeployServer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OctopusDeployServer..OctopusDeployServer has expected properties" time="0.3315" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="795.752" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeeWeb." executed="True" result="Success" success="True" time="0.6718" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeeWeb.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name KeeWeb' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeeWeb..'Export-EvergreenManifest -Name KeeWeb' should not Throw" time="0.2178" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeeWeb has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeeWeb..KeeWeb has expected properties" time="0.3027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="796.5784" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpBoundary." executed="True" result="Success" success="True" time="0.6979" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpBoundary.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpBoundary' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpBoundary..'Export-EvergreenManifest -Name HashicorpBoundary' should not Throw" time="0.2479" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpBoundary has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpBoundary..HashicorpBoundary has expected properties" time="0.2999" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="797.4323" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSAppDeployToolkit." executed="True" result="Success" success="True" time="0.6621" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSAppDeployToolkit.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PSAppDeployToolkit' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSAppDeployToolkit..'Export-EvergreenManifest -Name PSAppDeployToolkit' should not Throw" time="0.2118" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PSAppDeployToolkit has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PSAppDeployToolkit..PSAppDeployToolkit has expected properties" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="798.2627" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreeFem." executed="True" result="Success" success="True" time="0.6834" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreeFem.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FreeFem' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreeFem..'Export-EvergreenManifest -Name FreeFem' should not Throw" time="0.2265" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreeFem has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreeFem..FreeFem has expected properties" time="0.306" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="799.0384" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpConsole." executed="True" result="Success" success="True" time="0.6503" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpConsole.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ControlUpConsole' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpConsole..'Export-EvergreenManifest -Name ControlUpConsole' should not Throw" time="0.2296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpConsole has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpConsole..ControlUpConsole has expected properties" time="0.2813" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="799.7921" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: EgnyteDesktopApp." executed="True" result="Success" success="True" time="0.6207" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: EgnyteDesktopApp.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name EgnyteDesktopApp' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: EgnyteDesktopApp..'Export-EvergreenManifest -Name EgnyteDesktopApp' should not Throw" time="0.2263" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="EgnyteDesktopApp has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: EgnyteDesktopApp..EgnyteDesktopApp has expected properties" time="0.2562" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="800.6333" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin8." executed="True" result="Success" success="True" time="0.7114" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin8.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptiumTemurin8' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin8..'Export-EvergreenManifest -Name AdoptiumTemurin8' should not Throw" time="0.2448" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin8 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin8..AdoptiumTemurin8 has expected properties" time="0.3126" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="801.4625" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETServerSecurity." executed="True" result="Success" success="True" time="0.6843" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETServerSecurity.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ESETServerSecurity' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETServerSecurity..'Export-EvergreenManifest -Name ESETServerSecurity' should not Throw" time="0.2243" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ESETServerSecurity has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ESETServerSecurity..ESETServerSecurity has expected properties" time="0.3203" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="802.3009" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Obsidian." executed="True" result="Success" success="True" time="0.7092" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Obsidian.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Obsidian' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Obsidian..'Export-EvergreenManifest -Name Obsidian' should not Throw" time="0.2475" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Obsidian has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Obsidian..Obsidian has expected properties" time="0.3035" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="803.1915" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OBSStudio." executed="True" result="Success" success="True" time="0.7613" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OBSStudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OBSStudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OBSStudio..'Export-EvergreenManifest -Name OBSStudio' should not Throw" time="0.2743" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OBSStudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OBSStudio..OBSStudio has expected properties" time="0.3391" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="804.1714" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInSpec." executed="True" result="Success" success="True" time="0.8528" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInSpec.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ProgressChefInSpec' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInSpec..'Export-EvergreenManifest -Name ProgressChefInSpec' should not Throw" time="0.3004" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefInSpec has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefInSpec..ProgressChefInSpec has expected properties" time="0.3903" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="805.0013" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anki." executed="True" result="Success" success="True" time="0.6826" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anki.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Anki' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anki..'Export-EvergreenManifest -Name Anki' should not Throw" time="0.2249" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Anki has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Anki..Anki has expected properties" time="0.3087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="805.803" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK11." executed="True" result="Success" success="True" time="0.6541" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK11.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDK11' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK11..'Export-EvergreenManifest -Name AdoptOpenJDK11' should not Throw" time="0.2196" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDK11 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDK11..AdoptOpenJDK11 has expected properties" time="0.2817" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="806.6566" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftFSLogixApps." executed="True" result="Success" success="True" time="0.7155" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftFSLogixApps.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftFSLogixApps' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftFSLogixApps..'Export-EvergreenManifest -Name MicrosoftFSLogixApps' should not Throw" time="0.2381" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftFSLogixApps has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftFSLogixApps..MicrosoftFSLogixApps has expected properties" time="0.3148" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="807.5271" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatProStdDC." executed="True" result="Success" success="True" time="0.736" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatProStdDC.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeAcrobatProStdDC' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatProStdDC..'Export-EvergreenManifest -Name AdobeAcrobatProStdDC' should not Throw" time="0.2494" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatProStdDC has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatProStdDC..AdobeAcrobatProStdDC has expected properties" time="0.3456" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="808.3977" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpPacker." executed="True" result="Success" success="True" time="0.7398" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpPacker.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name HashicorpPacker' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpPacker..'Export-EvergreenManifest -Name HashicorpPacker' should not Throw" time="0.2562" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="HashicorpPacker has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: HashicorpPacker..HashicorpPacker has expected properties" time="0.332" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="809.1688" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VisualCppRedistAIO." executed="True" result="Success" success="True" time="0.6487" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VisualCppRedistAIO.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VisualCppRedistAIO' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VisualCppRedistAIO..'Export-EvergreenManifest -Name VisualCppRedistAIO' should not Throw" time="0.2423" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VisualCppRedistAIO has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VisualCppRedistAIO..VisualCppRedistAIO has expected properties" time="0.259" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="810.3393" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatDC." executed="True" result="Success" success="True" time="1.0388" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatDC.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdobeAcrobatDC' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatDC..'Export-EvergreenManifest -Name AdobeAcrobatDC' should not Throw" time="0.4198" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdobeAcrobatDC has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdobeAcrobatDC..AdobeAcrobatDC has expected properties" time="0.4774" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="811.1276" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KarakunOpenWebStart." executed="True" result="Success" success="True" time="0.637" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KarakunOpenWebStart.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name KarakunOpenWebStart' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KarakunOpenWebStart..'Export-EvergreenManifest -Name KarakunOpenWebStart' should not Throw" time="0.2223" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KarakunOpenWebStart has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KarakunOpenWebStart..KarakunOpenWebStart has expected properties" time="0.2769" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="811.9229" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru17." executed="True" result="Success" success="True" time="0.6643" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru17.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDKSemuru17' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru17..'Export-EvergreenManifest -Name AdoptOpenJDKSemuru17' should not Throw" time="0.2243" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru17 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru17..AdoptOpenJDKSemuru17 has expected properties" time="0.2953" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="812.8189" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft.NET." executed="True" result="Success" success="True" time="0.7645" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft.NET.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Microsoft.NET' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft.NET..'Export-EvergreenManifest -Name Microsoft.NET' should not Throw" time="0.2795" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft.NET has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft.NET..Microsoft.NET has expected properties" time="0.3238" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="813.6144" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WixToolset." executed="True" result="Success" success="True" time="0.6662" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WixToolset.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name WixToolset' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WixToolset..'Export-EvergreenManifest -Name WixToolset' should not Throw" time="0.2274" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="WixToolset has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: WixToolset..WixToolset has expected properties" time="0.2948" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="814.4943" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: gretl." executed="True" result="Success" success="True" time="0.7508" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: gretl.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name gretl' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: gretl..'Export-EvergreenManifest -Name gretl' should not Throw" time="0.2777" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="gretl has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: gretl..gretl has expected properties" time="0.3288" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="815.2588" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DockerDesktop." executed="True" result="Success" success="True" time="0.6326" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DockerDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name DockerDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DockerDesktop..'Export-EvergreenManifest -Name DockerDesktop' should not Throw" time="0.2321" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="DockerDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: DockerDesktop..DockerDesktop has expected properties" time="0.2649" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="816.203" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaGXBrowser." executed="True" result="Success" success="True" time="0.8111" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaGXBrowser.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OperaGXBrowser' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaGXBrowser..'Export-EvergreenManifest -Name OperaGXBrowser' should not Throw" time="0.304" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaGXBrowser has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaGXBrowser..OperaGXBrowser has expected properties" time="0.3487" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="817.0272" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7ZipZS." executed="True" result="Success" success="True" time="0.6889" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7ZipZS.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name 7ZipZS' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7ZipZS..'Export-EvergreenManifest -Name 7ZipZS' should not Throw" time="0.2491" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="7ZipZS has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: 7ZipZS..7ZipZS has expected properties" time="0.2925" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="817.907" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gpg4win." executed="True" result="Success" success="True" time="0.7451" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gpg4win.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Gpg4win' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gpg4win..'Export-EvergreenManifest -Name Gpg4win' should not Throw" time="0.2825" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gpg4win has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Gpg4win..Gpg4win has expected properties" time="0.309" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="818.7619" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RizonesoftNotepad3." executed="True" result="Success" success="True" time="0.7092" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RizonesoftNotepad3.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name RizonesoftNotepad3' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RizonesoftNotepad3..'Export-EvergreenManifest -Name RizonesoftNotepad3' should not Throw" time="0.2691" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RizonesoftNotepad3 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RizonesoftNotepad3..RizonesoftNotepad3 has expected properties" time="0.2951" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="819.7821" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaCryptoBrowser." executed="True" result="Success" success="True" time="0.8581" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaCryptoBrowser.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name OperaCryptoBrowser' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaCryptoBrowser..'Export-EvergreenManifest -Name OperaCryptoBrowser' should not Throw" time="0.337" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="OperaCryptoBrowser has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: OperaCryptoBrowser..OperaCryptoBrowser has expected properties" time="0.375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="820.6745" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubAtom." executed="True" result="Success" success="True" time="0.7462" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubAtom.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GitHubAtom' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubAtom..'Export-EvergreenManifest -Name GitHubAtom' should not Throw" time="0.2488" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitHubAtom has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitHubAtom..GitHubAtom has expected properties" time="0.3411" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="821.6426" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VastLimitsUberAgent." executed="True" result="Success" success="True" time="0.8083" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VastLimitsUberAgent.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VastLimitsUberAgent' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VastLimitsUberAgent..'Export-EvergreenManifest -Name VastLimitsUberAgent' should not Throw" time="0.2988" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VastLimitsUberAgent has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VastLimitsUberAgent..VastLimitsUberAgent has expected properties" time="0.3198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="822.818" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft365Apps." executed="True" result="Success" success="True" time="1.0229" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft365Apps.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Microsoft365Apps' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft365Apps..'Export-EvergreenManifest -Name Microsoft365Apps' should not Throw" time="0.37" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Microsoft365Apps has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Microsoft365Apps..Microsoft365Apps has expected properties" time="0.4805" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="823.7981" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PDFForgePDFCreator." executed="True" result="Success" success="True" time="0.828" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PDFForgePDFCreator.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PDFForgePDFCreator' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PDFForgePDFCreator..'Export-EvergreenManifest -Name PDFForgePDFCreator' should not Throw" time="0.2943" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PDFForgePDFCreator has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PDFForgePDFCreator..PDFForgePDFCreator has expected properties" time="0.3571" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="824.6593" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru8." executed="True" result="Success" success="True" time="0.7104" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru8.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDKSemuru8' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru8..'Export-EvergreenManifest -Name AdoptOpenJDKSemuru8' should not Throw" time="0.2378" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru8 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru8..AdoptOpenJDKSemuru8 has expected properties" time="0.3248" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="825.5918" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Terminals." executed="True" result="Success" success="True" time="0.7632" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Terminals.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Terminals' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Terminals..'Export-EvergreenManifest -Name Terminals' should not Throw" time="0.253" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Terminals has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Terminals..Terminals has expected properties" time="0.3276" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="826.4801" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScooterBeyondCompare." executed="True" result="Success" success="True" time="0.7468" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScooterBeyondCompare.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ScooterBeyondCompare' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScooterBeyondCompare..'Export-EvergreenManifest -Name ScooterBeyondCompare' should not Throw" time="0.2651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScooterBeyondCompare has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScooterBeyondCompare..ScooterBeyondCompare has expected properties" time="0.3408" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="827.3116" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PeaZipPeaZip." executed="True" result="Success" success="True" time="0.6724" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PeaZipPeaZip.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name PeaZipPeaZip' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PeaZipPeaZip..'Export-EvergreenManifest -Name PeaZipPeaZip' should not Throw" time="0.2328" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="PeaZipPeaZip has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: PeaZipPeaZip..PeaZipPeaZip has expected properties" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="828.1688" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScreenToGif." executed="True" result="Success" success="True" time="0.6753" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScreenToGif.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ScreenToGif' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScreenToGif..'Export-EvergreenManifest -Name ScreenToGif' should not Throw" time="0.2401" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ScreenToGif has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ScreenToGif..ScreenToGif has expected properties" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="829.1114" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMPlexWorkstation." executed="True" result="Success" success="True" time="0.7773" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMPlexWorkstation.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMPlexWorkstation' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMPlexWorkstation..'Export-EvergreenManifest -Name VMPlexWorkstation' should not Throw" time="0.2702" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMPlexWorkstation has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMPlexWorkstation..VMPlexWorkstation has expected properties" time="0.3397" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="830.0679" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPro." executed="True" result="Success" success="True" time="0.7706" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPro.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name VMwareWorkstationPro' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPro..'Export-EvergreenManifest -Name VMwareWorkstationPro' should not Throw" time="0.2571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="VMwareWorkstationPro has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: VMwareWorkstationPro..VMwareWorkstationPro has expected properties" time="0.3257" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="830.9685" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Maximus5ConEmu." executed="True" result="Success" success="True" time="0.7392" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Maximus5ConEmu.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Maximus5ConEmu' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Maximus5ConEmu..'Export-EvergreenManifest -Name Maximus5ConEmu' should not Throw" time="0.2763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Maximus5ConEmu has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Maximus5ConEmu..Maximus5ConEmu has expected properties" time="0.3099" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="831.896" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: voidtoolsEverything." executed="True" result="Success" success="True" time="0.7625" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: voidtoolsEverything.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name voidtoolsEverything' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: voidtoolsEverything..'Export-EvergreenManifest -Name voidtoolsEverything' should not Throw" time="0.2647" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="voidtoolsEverything has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: voidtoolsEverything..voidtoolsEverything has expected properties" time="0.3539" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="832.8221" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: deviceTRUST." executed="True" result="Success" success="True" time="0.7785" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: deviceTRUST.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name deviceTRUST' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: deviceTRUST..'Export-EvergreenManifest -Name deviceTRUST' should not Throw" time="0.2868" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="deviceTRUST has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: deviceTRUST..deviceTRUST has expected properties" time="0.3367" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="833.6669" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureWindowsVMAgent." executed="True" result="Success" success="True" time="0.6968" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureWindowsVMAgent.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftAzureWindowsVMAgent' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureWindowsVMAgent..'Export-EvergreenManifest -Name MicrosoftAzureWindowsVMAgent' should not Throw" time="0.2269" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureWindowsVMAgent has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureWindowsVMAgent..MicrosoftAzureWindowsVMAgent has expected properties" time="0.2961" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="834.4916" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru11." executed="True" result="Success" success="True" time="0.6836" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru11.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptOpenJDKSemuru11' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru11..'Export-EvergreenManifest -Name AdoptOpenJDKSemuru11' should not Throw" time="0.2165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptOpenJDKSemuru11 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptOpenJDKSemuru11..AdoptOpenJDKSemuru11 has expected properties" time="0.2931" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="835.4188" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpAgent." executed="True" result="Success" success="True" time="0.7842" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpAgent.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ControlUpAgent' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpAgent..'Export-EvergreenManifest -Name ControlUpAgent' should not Throw" time="0.2577" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ControlUpAgent has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ControlUpAgent..ControlUpAgent has expected properties" time="0.3588" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="836.2924" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MendeleyDesktop." executed="True" result="Success" success="True" time="0.7084" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MendeleyDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MendeleyDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MendeleyDesktop..'Export-EvergreenManifest -Name MendeleyDesktop' should not Throw" time="0.2335" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MendeleyDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MendeleyDesktop..MendeleyDesktop has expected properties" time="0.2991" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="837.1408" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeFree." executed="True" result="Success" success="True" time="0.7146" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeFree.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name JamTreeSizeFree' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeFree..'Export-EvergreenManifest -Name JamTreeSizeFree' should not Throw" time="0.2649" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="JamTreeSizeFree has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: JamTreeSizeFree..JamTreeSizeFree has expected properties" time="0.2917" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="838.1192" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudio." executed="True" result="Success" success="True" time="0.7946" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftVisualStudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudio..'Export-EvergreenManifest -Name MicrosoftVisualStudio' should not Throw" time="0.2708" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftVisualStudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftVisualStudio..MicrosoftVisualStudio has expected properties" time="0.3683" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="839.0662" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToOpener." executed="True" result="Success" success="True" time="0.7823" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToOpener.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name LogMeInGoToOpener' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToOpener..'Export-EvergreenManifest -Name LogMeInGoToOpener' should not Throw" time="0.297" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="LogMeInGoToOpener has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: LogMeInGoToOpener..LogMeInGoToOpener has expected properties" time="0.3144" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="840.0228" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: stealthpuppyWindowsCustomisedDefaults." executed="True" result="Success" success="True" time="0.7691" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: stealthpuppyWindowsCustomisedDefaults.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name stealthpuppyWindowsCustomisedDefaults' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: stealthpuppyWindowsCustomisedDefaults..'Export-EvergreenManifest -Name stealthpuppyWindowsCustomisedDefaults' should not Throw" time="0.2886" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="stealthpuppyWindowsCustomisedDefaults has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: stealthpuppyWindowsCustomisedDefaults..stealthpuppyWindowsCustomisedDefaults has expected properties" time="0.3252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="841.0139" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerEverywhere." executed="True" result="Success" success="True" time="0.8012" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerEverywhere.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TelerikFiddlerEverywhere' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerEverywhere..'Export-EvergreenManifest -Name TelerikFiddlerEverywhere' should not Throw" time="0.2633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TelerikFiddlerEverywhere has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TelerikFiddlerEverywhere..TelerikFiddlerEverywhere has expected properties" time="0.362" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="841.8936" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RDAnalyzer." executed="True" result="Success" success="True" time="0.7309" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RDAnalyzer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name RDAnalyzer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RDAnalyzer..'Export-EvergreenManifest -Name RDAnalyzer' should not Throw" time="0.2409" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="RDAnalyzer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: RDAnalyzer..RDAnalyzer has expected properties" time="0.3358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="842.8995" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Slack." executed="True" result="Success" success="True" time="0.8385" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Slack.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Slack' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Slack..'Export-EvergreenManifest -Name Slack' should not Throw" time="0.2965" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Slack has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Slack..Slack has expected properties" time="0.3624" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="843.9036" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Postman." executed="True" result="Success" success="True" time="0.8387" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Postman.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Postman' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Postman..'Export-EvergreenManifest -Name Postman' should not Throw" time="0.2891" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Postman has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Postman..Postman has expected properties" time="0.3596" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="844.9143" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BitwardenDesktop." executed="True" result="Success" success="True" time="0.8356" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BitwardenDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name BitwardenDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BitwardenDesktop..'Export-EvergreenManifest -Name BitwardenDesktop' should not Throw" time="0.3026" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="BitwardenDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: BitwardenDesktop..BitwardenDesktop has expected properties" time="0.3643" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="845.8717" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Handbrake." executed="True" result="Success" success="True" time="0.7809" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Handbrake.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Handbrake' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Handbrake..'Export-EvergreenManifest -Name Handbrake' should not Throw" time="0.295" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Handbrake has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Handbrake..Handbrake has expected properties" time="0.3305" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="846.8338" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SignalDesktop." executed="True" result="Success" success="True" time="0.7897" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SignalDesktop.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SignalDesktop' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SignalDesktop..'Export-EvergreenManifest -Name SignalDesktop' should not Throw" time="0.3082" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SignalDesktop has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SignalDesktop..SignalDesktop has expected properties" time="0.3158" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="847.7388" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AutoDarkMode." executed="True" result="Success" success="True" time="0.7563" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AutoDarkMode.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AutoDarkMode' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AutoDarkMode..'Export-EvergreenManifest -Name AutoDarkMode' should not Throw" time="0.2723" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AutoDarkMode has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AutoDarkMode..AutoDarkMode has expected properties" time="0.3188" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="848.7294" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitExtensions." executed="True" result="Success" success="True" time="0.8102" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitExtensions.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name GitExtensions' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitExtensions..'Export-EvergreenManifest -Name GitExtensions' should not Throw" time="0.2818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="GitExtensions has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: GitExtensions..GitExtensions has expected properties" time="0.3674" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="849.6539" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SmartBearSoapUI." executed="True" result="Success" success="True" time="0.7782" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SmartBearSoapUI.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name SmartBearSoapUI' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SmartBearSoapUI..'Export-EvergreenManifest -Name SmartBearSoapUI' should not Throw" time="0.2745" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="SmartBearSoapUI has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: SmartBearSoapUI..SmartBearSoapUI has expected properties" time="0.3269" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="850.6806" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AirtameApp." executed="True" result="Success" success="True" time="0.8503" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AirtameApp.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AirtameApp' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AirtameApp..'Export-EvergreenManifest -Name AirtameApp' should not Throw" time="0.2852" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AirtameApp has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AirtameApp..AirtameApp has expected properties" time="0.4006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="851.8079" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePass." executed="True" result="Success" success="True" time="0.9547" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePass.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name KeePass' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePass..'Export-EvergreenManifest -Name KeePass' should not Throw" time="0.3596" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="KeePass has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: KeePass..KeePass has expected properties" time="0.4271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="852.7414" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificJAWS." executed="True" result="Success" success="True" time="0.7636" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificJAWS.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FreedomScientificJAWS' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificJAWS..'Export-EvergreenManifest -Name FreedomScientificJAWS' should not Throw" time="0.2442" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificJAWS has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificJAWS..FreedomScientificJAWS has expected properties" time="0.3581" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="853.6489" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeamViewer." executed="True" result="Success" success="True" time="0.7391" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeamViewer.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TeamViewer' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeamViewer..'Export-EvergreenManifest -Name TeamViewer' should not Throw" time="0.2793" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TeamViewer has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TeamViewer..TeamViewer has expected properties" time="0.3051" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="854.5642" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithCamtasia." executed="True" result="Success" success="True" time="0.7586" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithCamtasia.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TechSmithCamtasia' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithCamtasia..'Export-EvergreenManifest -Name TechSmithCamtasia' should not Throw" time="0.2696" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithCamtasia has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithCamtasia..TechSmithCamtasia has expected properties" time="0.3282" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="855.4755" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificFusion." executed="True" result="Success" success="True" time="0.7645" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificFusion.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FreedomScientificFusion' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificFusion..'Export-EvergreenManifest -Name FreedomScientificFusion' should not Throw" time="0.265" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificFusion has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificFusion..FreedomScientificFusion has expected properties" time="0.3187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="856.5501" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AmazonCorretto." executed="True" result="Success" success="True" time="0.9277" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AmazonCorretto.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AmazonCorretto' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AmazonCorretto..'Export-EvergreenManifest -Name AmazonCorretto' should not Throw" time="0.3357" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AmazonCorretto has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AmazonCorretto..AmazonCorretto has expected properties" time="0.425" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="857.597" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefWorkstation." executed="True" result="Success" success="True" time="0.8822" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefWorkstation.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name ProgressChefWorkstation' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefWorkstation..'Export-EvergreenManifest -Name ProgressChefWorkstation' should not Throw" time="0.3086" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="ProgressChefWorkstation has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: ProgressChefWorkstation..ProgressChefWorkstation has expected properties" time="0.4096" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="858.4742" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSSAMCLI." executed="True" result="Success" success="True" time="0.7344" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSSAMCLI.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AWSSAMCLI' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSSAMCLI..'Export-EvergreenManifest -Name AWSSAMCLI' should not Throw" time="0.2472" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AWSSAMCLI has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AWSSAMCLI..AWSSAMCLI has expected properties" time="0.3267" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="859.2772" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: diagrams.net." executed="True" result="Success" success="True" time="0.6549" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: diagrams.net.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name diagrams.net' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: diagrams.net..'Export-EvergreenManifest -Name diagrams.net' should not Throw" time="0.2295" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="diagrams.net has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: diagrams.net..diagrams.net has expected properties" time="0.2812" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="860.1111" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin18." executed="True" result="Success" success="True" time="0.6856" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin18.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name AdoptiumTemurin18' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin18..'Export-EvergreenManifest -Name AdoptiumTemurin18' should not Throw" time="0.2296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="AdoptiumTemurin18 has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: AdoptiumTemurin18..AdoptiumTemurin18 has expected properties" time="0.3069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="860.9413" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Protege." executed="True" result="Success" success="True" time="0.6962" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Protege.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Protege' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Protege..'Export-EvergreenManifest -Name Protege' should not Throw" time="0.239" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Protege has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Protege..Protege has expected properties" time="0.3055" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="861.7859" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnConvert." executed="True" result="Success" success="True" time="0.7029" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnConvert.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name XnSoftXnConvert' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnConvert..'Export-EvergreenManifest -Name XnSoftXnConvert' should not Throw" time="0.253" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="XnSoftXnConvert has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: XnSoftXnConvert..XnSoftXnConvert has expected properties" time="0.3063" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="862.555" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: USBPcap." executed="True" result="Success" success="True" time="0.6426" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: USBPcap.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name USBPcap' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: USBPcap..'Export-EvergreenManifest -Name USBPcap' should not Throw" time="0.2303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="USBPcap has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: USBPcap..USBPcap has expected properties" time="0.2699" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="863.4692" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithSnagit." executed="True" result="Success" success="True" time="0.7512" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithSnagit.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name TechSmithSnagit' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithSnagit..'Export-EvergreenManifest -Name TechSmithSnagit' should not Throw" time="0.2758" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="TechSmithSnagit has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: TechSmithSnagit..TechSmithSnagit has expected properties" time="0.3394" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="864.5005" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zoom." executed="True" result="Success" success="True" time="0.9" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zoom.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name Zoom' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zoom..'Export-EvergreenManifest -Name Zoom' should not Throw" time="0.3264" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Zoom has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: Zoom..Zoom has expected properties" time="0.4187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="865.3282" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificZoomText." executed="True" result="Success" success="True" time="0.6947" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificZoomText.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name FreedomScientificZoomText' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificZoomText..'Export-EvergreenManifest -Name FreedomScientificZoomText' should not Throw" time="0.2316" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="FreedomScientificZoomText has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: FreedomScientificZoomText..FreedomScientificZoomText has expected properties" time="0.3215" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="866.1225" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MestrelabMnova." executed="True" result="Success" success="True" time="0.6581" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MestrelabMnova.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MestrelabMnova' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MestrelabMnova..'Export-EvergreenManifest -Name MestrelabMnova' should not Throw" time="0.2436" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MestrelabMnova has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MestrelabMnova..MestrelabMnova has expected properties" time="0.2743" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="866.9597" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jrsoftwareInnoSetup." executed="True" result="Success" success="True" time="0.701" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jrsoftwareInnoSetup.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name jrsoftwareInnoSetup' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jrsoftwareInnoSetup..'Export-EvergreenManifest -Name jrsoftwareInnoSetup' should not Throw" time="0.2631" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="jrsoftwareInnoSetup has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: jrsoftwareInnoSetup..jrsoftwareInnoSetup has expected properties" time="0.2969" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="868.005" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOutlook." executed="True" result="Success" success="True" time="0.8905" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOutlook.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftOutlook' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOutlook..'Export-EvergreenManifest -Name MicrosoftOutlook' should not Throw" time="0.326" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftOutlook has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftOutlook..MicrosoftOutlook has expected properties" time="0.4153" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest" executed="True" result="Success" success="True" time="868.9434" asserts="0" description="Export-EvergreenManifest">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureDataStudio." executed="True" result="Success" success="True" time="0.7735" asserts="0" description="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureDataStudio.">
                <results>
                  <test-case description="'Export-EvergreenManifest -Name MicrosoftAzureDataStudio' should not Throw" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureDataStudio..'Export-EvergreenManifest -Name MicrosoftAzureDataStudio' should not Throw" time="0.2936" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="MicrosoftAzureDataStudio has expected properties" name="Export-EvergreenManifest.Validate Export-EvergreenManifest works with: MicrosoftAzureDataStudio..MicrosoftAzureDataStudio has expected properties" time="0.3272" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenManifest fail tests" executed="True" result="Success" success="True" time="869.675" asserts="0" description="Export-EvergreenManifest fail tests">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenManifest fail tests.Validate Export-EvergreenManifest fails gracefully" executed="True" result="Success" success="True" time="0.6101" asserts="0" description="Export-EvergreenManifest fail tests.Validate Export-EvergreenManifest fails gracefully">
                <results>
                  <test-case description="Should Throw with invalid app" name="Export-EvergreenManifest fail tests.Validate Export-EvergreenManifest fails gracefully.Should Throw with invalid app" time="0.4669" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Export-EvergreenApp" executed="True" result="Success" success="True" time="871.3173" asserts="0" description="Export-EvergreenApp">
            <results>
              <test-suite type="TestFixture" name="Export-EvergreenApp.Validate Export-EvergreenApp functionality" executed="True" result="Success" success="True" time="0.7266" asserts="0" description="Export-EvergreenApp.Validate Export-EvergreenApp functionality">
                <results>
                  <test-case description="Should not throw with correct input" name="Export-EvergreenApp.Validate Export-EvergreenApp functionality.Should not throw with correct input" time="0.2407" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should throw if the input file is invalid" name="Export-EvergreenApp.Validate Export-EvergreenApp functionality.Should throw if the input file is invalid" time="0.1716" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should write the output file OK" name="Export-EvergreenApp.Validate Export-EvergreenApp functionality.Should write the output file OK" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-EvergreenApp" executed="True" result="Success" success="True" time="872.9106" asserts="0" description="Test-EvergreenApp">
            <results>
              <test-case description="Should not throw with valid input" name="Test-EvergreenApp.Should not throw with valid input" time="0.3571" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should return an object with valid properties" name="Test-EvergreenApp.Should return an object with valid properties" time="0.1697" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test Evergreen Library" executed="True" result="Success" success="True" time="879.6567" asserts="0" description="Test Evergreen Library">
            <results>
              <test-suite type="TestFixture" name="Test Evergreen Library.Test 'New-EvergreenLibrary'" executed="True" result="Success" success="True" time="0.8285" asserts="0" description="Test Evergreen Library.Test 'New-EvergreenLibrary'">
                <results>
                  <test-case description="Does not throw when creating a new new Evergreen Library" name="Test Evergreen Library.Test 'New-EvergreenLibrary'.Does not throw when creating a new new Evergreen Library" time="0.182" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Creates a new Evergreen Library OK" name="Test Evergreen Library.Test 'New-EvergreenLibrary'.Creates a new Evergreen Library OK" time="0.2034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Sets the library name OK" name="Test Evergreen Library.Test 'New-EvergreenLibrary'.Sets the library name OK" time="0.2727" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test Evergreen Library.Test 'Invoke-EvergreenLibraryUpdate'" executed="True" result="Success" success="True" time="6.2948" asserts="0" description="Test Evergreen Library.Test 'Invoke-EvergreenLibraryUpdate'">
                <results>
                  <test-case description="Update an Evergreen library" name="Test Evergreen Library.Test 'Invoke-EvergreenLibraryUpdate'.Update an Evergreen library" time="5.3206" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Test Evergreen Library.Test 'Get-EvergreenLibrary'" executed="True" result="Success" success="True" time="6.6154" asserts="0" description="Test Evergreen Library.Test 'Get-EvergreenLibrary'">
                <results>
                  <test-case description="Returns details of the library" name="Test Evergreen Library.Test 'Get-EvergreenLibrary'.Returns details of the library" time="0.1783" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>